{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/map/MapSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapObject.ts","webpack:///../../../../../src/.internal/charts/map/Geo.ts","webpack:///../../../../../src/.internal/charts/map/MapLine.ts","webpack:///../../../../../src/.internal/charts/map/MapUtils.ts","webpack:///../../../../../src/.internal/charts/map/MapImage.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygon.ts","webpack:///../../../../../src/.internal/charts/map/MapLineSeries.ts","webpack:///../../../../../src/.internal/charts/map/SmallMap.ts","webpack:///../../../../../src/.internal/charts/map/MapSpline.ts","webpack:///../../../../../src/.internal/charts/map/MapArc.ts","webpack:///../../../../../src/.internal/charts/map/ZoomControl.ts","webpack:///./maps.js","webpack:///../../src/maps.ts","webpack:///../../../../../src/.internal/charts/types/MapChart.ts","webpack:///../../../../../src/.internal/charts/map/MapLineObject.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygonSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapSplineSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapImageSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapArcSeries.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Mercator.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Miller.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Eckert6.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Orthographic.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Projection.ts"],"names":["__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__","__webpack_require__","MapSeriesDataItem","_super","_this","call","this","className","values","value","applyTheme","__WEBPACK_IMPORTED_MODULE_0_tslib__","Object","defineProperty","prototype","setValue","updateExtremes","geoPoints","s","length","longitude","latitude","west","east","north","south","__WEBPACK_IMPORTED_MODULE_1__series_Series__","MapSeries","isMeasured","nonScalingStroke","dataFields","createDataItem","validateData","__WEBPACK_IMPORTED_MODULE_3__core_utils_Iterator__","dataItems","iterator","dataItem","chart","checkInclude","includes","excludes","id","indexOf","getPropertyValue","setPropertyValue","invalidateData","processIncExc","handleObjectAdded","event","mapObject","newValue","parent","series","_geodata","geodata","_dataUsers","x","_dataSources","getDataSource","removeDispose","component","events","on","loadData","setDataSourceEvents","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","registeredClasses","MapObject","layout","clickable","validate","readerTitle","itemReaderText","__WEBPACK_IMPORTED_MODULE_1__core_Container__","multiline","multiline_1","multiline_1_1","next","done","segment","segment_1","segment_1_1","point","normalizePoint","geoPoint","y","__WEBPACK_IMPORTED_MODULE_1__core_utils_Math__","wrapAngleTo180","Math","asin","sin","latitude180","abs","angle","__WEBPACK_IMPORTED_MODULE_12__Geo__","MapLine","line","__WEBPACK_IMPORTED_MODULE_5__core_elements_Polyline__","stroke","__WEBPACK_IMPORTED_MODULE_7__core_utils_Color__","strokeOpacity","interfaceColors","__WEBPACK_IMPORTED_MODULE_8__core_utils_InterfaceColorSet__","getFor","shortestDistance","positionToPoint","position","multiGeoLine","images","i","image","__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__","map","hasKey","getKey","property","invalidate","imagesToConnect","_a","_b","push","newMultiGeoLine","geoLine","newGeoLine","p","geoPointA","geoPointB","stepCount","max","d","intermediatePoint","projection","previousPoint","segments","projectGeoLine","_arrow","validatePosition","__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__","lineObjects","measureElement","_lineObjects","__WEBPACK_IMPORTED_MODULE_4__core_utils_List__","__WEBPACK_IMPORTED_MODULE_2__MapLineObject__","handleLineObjectAdded","_disposers","template","mapLineObject","mapLine","arrow","createChild","shouldClone","width","height","triangle","__WEBPACK_IMPORTED_MODULE_3__core_elements_Triangle__","fillOpacity","__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__","rotation","horizontalCenter","verticalCenter","copyFrom","source","clone","__WEBPACK_IMPORTED_MODULE_1__MapObject__","__WEBPACK_IMPORTED_MODULE_6__core_Registry__","multiPointToGeo","points","pointToGeo","multiPolygon","multiGeoArea","surface","hole","multiLine","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","MapImage","moveTo","convert","__WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__","MapPolygon","polygon","__WEBPACK_IMPORTED_MODULE_2__core_elements_Polygon__","fill","tooltipPosition","multiGeoPolygon","projectGeoArea","pixelWidth","pixelHeight","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Disposer__","MapLineSeriesDataItem","_mapLine","mapLine_1","mapLines","create","addSprite","removeValue","_line","__WEBPACK_IMPORTED_MODULE_5__MapUtils__","_multiLine","_geoLine","_multiGeoLine","updateLineExtremes","__WEBPACK_IMPORTED_MODULE_1__MapSeries__","MapLineSeries","data","clear","useGeodata","geoJSON","features","type","geometry","console","log","feature","id_1","this_1","include","exclude","coordinates","dataObject","__WEBPACK_IMPORTED_MODULE_6__core_utils_Array__","multiLineString","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","properties","__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__","moveValue","_mapLines","lineTemplate","createLine","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_2__MapLine__","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","SmallMap","_chart","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","align","valign","percentHeight","percentWidth","margin","__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__","background","moveToPosition","updateMapSize","seriesContainer","rectangle","__WEBPACK_IMPORTED_MODULE_2__core_elements_Rectangle__","strokeWidth","__WEBPACK_IMPORTED_MODULE_6__core_utils_Color__","_series","handleSeriesAdded","handleSeriesRemoved","contains","newSeries","dataUsers","interactionsEnabled","svgPoint","rectPoint","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","zoomLevel","scale","min","svgPointToGeo","zoomToGeoPoint","get","set","updateRectangle","ceil","pixelX","pixelY","scaleRatio","afterDraw","maskRectangle","processConfig","config","len","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","MapSpline","__WEBPACK_IMPORTED_MODULE_2__core_elements_Polyspline__","tensionX","tensionY","__WEBPACK_IMPORTED_MODULE_1__MapLine__","MapArc","__WEBPACK_IMPORTED_MODULE_2__core_elements_Polyarc__","__WEBPACK_IMPORTED_MODULE_9__core_utils_InterfaceColorSet__","ZoomControl","padding","plusButton","__WEBPACK_IMPORTED_MODULE_2__core_elements_Button__","label","text","__WEBPACK_IMPORTED_MODULE_7__core_utils_Percent__","fontFamily","slider","handleBackgroundClick","updateThumbSize","thumb","draggable","handleThumbDrag","minusButton","role","readerLive","language","translate","fixLayout","undefined","marginTop","marginBottom","toFront","toBack","minX","maxX","minY","maxY","marginLeft","marginRight","sprite","target","spritePoint","maxPower","maxZoomLevel","LN2","minPower","minZoomLevel","power","pow","zoomGeoPoint","updateThumb","zoomOut","__WEBPACK_IMPORTED_MODULE_6__core_interaction_Interaction__","body","ev","topParent","hasFocused","__WEBPACK_IMPORTED_MODULE_5__core_utils_Keyboard__","isKey","isFocused","zoomIn","minHeight","visible","minWidth","isDown","step","createBackground","__WEBPACK_IMPORTED_MODULE_3__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_8__core_Registry__","window","am4maps","__WEBPACK_IMPORTED_MODULE_0__es2015_maps__","__WEBPACK_IMPORTED_MODULE_20__internal_charts_map_Geo__","__WEBPACK_IMPORTED_MODULE_15__map_Geo__","MapChartDataItem","__WEBPACK_IMPORTED_MODULE_1__SerialChart__","MapChart","zoomDuration","zoomEasing","__WEBPACK_IMPORTED_MODULE_12__core_utils_Ease__","_prevZoomGeoPoint","__WEBPACK_IMPORTED_MODULE_5__map_projections_Projection__","deltaLongitude","maxPanOut","homeZoomLevel","inert","resizable","handleMapTransform","handleDoubleHit","handleDrag","zIndex","chartContainer","_mapAnimation","stop","updateScaleRatio","_zoomGeoPointReal","each","updateTooltipBounds","chartContainerBg","e","dragStart","interactions","downPointers","getIndex","dragStop","focusable","handleMapDown","__WEBPACK_IMPORTED_MODULE_8__core_interaction_Interaction__","_zoomControl","__WEBPACK_IMPORTED_MODULE_7__core_utils_Keyboard__","getEventKey","pan","mouseWheelBehavior","ww","seriesWidth","hh","seriesHeight","maxWidth","maxHeight","applyInternalDefaults","__WEBPACK_IMPORTED_MODULE_14__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Utils__","htmlContainer","handleWheel","shift","_mouseWheelDisposer","dispose","wheelable","__WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__","centerPoint","westPoint","eastPoint","northPoint","southPoint","vScale","innerWidth","hScale","innerHeight","Infinity","centerGeoPoint","measuredWidth","measuredHeight","goHome","dispatch","seriesPoint","seriesPointToGeo","geoPointToSVG","geoPointToSeries","invert","center","duration","__WEBPACK_IMPORTED_MODULE_10__core_utils_Math__","animate","to","pixelPaddingLeft","pixelPaddingTop","zoomToMapObject","__WEBPACK_IMPORTED_MODULE_3__map_MapImage__","__WEBPACK_IMPORTED_MODULE_4__map_MapPolygon__","zoomToRectangle","level","_prevZoomLevel","_smallMap","smallMap","__WEBPACK_IMPORTED_MODULE_6__map_SmallMap__","zoomControl","createSeries","__WEBPACK_IMPORTED_MODULE_2__map_MapSeries__","invalidateProjection","createClassInstance","configOrder","a","b","asIs","field","homeGeoPoint","__WEBPACK_IMPORTED_MODULE_9__core_Registry__","MapLineObject","adjustRotation","MapPolygonSeriesDataItem","_mapPolygon","mapPolygon_1","mapPolygons","_polygon","_multiPolygon","_geoPolygon","geoPolygon","_multiGeoPolygon","updateAreaExtremes","mapPolygon","MapPolygonSeries","parsingStepDuration","_parseDataFrom","_mapPolygons","polygonTemplate","__WEBPACK_IMPORTED_MODULE_2__MapPolygon__","getPolygonById","dataContext","MapSplineSeriesDataItem","__WEBPACK_IMPORTED_MODULE_1__MapLineSeries__","MapSplineSeries","__WEBPACK_IMPORTED_MODULE_2__MapSpline__","MapImageSeriesDataItem","_mapImage","mapImage_1","mapImages","_point","__WEBPACK_IMPORTED_MODULE_6__MapUtils__","_geoPoint","mapImage","MapImageSeries","multiPoint","multiGeoPoint","__WEBPACK_IMPORTED_MODULE_5__core_utils_Array__","_mapImages","__WEBPACK_IMPORTED_MODULE_2__MapImage__","validateDataElement","MapArcSeriesDataItem","MapArcSeries","__WEBPACK_IMPORTED_MODULE_2__MapArc__","Mercator","unproject","atan","exp","PI","project","lambda","phi","tan","__WEBPACK_IMPORTED_MODULE_1__Projection__","Miller","Eckert6","j","k","sqrt","cos","delta","__WEBPACK_IMPORTED_MODULE_3__core_utils_Math__","Orthographic","getClipRectangle1","deltaLatitude","getRect1","getClipRectangle2","getRect2","clipGeoArea","geoArea","clippedArea","clipRectangle1","clipRectangle2","rect1","rect2","clippedAreas","surfaceRect","getExtremes","isInside","isOutside","clippedSurface1","clip","clippedHole1","clippedSurface2","clippedHole2","clippedAreas_1","clippedAreas_1_1","area","prevPoint","i_1","extraPoints","splice","apply","__WEBPACK_IMPORTED_MODULE_3__Geo__","Projection","deltaGama","clippedGeoArea","convertGeoArea","convertGeoLine","clipGeoLine","clippedLine","clippedSegments","clipLine","concat","clippedSegments2","convertedPoints","convertedAreaPoints","convertedSurface","convertedHole","convertedSegmentPoints","rotate","pointInRadians","__WEBPACK_IMPORTED_MODULE_2__core_utils_Math__","unrotate","deltaGamma","deltaLambda","deltaPhi","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","cosPhi","z","atan2","subjectPolyline","clipPolygon","cp1","cp2","inside","intersection","dc","dp","n1","n2","n3","inputList","subjectPolygon","outputList","r1","r2","pointA","pointB","phi1","lambda1","phi2","lambda2","sinPhi1","cosPhi1","sinLambda1","cosLambda1","sinPhi2","cosPhi2","sinLambda2","cosLambda2","A","B","phi3","lambda3","__WEBPACK_IMPORTED_MODULE_1__core_Registry__"],"mappings":"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","file":"maps.js","sourcesContent":["/**\r\n * Map series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"../series/Series\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapObject } from \"./MapObject\";\r\nimport { IListEvents } from \"../../core/utils/List\";\r\nimport { IMapDataObject, IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { DataSource } from \"../../core/data/DataSource\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * Longitude of the East-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * Longitude of the West-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * Latitude of the South-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * Latitude of the North-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeriesDataItem\";\r\n\t\tthis.values.value = {};\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the data item.\r\n\t *\r\n\t * Value may be used in heat-map calculations.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateExtremes(geoPoints: IGeoPoint[]): void {\r\n\t\tfor (let s: number = 0; s < geoPoints.length; s++) {\r\n\t\t\tlet longitude: number = geoPoints[s].longitude;\r\n\t\t\tlet latitude: number = geoPoints[s].latitude;\r\n\r\n\t\t\tif ((this.west > longitude) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = longitude;\r\n\t\t\t}\r\n\t\t\tif ((this.east < longitude) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = longitude;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < latitude) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = latitude;\r\n\t\t\t}\r\n\t\t\tif ((this.south > latitude) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = latitude;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * [GEOJSONGeometry description]\r\n *\r\n * @type {string}\r\n * @todo Description\r\n */\r\nexport type GEOJSONGeometry = \"Point\" | \"LineString\" | \"Polygon\" | \"MultiPoint\" | \"MultiLineString\" | \"MultiPolygon\";\r\n\r\n/**\r\n * Defines data fields for [[MapSeries]].\r\n *\r\n * @todo Alllow any number of values?\r\n */\r\nexport interface IMapSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * A field number in data for a numeric value of the map object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * A flag telling if the series should get data from `geodata` or not\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tuseGeodata?: boolean;\r\n\r\n\t/**\r\n\t * A list of object ids to include from the series.\r\n\t *\r\n\t * @type {string[]}\r\n\t */\r\n\tinclude?: string[];\r\n\r\n\t/**\r\n\t * A list of object ids to exclude from the series.\r\n\t *\r\n\t * @type {string[]}\r\n\t */\r\n\texclude?: string[];\r\n}\r\n\r\n/**\r\n * Defines events for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSeriesAdapters extends ISeriesAdapters, IMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for series of map objects.\r\n *\r\n * @see {@link IMapSeriesEvents} for a list of available Events\r\n * @see {@link IMapSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSeriesDataItem;\r\n\r\n\t/**\r\n\t * The longitude of the East-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * The longitude of the West-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * The latitude of the South-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * The latitude of the North-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * @see {@link http://geojson.org/} GeoJSON official specification\r\n\t * @type {Object}\r\n\t */\r\n\tprotected _geodata: Object;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeries\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.value = \"value\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tif ((this.west > dataItem.west) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = dataItem.west;\r\n\t\t\t}\r\n\t\t\tif ((this.east < dataItem.east) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = dataItem.east;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < dataItem.north) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = dataItem.north;\r\n\t\t\t}\r\n\t\t\tif ((this.south > dataItem.south) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = dataItem.south;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.chart.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether object should be included in series.\r\n\t *\r\n\t * @param  {string[]}  includes  A list of explicitly included ids\r\n\t * @param  {string[]}  excludes  A list of explicitly excluded ids\r\n\t * @param  {string}    id        Id of the object\r\n\t * @return {boolean}             Include?\r\n\t */\r\n\tprotected checkInclude(includes: string[], excludes: string[], id: string): boolean {\r\n\t\tif (includes) {\r\n\t\t\tif (includes.length == 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (includes.indexOf(id) == -1) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (excludes && excludes.length > 0) {\r\n\t\t\tif (excludes.indexOf(id) != -1) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Should the map extract all the data about element from the GeoJSON?\r\n\t *\r\n\t * This is especially relevant for [[MapPolygonSeries]]. If not set to `true`\r\n\t * polygon series will need to contain geographical data in itself in order\r\n\t * to be drawn.\r\n\t *\r\n\t * If this is set to `true`, series will try to extract data for its objects\r\n\t * from either chart-level `geodata` or from series' `geodata` which holds\r\n\t * map infor in GeoJSON format.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Use GeoJSON data?\r\n\t */\r\n\tpublic set useGeodata(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"useGeodata\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use GeoJSON data?\r\n\t */\r\n\tpublic get useGeodata(): boolean {\r\n\t\treturn this.getPropertyValue(\"useGeodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be explictly included in the series.\r\n\t *\r\n\t * If this is not set, the series will automatically include all of the\r\n\t * objects, available in the GeoJSON map. (minus the ones listed in\r\n\t * `exclude`)\r\n\t *\r\n\t * If you need to display only specific objects, use `include`. E.g.:\r\n\t *\r\n\t * `include = [\"FR\", \"ES\", \"DE\"];`\r\n\t *\r\n\t * The above will show only France, Spain, and Germany out of the whole map.\r\n\t *\r\n\t * @param {string[]}  value  Included objects\r\n\t */\r\n\tpublic set include(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"include\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc() {\r\n\t\t//this.data = [];\r\n\t\tthis.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string[]} Included objects\r\n\t */\r\n\tpublic get include(): string[] {\r\n\t\treturn this.getPropertyValue(\"include\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be excluded from the series.\r\n\t *\r\n\t * E.g. you want to include all of the areas from a GeoJSON map, except\r\n\t * Antarctica.\r\n\t *\r\n\t * You'd leave `include` empty, and set `exclude = [\"AQ\"]`.\r\n\t *\r\n\t * @param {string[]}  value  Excluded ids\r\n\t */\r\n\tpublic set exclude(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"exclude\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string[]} Excluded ids\r\n\t */\r\n\tpublic get exclude(): string[] {\r\n\t\treturn this.getPropertyValue(\"exclude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a newly added object.\r\n\t *\r\n\t * @param {IListEvents<MapObject>[\"inserted\"]} event [description]\r\n\t */\r\n\tprotected handleObjectAdded(event: IListEvents<MapObject>[\"inserted\"]) {\r\n\t\tlet mapObject: MapObject = event.newValue;\r\n\t\tmapObject.parent = this;\r\n\t\tmapObject.series = this;\r\n\t}\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * The series supports the following GeoJSON objects: `Point`, `LineString`,\r\n\t * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n\t *\r\n\t * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n\t * @param {Object} geoJSON GeoJSON data\r\n\t */\r\n\tpublic set geodata(geodata: Object) {\r\n\t\tif (geodata != this._geodata) {\r\n\t\t\tthis._geodata = geodata;\r\n\t\t\tthis.invalidateData();\r\n\r\n\t\t\t$iter.each(this._dataUsers.iterator(), (x) => {\r\n\t\t\t\tx.invalidateData();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Object} GeoJSON data\r\n\t */\r\n\tpublic get geodata(): Object {\r\n\t\treturn this._geodata;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @param {DataSource} value Data source\r\n\t */\r\n\tpublic set geodataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"geodata\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"geodata\"] = value;\r\n\t\tthis._dataSources[\"geodata\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"geodata\")\r\n\t\t}, this);\r\n\t\tthis.setDataSourceEvents(value, \"geodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[DataSource]] specifically for loading Component's data.\r\n\t *\r\n\t * @return {DataSource} Data source\r\n\t */\r\n\tpublic get geodataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.getDataSource(\"geodata\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"geodata\"];\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSeries\"] = MapSeries;\r\nregistry.registeredClasses[\"MapSeriesDataItem\"] = MapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSeries.ts","/**\r\n * Map object module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines propeties for [[MapObject]].\r\n */\r\nexport interface IMapObjectProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[MapObject]].\r\n */\r\nexport interface IMapObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapObjectAdapters extends IContainerAdapters, IMapObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all map objects: lines, images, etc.\r\n *\r\n * @see {@link IMapObjectEvents} for a list of available events\r\n * @see {@link IMapObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapObjectProperties}\r\n\t */\r\n\tpublic _properties!: IMapObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapObjectAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapObjectEvents}\r\n\t */\r\n\tpublic _events!: IMapObjectEvents;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapSeries}\r\n\t */\r\n\tpublic series: MapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapObject\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.clickable = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates this object, forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis.readerTitle = this.series.itemReaderText;\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapObject\"] = MapObject;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapObject.ts","/**\r\n * A collection of GeoJSON format-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * Normalizes a geo-point.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint}  geoPoint  Source geo-point\r\n * @return {IGeoPoint}            Normalized geo-point\r\n */\r\nexport function normalizePoint(geoPoint: IGeoPoint): IGeoPoint {\r\n\tlet longitude = wrapAngleTo180(geoPoint.longitude);\r\n\tlet latitude = Math.asin(Math.sin((geoPoint.latitude * $math.RADIANS))) * $math.DEGREES;\r\n\r\n\tlet latitude180 = wrapAngleTo180(geoPoint.latitude);\r\n\r\n\tif (Math.abs(latitude180) > 90) {\r\n\t\tlongitude = wrapAngleTo180(longitude + 180);\r\n\t}\r\n\r\n\tgeoPoint.longitude = longitude;\r\n\tgeoPoint.latitude = latitude;\r\n\r\n\treturn geoPoint;\r\n}\r\n\r\n/**\r\n * Normalizes all points of a geo-line.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint[][]}  multiline  Source geo-line\r\n * @return {IGeoPoint[]}               Normalized geo-line\r\n */\r\nexport function normalizeMultiline(multiline: IGeoPoint[][]): IGeoPoint[][] {\r\n\tfor (let segment of multiline) {\r\n\t\tfor (let point of segment) {\r\n\t\t\tpoint = normalizePoint(point);\r\n\t\t}\r\n\t}\r\n\treturn multiline;\r\n}\r\n\r\n/**\r\n * [wrapAngleTo180 description]\r\n *\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n * @param  {number}  angle  Angle\r\n * @return {number}         Angle\r\n */\r\nexport function wrapAngleTo180(angle: number): number {\r\n\tangle = angle % 360;\r\n\r\n\tif (angle > 180) {\r\n\t\tangle -= 360;\r\n\t}\r\n\tif (angle < -180) {\r\n\t\tangle += 360;\r\n\t}\r\n\r\n\treturn angle;\r\n}\r\n\r\n/**\r\n * Converts a geo point to a regular point object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint}  geoPoint  Source geo point\r\n * @return {IPoint}               Point\r\n */\r\nexport function geoToPoint(geoPoint: IGeoPoint): IPoint {\r\n\treturn { x: geoPoint.longitude, y: geoPoint.latitude };\r\n}\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/Geo.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapLineObject } from \"./MapLineObject\";\r\nimport { MapLineSeriesDataItem, MapLineSeries } from \"./MapLineSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $geo from \"./Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLine]].\r\n */\r\nexport interface IMapLineProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Lat/long coordinates of all line ends and intermediate elbows.\r\n\t */\r\n\tmultiGeoLine?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * If `true` it line will be arched in the way to simulate shortest path\r\n\t * over curvature of Earth's surface, based on currently used on projection.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tshortestDistance?: boolean;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t */\r\n\timagesToConnect?: MapImage[];\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLine]].\r\n */\r\nexport interface IMapLineEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLine]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineAdapters extends IMapObjectAdapters, IMapLineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a line on the map.\r\n *\r\n * @see {@link IMapLineEvents} for a list of available events\r\n * @see {@link IMapLineAdapters} for a list of available Adapters\r\n */\r\nexport class MapLine extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapLineProperties}\r\n\t */\r\n\tpublic _properties!: IMapLineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapLineAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapLineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapLineEvents}\r\n\t */\r\n\tpublic _events!: IMapLineEvents;\r\n\r\n\t/**\r\n\t * A line visual element.\r\n\t *\r\n\t * @type {Polyline}\r\n\t */\r\n\tpublic line: Polyline;\r\n\r\n\t/**\r\n\t * [_lineObjects description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {ListTemplate<MapLineObject>}\r\n\t */\r\n\tprotected _lineObjects: ListTemplate<MapLineObject>;\r\n\r\n\t/**\r\n\t * [_arrow description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MapLineObject}\r\n\t */\r\n\tprotected _arrow: MapLineObject;\r\n\r\n\t/**\r\n\t * [_distance description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _distance: number;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @type {MapLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapLineSeries}\r\n\t */\r\n\tpublic series: MapLineSeries;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t * @ignore\r\n\t */\r\n\tprotected _imagesToConnect: MapImage[];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLine\";\r\n\r\n\t\t// Create a line and set its default properties\r\n\t\tthis.line = new Polyline();\r\n\t\tthis.line.stroke = color();\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.shortestDistance = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position within the line (0-1) to a physical point\r\n\t * coordinates.\r\n\t *\r\n\t * 0 indicates start of the line, 0.5 - middle, while 1 indicates the end.\r\n\t *\r\n\t * @param  {number}             position  Position (0-1)\r\n\t * @return {IOrientationPoint}            Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tif (this.line) {\r\n\t\t\treturn this.line.positionToPoint(position);\r\n\t\t}\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [multiGeoLine description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IGeoPoint[][]} multiGeoLine [description]\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoLine\", $geo.normalizeMultiline(multiGeoLine), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} [description]\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\treturn this.getPropertyValue(\"multiGeoLine\");\r\n\t}\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images\r\n\t * which will be connected by the line.\r\n\t *\r\n\t * Parameter is an array that can hold string `id`'s to of the images, or\r\n\t * references to actual [[MapImage]] objects.\r\n\t *\r\n\t * @param {MapImages[]}  images  Images\r\n\t */\r\n\tpublic set imagesToConnect(images: MapImage[] | string[]) {\r\n\t\t//@todo dispose listeners if previous imagesToConnect exists\r\n\t\tfor (let i = 0; i < images.length; i++) {\r\n\t\t\tlet image = images[i];\r\n\t\t\tif ($type.isString(image)) {\r\n\t\t\t\tif (this.map.hasKey(image)) {\r\n\t\t\t\t\timage = <MapImage>this.map.getKey(image);\r\n\t\t\t\t\timages[i] = image;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\timage.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\tif (event.property == \"longitude\" || event.property == \"latitude\") {\r\n\t\t\t\t\tthis.invalidate();\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"imagesToConnect\", images);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapImages[]}\r\n\t */\r\n\tpublic get imagesToConnect(): MapImage[] | string[] {\r\n\t\treturn this.getPropertyValue(\"imagesToConnect\");\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the line, effectively forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chart: MapChart = this.series.chart;\r\n\t\t//let multiPoints: IPoint[][] = [];\r\n\t\tlet multiGeoLine: IGeoPoint[][] = this.multiGeoLine || [];\r\n\r\n\t\tif (this.imagesToConnect) {\r\n\t\t\tlet segment: IGeoPoint[] = [];\r\n\t\t\tmultiGeoLine = [segment];\r\n\r\n\t\t\tfor (let image of this.imagesToConnect) {\r\n\t\t\t\tsegment.push({ longitude: (<MapImage>image).longitude, latitude: (<MapImage>image).latitude });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.shortestDistance) {\r\n\t\t\tlet newMultiGeoLine: IGeoPoint[][] = [];\r\n\r\n\t\t\tfor (let i = 0; i < multiGeoLine.length; i++) {\r\n\t\t\t\tlet geoLine: IGeoPoint[] = multiGeoLine[i];\r\n\t\t\t\tlet newGeoLine: IGeoPoint[] = [];\r\n\r\n\t\t\t\tfor (let p = 1; p < geoLine.length; p++) {\r\n\t\t\t\t\tlet geoPointA: IGeoPoint = geoLine[p - 1];\r\n\t\t\t\t\tlet geoPointB: IGeoPoint = geoLine[p];\r\n\r\n\t\t\t\t\tlet stepCount: number = Math.max(Math.abs(geoPointA.latitude - geoPointB.latitude), Math.abs(geoPointA.longitude - geoPointB.longitude));\r\n\t\t\t\t\t//let latitudeStep: number = (geoPointB.latitude - geoPointA.latitude) / stepCount;\r\n\t\t\t\t\t//let longitudeStep: number = (geoPointB.longitude - geoPointA.longitude) / stepCount;\r\n\r\n\t\t\t\t\tfor (let d = 0; d < stepCount; d++) {\r\n\t\t\t\t\t\tlet intermediatePoint = chart.projection.intermediatePoint(geoPointA, geoPointB, d / stepCount);\r\n\r\n\t\t\t\t\t\tif (newGeoLine.length > 0) {\r\n\t\t\t\t\t\t\tlet previousPoint = newGeoLine[newGeoLine.length - 1];\r\n\t\t\t\t\t\t\tif (Math.abs(previousPoint.longitude - intermediatePoint.longitude) > 359) {\r\n\t\t\t\t\t\t\t\tnewMultiGeoLine.push(newGeoLine);\r\n\t\t\t\t\t\t\t\tnewGeoLine = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnewGeoLine.push(intermediatePoint);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// add last point to avoid gap\r\n\t\t\t\t\tnewGeoLine.push(geoPointB);\r\n\t\t\t\t}\r\n\t\t\t\tnewMultiGeoLine.push(newGeoLine);\r\n\t\t\t}\r\n\t\t\tmultiGeoLine = newMultiGeoLine;\r\n\t\t}\r\n\r\n\t\tthis.line.segments = chart.projection.projectGeoLine(multiGeoLine);\r\n\r\n\t\tif (this._arrow) {\r\n\t\t\tthis._arrow.validatePosition();\r\n\t\t}\r\n\r\n\t\t$iter.each(this.lineObjects.iterator(), (x) => {\r\n\t\t\tx.validatePosition();\r\n\t\t});\r\n\r\n\t\tthis.line.parent = this;\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * The line should take the shortest path over the globe.\r\n\t *\r\n\t * Enabling this will make the line look differently in different\r\n\t * projections. Only `MapLine` supports this setting, `MapArc` and\r\n\t * `MapSplice` don't.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Real path?\r\n\t */\r\n\tpublic set shortestDistance(value: boolean) {\r\n\t\tthis.setPropertyValue(\"shortestDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Real path?\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn this.getPropertyValue(\"shortestDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * List of separate line objects, the line consists of.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @readonly\r\n\t * @return {ListTemplate<MapLineObject>} List of line objects\r\n\t */\r\n\tpublic get lineObjects(): ListTemplate<MapLineObject> {\r\n\t\tif (!this._lineObjects) {\r\n\t\t\tthis._lineObjects = new ListTemplate<MapLineObject>(new MapLineObject());\r\n\t\t\tthis._lineObjects.events.on(\"inserted\", this.handleLineObjectAdded, this);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._lineObjects));\r\n\t\t\tthis._disposers.push(this._lineObjects.template);\r\n\t\t}\r\n\r\n\t\treturn this._lineObjects;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorate a [[LineObject]] when it is added to the line.\r\n\t *\r\n\t * @param {IListEvents<MapLineObject>[\"inserted\"]}  event  Event\r\n\t */\r\n\tprotected handleLineObjectAdded(event: IListEvents<MapLineObject>[\"inserted\"]) {\r\n\t\tlet mapLineObject: MapLineObject = event.newValue;\r\n\t\tmapLineObject.mapLine = this;\r\n\t\tmapLineObject.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLineObject]] to use as an option arrowhead on the line.\r\n\t *\r\n\t * Just accessing this property will create a default arrowhead on the line\r\n\t * automatically.\r\n\t *\r\n\t * @param {MapLineObject}  arrow  Arrow element\r\n\t */\r\n\tpublic set arrow(arrow: MapLineObject) {\r\n\t\tthis._arrow = arrow;\r\n\t\tarrow.mapLine = this;\r\n\t\tarrow.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapLineObject} Arrow element\r\n\t */\r\n\tpublic get arrow(): MapLineObject {\r\n\t\tif (!this._arrow) {\r\n\t\t\tlet arrow: MapLineObject = this.createChild(MapLineObject);\r\n\t\t\tarrow.shouldClone = false;\r\n\t\t\tarrow.width = 8;\r\n\t\t\tarrow.height = 10;\r\n\t\t\tarrow.mapLine = this;\r\n\t\t\tarrow.position = 0.5;\r\n\r\n\t\t\tlet triangle = arrow.createChild(Triangle);\r\n\t\t\ttriangle.shouldClone = false;\r\n\t\t\ttriangle.fillOpacity = 1;\r\n\t\t\ttriangle.width = percent(100);\r\n\t\t\ttriangle.height = percent(100);\r\n\t\t\ttriangle.rotation = 90;\r\n\t\t\ttriangle.horizontalCenter = \"middle\";\r\n\t\t\ttriangle.verticalCenter = \"middle\";\r\n\t\t\tthis._arrow = arrow;\r\n\t\t}\r\n\t\treturn this._arrow;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies line properties and other attributes, like arrow, from another\r\n\t * instance of [[MapLine]].\r\n\t *\r\n\t * @param {MapLineObject}  source  Source map line\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.line.copyFrom(source.line);\r\n\t\tthis.lineObjects.copyFrom(source.lineObjects);\r\n\t\tif (source._arrow) {\r\n\t\t\tthis.arrow = <MapLineObject>source.arrow.clone();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.north + (dataItem.south - dataItem.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.east + (dataItem.west - dataItem.east) / 2;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLine\"] = MapLine;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLine.ts","/**\r\n * A collection of Map-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\n\r\n/**\r\n * Converts a multi-part polygon in X/Y coordinates to a geo-multipolygon in\r\n * geo-points (lat/long).\r\n * \r\n * @param  {number[][][][]}  multiPolygon  Source multi-polygon\r\n * @return {IGeoPoint[]}                   Geo-multipolygon\r\n */\r\n\r\nexport function multiPolygonToGeo(multiPolygon: number[][][][]): IGeoPoint[][][] {\r\n\tlet multiGeoArea: IGeoPoint[][][] = [];\r\n\r\n\tfor (let i: number = 0; i < multiPolygon.length; i++) {\r\n\r\n\t\tlet surface: number[][] = multiPolygon[i][0];\r\n\t\tlet hole: number[][] = multiPolygon[i][1];\r\n\r\n\t\t//let holePoints: IGeoPoint[] = [];\r\n\r\n\t\tmultiGeoArea[i] = [];\r\n\r\n\t\tif (surface) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(surface));\r\n\t\t}\r\n\r\n\t\tif (hole) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(hole));\r\n\t\t}\r\n\t}\r\n\treturn multiGeoArea;\r\n}\r\n\r\n/**\r\n * Converts a multiline in X/Y coordinates to a geo-multiline in geo-points\r\n * (lat/long).\r\n * \r\n * @param  {number[][][]}  multiLine  Source multiline\r\n * @return {IGeoPoint[]}              Geo-multiline\r\n */\r\nexport function multiLineToGeo(multiLine: number[][][]): IGeoPoint[][] {\r\n\tlet multiGeoLine: IGeoPoint[][] = [];\r\n\r\n\tfor (let i = 0; i < multiLine.length; i++) {\r\n\t\tmultiGeoLine.push(multiPointToGeo(multiLine[i]));\r\n\t}\r\n\treturn multiGeoLine;\r\n}\r\n\r\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n * \r\n * @param  {number[][]}   points  Source points\r\n * @return {IGeoPoint[]}          Geo-points\r\n */\r\nexport function multiPointToGeo(points: number[][]): IGeoPoint[] {\r\n\tlet geoPoints: IGeoPoint[] = [];\r\n\tfor (let i = 0; i < points.length; i++) {\r\n\t\tgeoPoints.push(pointToGeo(points[i]));\r\n\t}\r\n\treturn geoPoints;\r\n}\r\n\r\n/**\r\n * Converts X/Y point into a lat/long geo-point.\r\n * \r\n * @param  {number[]}   point  Source point\r\n * @return {IGeoPoint}         Geo-point\r\n */\r\nexport function pointToGeo(point: number[]): IGeoPoint {\r\n\treturn { longitude: point[0], latitude: point[1] }\r\n}\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapUtils.ts","/**\r\n *\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapImageSeriesDataItem, MapImageSeries } from \"./MapImageSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapImage]].\r\n */\r\nexport interface IMapImageProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Latitude of the image location.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlatitude?: number;\r\n\r\n\t/**\r\n\t * Longitude of the mage location.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlongitude?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapImage]].\r\n */\r\nexport interface IMapImageEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImage]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageAdapters extends IMapObjectAdapters, IMapImageProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to place an image on the map.\r\n *\r\n * @see {@link IMapImageEvents} for a list of available events\r\n * @see {@link IMapImageAdapters} for a list of available Adapters\r\n */\r\nexport class MapImage extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapImageProperties}\r\n\t */\r\n\tpublic _properties!: IMapImageProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapImageAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapImageAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapImageEvents}\r\n\t */\r\n\tpublic _events!: IMapImageEvents;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @type {MapImageSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapImageSeries}\r\n\t */\r\n\tpublic series: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapImage\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude image is placed at.\r\n\t *\r\n\t * @param {number}  value  Latitude\r\n\t */\r\n\tpublic set latitude(value: number) {\r\n\t\tthis.setPropertyValue(\"latitude\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\treturn this.getPropertyValue(\"latitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude image is placed on.\r\n\t *\r\n\t * @param {number}  value  Longitude\r\n\t */\r\n\tpublic set longitude(value: number) {\r\n\t\tthis.setPropertyValue(\"longitude\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\treturn this.getPropertyValue(\"longitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions the image to it's current position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition(): void {\r\n\t\tif ($type.isNumber(this.latitude) && $type.isNumber(this.longitude)) {\r\n\t\t\tthis.moveTo(this.series.chart.projection.convert({ latitude: this.latitude, longitude: this.longitude }));\r\n\t\t}\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImage\"] = MapImage;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImage.ts","/**\r\n * Map polygon module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapPolygonSeriesDataItem, MapPolygonSeries } from \"./MapPolygonSeries\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Polygon } from \"../../core/elements/Polygon\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================f================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygon]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonAdapters extends IMapObjectAdapters, IMapPolygonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a polygon on the map.\r\n *\r\n * @see {@link IMapPolygonEvents} for a list of available events\r\n * @see {@link IMapPolygonAdapters} for a list of available Adapters\r\n */\r\nexport class MapPolygon extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapPolygonProperties}\r\n\t */\r\n\tpublic _properties!: IMapPolygonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapPolygonAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapPolygonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapPolygonEvents}\r\n\t */\r\n\tpublic _events!: IMapPolygonEvents;\r\n\r\n\t/**\r\n\t * A visual polygon element.\r\n\t *\r\n\t * @type {Polygon}\r\n\t */\r\n\tpublic polygon: Polygon;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @type {MapPolygonSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapPolygonSeries}\r\n\t */\r\n\tpublic series: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapPolygon\";\r\n\r\n\t\tthis.polygon = this.createChild(Polygon);\r\n\t\tthis.polygon.shouldClone = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"secondaryButton\");\r\n\t\tthis.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\t/*this.events.on(\"focus\", (event) => {\r\n\t\t\t//this.toFront();\r\n\t\t\t//this.isFocused = true;\r\n\t\t});*/\r\n\r\n\t\tthis.tooltipPosition = \"pointer\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t *\r\n\t * @param {IGeoPoint[][][]}  multiGeoPolygon  Polygon coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoPolygon\", multiGeoPolygon, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Polygon coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this.getPropertyValue(\"multiGeoPolygon\");\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the polygon, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series) {\r\n\t\t\tthis.polygon.points = this.series.chart.projection.projectGeoArea(this.multiGeoPolygon);\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center latitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Center latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.north + (dataItem.south - dataItem.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center longitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Center longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.east + (dataItem.west - dataItem.east) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Not 100% sure about this, as if we add something to MapPolygon this\r\n\t * won't be true, but otherwise we will get all 0 and the tooltip won't\r\n\t * be positioned properly\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Element's width in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get pixelWidth(): number {\r\n\t\treturn this.polygon.pixelWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's height in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get pixelHeight(): number {\r\n\t\treturn this.polygon.pixelHeight;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygon\"] = MapPolygon;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygon.ts","/**\r\n * Map line series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapLineDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapLineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapLineSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t *\r\n\t * @type {MapLine}\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line.\r\n\t *\r\n\t * @type {number[][]}\r\n\t */\r\n\tprotected _line: number[][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line.\r\n\t *\r\n\t * @type {number[][][]}\r\n\t */\r\n\tprotected _multiLine: number[][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line.\r\n\t *\r\n\t * @type {IGeoPoint[]}\r\n\t */\r\n\tprotected _geoLine: IGeoPoint[];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-segment line.\r\n\t *\r\n\t * @type {IGeoPoint[][]}\r\n\t */\r\n\tprotected _multiGeoLine: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {MapLineSeries}\r\n\t */\r\n\tpublic _component!: MapLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return {MapLine} Element\r\n\t */\r\n\tpublic get mapLine(): this[\"_mapLine\"] {\r\n\t\tif (!this._mapLine) {\r\n\t\t\tlet mapLine = this.component.mapLines.create();\r\n\r\n\t\t\tthis._mapLine = mapLine;\r\n\t\t\tthis.addSprite(mapLine);\r\n\r\n\t\t\tthis._disposers.push(mapLine);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.mapLines.removeValue(mapLine);\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._mapLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [ 100, 150 ],\r\n\t *   [ 120, 200 ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][]}  line  Coordinates\r\n\t */\r\n\tpublic set line(line: number[][]) {\r\n\t\tthis._line = line;\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo([line]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get line(): number[][] {\r\n\t\treturn this._line;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ]\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 100 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][]}  multiLine  Coordinates\r\n\t */\r\n\tpublic set multiLine(multiLine: number[][][]) {\r\n\t\tthis._multiLine = multiLine;\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get multiLine(): number[][][] {\r\n\t\treturn this._multiLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   { longitude: 3.121, latitude: 0.58 },\r\n\t *   { longitude: -5.199, latitude: 21.223 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.4} GeoJSON LineString reference\r\n\t * @param {IGeoPoint[][]}  geoLine  Coordinates\r\n\t */\r\n\tpublic set geoLine(geoLine: IGeoPoint[]) {\r\n\t\tthis._geoLine = geoLine;\r\n\t\tthis.multiGeoLine = [geoLine];\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get geoLine(): IGeoPoint[] {\r\n\t\treturn this._geoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     { longitude: 3.121, latitude: 0.58 },\r\n\t *     { longitude: -5.199, latitude: 21.223 }\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     { longitude: -5.199, latitude: 21.223 },\r\n\t *     { longitude: -12.9, latitude: 25.85 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n\t * @param {IGeoPoint[][]}  multiGeoLine  Coordinates\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tthis._multiGeoLine = multiGeoLine;\r\n\t\tthis.updateLineExtremes(multiGeoLine);\r\n\t\tthis.mapLine.multiGeoLine = this._multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\treturn this._multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateLineExtremes(multiGeoLine: IGeoPoint[][]): void {\r\n\t\tfor (let i = 0; i < multiGeoLine.length; i++) {\r\n\t\t\tlet geoLine: IGeoPoint[] = multiGeoLine[i];\r\n\t\t\tthis.updateExtremes(geoLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds line data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tline?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds line data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoLine?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineSeriesAdapters extends IMapSeriesAdapters, IMapLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map line series.\r\n *\r\n * @see {@link IMapLineSeriesEvents} for a list of available Events\r\n * @see {@link IMapLineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapLineSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapLineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapLineSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @type {MapLine}\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A list of map lins in the series.\r\n\t *\r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapLines: ListTemplate<this[\"_mapLine\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiLine = \"multiLine\";\r\n\t\tthis.dataFields.line = \"line\";\r\n\r\n\t\tthis.dataFields.geoLine = \"geoLine\";\r\n\t\tthis.dataFields.multiGeoLine = \"multiGeoLine\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.mapLines.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0; i < features.length; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"LineString\" || type == \"MultiLineString\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"MultiLineString\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapLineDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiLineString: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiLineString) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiLineString = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t\t// important! this should go after super\r\n\t\t// if data is parsed in chunks, lines list is corrupted, fix it here\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapLines.moveValue(dataItem.mapLine);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of lines in the series.\r\n\t *\r\n\t * @return {ListTemplate} Lines\r\n\t */\r\n\tpublic get mapLines(): ListTemplate<this[\"_mapLine\"]> {\r\n\r\n\t\tif (!this._mapLines) {\r\n\t\t\tlet lineTemplate: MapLine = this.createLine();\r\n\t\t\tlet mapLines = new ListTemplate<MapLine>(lineTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapLines));\r\n\t\t\tthis._disposers.push(mapLines.template);\r\n\t\t\tmapLines.events.on(\"inserted\", this.handleObjectAdded, this);\r\n\t\t\tthis._mapLines = mapLines;\r\n\t\t}\r\n\r\n\t\treturn this._mapLines;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return {MapLine} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapLine();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapLines.iterator(), (mapLine) => {\r\n\t\t\tmapLine.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapLines.template.copyFrom(source.mapLines.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineSeries\"] = MapLineSeries;\r\nregistry.registeredClasses[\"MapLineSeriesDataItem\"] = MapLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineSeries.ts","/**\r\n * A module for the mini-map control.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SmallMap]].\r\n */\r\nexport interface ISmallMapProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SmallMap]].\r\n */\r\nexport interface ISmallMapEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SmallMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISmallMapAdapters extends IContainerAdapters, ISmallMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SmallMap extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {SmallMaPproperties}\r\n\t */\r\n\tpublic _properties!: ISmallMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ISmallMapAdapters}\r\n\t */\r\n\tpublic _adapter!: ISmallMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ISmallMapEvents}\r\n\t */\r\n\tpublic _events!: ISmallMapEvents;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A container that holds the visual elements for the mini-map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * The rectangle element which highlights current viewport.\r\n\t *\r\n\t * @type {Rectangle}\r\n\t */\r\n\tpublic rectangle: Rectangle;\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @type {List<MapSeries>}\r\n\t */\r\n\tprotected _series: List<MapSeries>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SmallMap\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.align = \"left\";\r\n\t\tthis.valign = \"bottom\";\r\n\t\tthis.percentHeight = 20;\r\n\t\tthis.percentWidth = 20;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set background defailts\r\n\t\tthis.background.fillOpacity = 0.9;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"hit\", this.moveToPosition, this);\r\n\t\tthis.events.on(\"maxsizechanged\", this.updateMapSize, this);\r\n\r\n\t\t// Create a container\r\n\t\tthis.seriesContainer = this.createChild(Container);\r\n\t\tthis.seriesContainer.shouldClone = false;\r\n\r\n\t\t// Create an outline rectangle\r\n\t\tlet rectangle: Rectangle = this.createChild(Rectangle);\r\n\t\trectangle.shouldClone = false;\r\n\t\trectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\trectangle.strokeWidth = 1;\r\n\t\trectangle.strokeOpacity = 0.5;\r\n\t\trectangle.fill = color(); //\"none\";\r\n\t\trectangle.verticalCenter = \"middle\";\r\n\t\trectangle.horizontalCenter = \"middle\";\r\n\t\trectangle.isMeasured = false;\r\n\t\tthis.rectangle = rectangle;\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<MapSeries>} Series\r\n\t */\r\n\tpublic get series(): List<MapSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<MapSeries>();\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<MapSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<MapSeries>[\"inserted\"]) {\r\n\t\tlet series: MapSeries = event.newValue;\r\n\t\tif (this.chart.series.contains(series)) {\r\n\t\t\tlet newSeries = series.clone();\r\n\t\t\tthis._series.removeValue(series);\r\n\t\t\tthis._series.push(newSeries);\r\n\t\t\tseries = newSeries;\r\n\r\n\t\t\tthis.chart.dataUsers.push(newSeries);\r\n\t\t}\r\n\t\tseries.chart = this.chart;\r\n\t\tseries.parent = this.seriesContainer;\r\n\t\tseries.interactionsEnabled = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<MapSeries>[\"removed\"]) {\r\n\t\t//let sourceSeries: MapSeries = event.oldValue;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Moves main map pan position after click on the small map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic moveToPosition(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tlet svgPoint: IPoint = event.svgPoint;\r\n\t\tlet rectPoint: IPoint = $utils.svgPointToSprite(svgPoint, this.rectangle);\r\n\r\n\t\tlet zoomLevel: number = this.chart.zoomLevel;\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\tlet x: number = (rectPoint.x + this.rectangle.pixelWidth / 2) / scale * zoomLevel;\r\n\t\tlet y: number = (rectPoint.y + this.rectangle.pixelHeight / 2) / scale * zoomLevel;\r\n\r\n\t\tlet geoPoint: IGeoPoint = this.chart.svgPointToGeo({ x: x, y: y });\r\n\r\n\t\tthis.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart/map that this control is meant for.\r\n\t *\r\n\t * @param {MapChart}  chart  Chart/map\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tif (this.chart != chart) {\r\n\t\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"mappositionchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"scaleratiochanged\", this.updateMapSize, this)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Chart/map\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the viewport recangle as per current map zoom/pan position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRectangle(): void {\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet zoomLevel: number = chart.zoomLevel;\r\n\t\tlet rectangle: Rectangle = this.rectangle;\r\n\r\n\t\trectangle.width = this.pixelWidth / zoomLevel;\r\n\t\trectangle.height = this.pixelHeight / zoomLevel;\r\n\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\r\n\t\tlet seriesContainer: Container = chart.seriesContainer;\r\n\r\n\t\tlet x: number = Math.ceil((zoomLevel * seriesContainer.pixelWidth / 2 - seriesContainer.pixelX) * scale / zoomLevel + rectangle.pixelWidth / 2);\r\n\t\tlet y: number = Math.ceil((zoomLevel * seriesContainer.pixelHeight / 2 - seriesContainer.pixelY) * scale / zoomLevel + rectangle.pixelHeight / 2);\r\n\r\n\t\trectangle.x = x;\r\n\t\trectangle.y = y;\r\n\t}\r\n\r\n\t/**\r\n\t * Update map size so that internal elements can redraw themselves after\r\n\t * the size of the small map changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateMapSize(): void {\r\n\t\tif (this.chart) {\r\n\t\t\tthis.seriesContainer.scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\t\tthis.afterDraw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update elements after drawing the small map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n\t\tthis.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\r\n\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/SmallMap.ts","/**\r\n * Map spline module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { MapSplineSeriesDataItem, MapSplineSeries } from \"./MapSplineSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapSpline]].\r\n */\r\nexport interface IMapSplineProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSpline]].\r\n */\r\nexport interface IMapSplineEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSpline]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineAdapters extends IMapLineAdapters, IMapSplineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a spline on the map.\r\n *\r\n * @see {@link IMapSplineEvents} for a list of available events\r\n * @see {@link IMapSplineAdapters} for a list of available Adapters\r\n */\r\nexport class MapSpline extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapSplineProperties}\r\n\t */\r\n\tpublic _properties!: IMapSplineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapSplineAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapSplineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapSplineEvents}\r\n\t */\r\n\tpublic _events!: IMapSplineEvents;\r\n\r\n\t/**\r\n\t * A visual element for the spline.\r\n\t *\r\n\t * @type {Polyspline}\r\n\t */\r\n\tpublic line: Polyspline;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @type {MapSplineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapSplineSeries}\r\n\t */\r\n\tpublic series: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSpline\";\r\n\r\n\t\t// Create a spline\r\n\t\tthis.line = new Polyspline();\r\n\t\tthis.line.tensionX = 0.8;\r\n\t\tthis.line.tensionY = 0.8;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ShortestDistance = true is not supported by MapSpline, only MapLine does support it\r\n\t * @default false\r\n\t * @param {boolean}  value\r\n\t * @todo: review description\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSpline\"] = MapSpline;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSpline.ts","/**\r\n * Map arched line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Polyarc } from \"../../core/elements/Polyarc\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { MapArcSeries } from \"./MapArcSeries\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapArc]].\r\n */\r\nexport interface IMapArcProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArc]].\r\n */\r\nexport interface IMapArcEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArc]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcAdapters extends IMapLineAdapters, IMapArcProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw an arched line on the map.\r\n *\r\n * @see {@link IMapArcEvents} for a list of available events\r\n * @see {@link IMapArcAdapters} for a list of available Adapters\r\n */\r\nexport class MapArc extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapArcProperties}\r\n\t */\r\n\tpublic _properties!: IMapArcProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapArcAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapArcAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapArcEvents}\r\n\t */\r\n\tpublic _events!: IMapArcEvents;\r\n\r\n\t/**\r\n\t * A visual element.\r\n\t *\r\n\t * @type {Polyarc}\r\n\t */\r\n\tpublic line: Polyarc;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapArcSeries}\r\n\t */\r\n\tpublic series: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArc\";\r\n\r\n\t\t// Create a line\r\n\t\tthis.line = new Polyarc();\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ShortestDistance = true is not supported by MapArc, only MapLine does support it\r\n\t * @default false\r\n\t * @param {boolean}  value\r\n\t * @todo: review description\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArc\"] = MapArc;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArc.ts","/**\r\n * Zoom control module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomControl]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomControlAdapters extends IContainerAdapters, IZoomControlProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ZoomControl extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IZoomControlProperties}\r\n\t */\r\n\tpublic _properties!: IZoomControlProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IZoomControlAdapters}\r\n\t */\r\n\tpublic _adapter!: IZoomControlAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IZoomControlEvents}\r\n\t */\r\n\tpublic _events!: IZoomControlEvents;\r\n\r\n\t/**\r\n\t * Zoom in button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic plusButton: Button;\r\n\r\n\t/**\r\n\t * Zoom out button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic minusButton: Button;\r\n\r\n\t/**\r\n\t * A zoom slider background element.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic slider: Container;\r\n\r\n\t/**\r\n\t * A zoom slider thumb element.\r\n\t * @type {Button}\r\n\t */\r\n\tpublic thumb: Button;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A type to use for the background element for zoom control.\r\n\t *\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ZoomControl\";\r\n\r\n\t\tthis.align = \"right\";\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tthis.layout = \"vertical\";\r\n\t\tthis.padding(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet plusButton: Button = this.createChild(Button);\r\n\t\tplusButton.shouldClone = false;\r\n\t\tplusButton.label.text = \"+\";\r\n\t\tplusButton.width = percent(100);\r\n\t\tplusButton.padding(5, 5, 5, 5);\r\n\t\tplusButton.fontFamily = \"Verdana\";\r\n\t\tthis.plusButton = plusButton;\r\n\r\n\t\tlet slider: Container = this.createChild(Container);\r\n\t\tslider.shouldClone = false;\r\n\t\tslider.width = percent(100);\r\n\t\tslider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tslider.background.fillOpacity = 0.05;\r\n\t\tslider.background.events.on(\"hit\", this.handleBackgroundClick, this);\r\n\t\tslider.events.on(\"sizechanged\", this.updateThumbSize, this);\r\n\t\tthis.slider = slider;\r\n\r\n\t\tlet thumb: Button = slider.createChild(Button);\r\n\t\tthumb.shouldClone = false;\r\n\t\tthumb.padding(0, 0, 0, 0);\r\n\t\tthumb.draggable = true;\r\n\t\tthumb.events.on(\"drag\", this.handleThumbDrag, this);\r\n\t\tthis.thumb = thumb;\r\n\r\n\t\tlet minusButton: Button = this.createChild(Button);\r\n\t\tminusButton.shouldClone = false;\r\n\t\tminusButton.label.text = \"-\";\r\n\t\tminusButton.padding(5, 5, 5, 5);\r\n\t\tminusButton.fontFamily = \"Verdana\";\r\n\t\tthis.minusButton = minusButton;\r\n\r\n\t\t// Set roles\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\r\n\t\t// Set reader text\r\n\t\tthis.thumb.readerTitle = this.language.translate(\"Use arrow keys to zoom in and out\");\r\n\t\tthis.minusButton.readerTitle = this.language.translate(\"Press ENTER to zoom in\");\r\n\t\tthis.plusButton.readerTitle = this.language.translate(\"Press ENTER to zoom out\");\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property == \"layout\") {\r\n\t\t\t\tthis.fixLayout();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\tprotected fixLayout() {\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tthis.width = 40;\r\n\t\t\tthis.height = undefined;\r\n\t\t\tthis.minusButton.width = percent(100);\r\n\t\t\tthis.thumb.width = percent(100);\r\n\t\t\tthis.plusButton.width = percent(100);\r\n\t\t\tthis.slider.width = percent(100);\r\n\t\t\tthis.minusButton.marginTop = 1;\r\n\t\t\tthis.plusButton.marginBottom = 2;\r\n\t\t\tthis.slider.height = 0;\r\n\t\t\tthis.minusButton.toFront();\r\n\t\t\tthis.plusButton.toBack();\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.maxX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t}\r\n\t\telse if (this.layout == \"horizontal\") {\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t\tthis.thumb.maxY = 0;\r\n\t\t\tthis.height = 40;\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.minusButton.height = percent(100);\r\n\t\t\tthis.minusButton.width = 30;\r\n\t\t\tthis.thumb.height = percent(100);\r\n\t\t\tthis.thumb.width = undefined;\r\n\t\t\tthis.plusButton.height = percent(100);\r\n\t\t\tthis.plusButton.width = 30;\r\n\t\t\tthis.slider.height = percent(100);\r\n\t\t\tthis.slider.width = 0;\r\n\t\t\tthis.minusButton.marginLeft = 2;\r\n\t\t\tthis.plusButton.marginRight = 2;\r\n\t\t\tthis.minusButton.toBack();\r\n\t\t\tthis.plusButton.toFront();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles zoom operation after clicking on the slider background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic handleBackgroundClick(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\tlet sprite: Sprite = event.target;\r\n\t\tlet y: number = event.spritePoint.y;\r\n\t\tlet chart: MapChart = this.chart;\r\n\r\n\t\tlet maxPower: number = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n\t\tlet minPower: number = Math.log(chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tlet power: number = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n\t\tlet zoomLevel: number = Math.pow(2, power);\r\n\t\tchart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n\t}\r\n\r\n\t/**\r\n\t * A main chart/map that this zoom control is for.\r\n\t *\r\n\t * @param {MapChart}  chart  Map/chart\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\tchart.events.on(\"maxsizechanged\", this.updateThumbSize, this),\r\n\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateThumb, this),\r\n\t\t\tthis.minusButton.events.on(\"hit\", () => { chart.zoomOut(chart.zoomGeoPoint) }, chart),\r\n\t\t\tgetInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (this.topParent.hasFocused) {\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\t\tif (this.minusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomOut()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (this.plusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomIn()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"plus\")) {\r\n\t\t\t\t\t\tchart.zoomIn();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"minus\")) {\r\n\t\t\t\t\t\tchart.zoomOut();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, chart),\r\n\t\t\tthis.plusButton.events.on(\"hit\", () => { chart.zoomIn(chart.zoomGeoPoint) }, chart)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Map/chart\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the slider's thumb size based on the available zoom space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumbSize(): void {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet slider: Container = this.slider;\r\n\t\t\tlet thumb: Button = this.thumb;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n\r\n\t\t\t\tthumb.height = slider.pixelHeight / this.stepCount;\r\n\t\t\t\tthumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n\r\n\t\t\t\tif (thumb.pixelHeight <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n\t\t\t\tthumb.width = slider.pixelWidth / this.stepCount;\r\n\t\t\t\tthumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n\r\n\t\t\t\tif (thumb.pixelWidth <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates thumb according to current zoom position from map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumb(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\r\n\t\tif (!thumb.isDown) {\r\n\t\t\tlet step: number = (Math.log(chart.zoomLevel) - Math.log(this.chart.minZoomLevel)) / Math.LN2;\r\n\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * step / this.stepCount - thumb.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.x = slider.pixelWidth * step / this.stepCount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the actual map when slider position changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbDrag(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\t\tlet step: number;\r\n\r\n\t\tlet minStep = Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tstep = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstep = this.stepCount * thumb.pixelX / slider.pixelWidth;\r\n\t\t}\r\n\t\tstep = minStep + step;\r\n\r\n\t\tlet zoomLevel: number = Math.pow(2, step);\r\n\t\tchart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the step countfor the slider grid according to map's min and max\r\n\t * zoom level settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Step count\r\n\t */\r\n\tpublic get stepCount(): number {\r\n\t\treturn Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for slider control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {this} Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/ZoomControl.ts","import * as m from \"../es2015/maps\";\nwindow.am4maps = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./maps.js\n// module id = 552\n// module chunks = 4","/**\n * Duplicated\n */\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Maps\n */\nexport { MapChartDataItem, IMapPolygonDataObject, MapLineType, IMapLineDataObject, IMapImageDataObject, IMapDataObject, IMapChartDataFields, IMapChartProperties, IMapChartEvents, IMapChartAdapters, MapChart } from \"./.internal/charts/types/MapChart\";\nexport { MapSeriesDataItem, GEOJSONGeometry, IMapSeriesDataFields, IMapSeriesProperties, IMapSeriesEvents, IMapSeriesAdapters, MapSeries } from \"./.internal/charts/map/MapSeries\";\nexport { IMapObjectProperties, IMapObjectEvents, IMapObjectAdapters, MapObject } from \"./.internal/charts/map/MapObject\";\nexport { IMapPolygonProperties, IMapPolygonEvents, IMapPolygonAdapters, MapPolygon } from \"./.internal/charts/map/MapPolygon\";\nexport { IMapImageProperties, IMapImageEvents, IMapImageAdapters, MapImage } from \"./.internal/charts/map/MapImage\";\nexport { IMapLineProperties, IMapLineEvents, IMapLineAdapters, MapLine } from \"./.internal/charts/map/MapLine\";\nexport { IMapSplineProperties, IMapSplineEvents, IMapSplineAdapters, MapSpline } from \"./.internal/charts/map/MapSpline\";\nexport { IMapArcProperties, IMapArcEvents, IMapArcAdapters, MapArc } from \"./.internal/charts/map/MapArc\";\nexport { MapPolygonSeriesDataItem, IMapPolygonSeriesDataFields, IMapPolygonSeriesProperties, IMapPolygonSeriesEvents, IMapPolygonSeriesAdapters, MapPolygonSeries } from \"./.internal/charts/map/MapPolygonSeries\";\nexport { MapLineSeriesDataItem, IMapLineSeriesDataFields, IMapLineSeriesProperties, IMapLineSeriesEvents, IMapLineSeriesAdapters, MapLineSeries } from \"./.internal/charts/map/MapLineSeries\";\nexport { MapSplineSeriesDataItem, IMapSplineSeriesDataFields, IMapSplineSeriesProperties, IMapSplineSeriesEvents, IMapSplineSeriesAdapters, MapSplineSeries } from \"./.internal/charts/map/MapSplineSeries\";\nexport { MapImageSeriesDataItem, IMapImageSeriesDataFields, IMapImageSeriesProperties, IMapImageSeriesEvents, IMapImageSeriesAdapters, MapImageSeries } from \"./.internal/charts/map/MapImageSeries\";\nexport { MapArcSeriesDataItem, IMapArcSeriesDataFields, IMapArcSeriesProperties, IMapArcSeriesEvents, IMapArcSeriesAdapters, MapArcSeries } from \"./.internal/charts/map/MapArcSeries\";\nexport { multiPolygonToGeo, multiLineToGeo, multiPointToGeo, pointToGeo } from \"./.internal/charts/map/MapUtils\";\nexport { IZoomControlProperties, IZoomControlEvents, IZoomControlAdapters, ZoomControl } from \"./.internal/charts/map/ZoomControl\";\nexport { ISmallMapProperties, ISmallMapEvents, ISmallMapAdapters, SmallMap } from \"./.internal/charts/map/SmallMap\";\n\n/**\n * Elements: projections\n */\nexport { Projection } from \"./.internal/charts/map/projections/Projection\";\nimport * as projections from \"./.internal/charts/map/projections\";\nexport { projections };\nimport * as geo from \"./.internal/charts/map/Geo\";\nexport { geo };\n\n\n\n// WEBPACK FOOTER //\n// ../../src/maps.ts","/**\r\n * Map module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, MultiDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { MapSeries } from \"../map/MapSeries\";\r\nimport { MapObject } from \"../map/MapObject\";\r\nimport { MapImage } from \"../map/MapImage\";\r\nimport { MapPolygon } from \"../map/MapPolygon\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { DataSource } from \"../../core/data/DataSource\";\r\nimport { Projection } from \"../map/projections/Projection\";\r\nimport { ZoomControl } from \"../map/ZoomControl\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { SmallMap } from \"../map/SmallMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $geo from \"../map/Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic _component!: MapChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines interface for a map polygon object.\r\n */\r\nexport interface IMapPolygonDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single polygon information in X/Y coordinates.\r\n\t */\r\n\tpolygon?: number[][][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in X/Y coordinates.\r\n\t */\r\n\tmultiPolygon?: number[][][][];\r\n\r\n\t/**\r\n\t * Single polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPolygon?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n}\r\n\r\n/**\r\n * Defines types of map line.\r\n *\r\n * @type {string}\r\n */\r\nexport type MapLineType = \"line\" | \"arc\" | \"spline\" | \"realTrajectory\";\r\n\r\n/**\r\n * Defines interface for the map line object.\r\n */\r\nexport interface IMapLineDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single line information in X/Y coordinates.\r\n\t */\r\n\tlineString?: number[][];\r\n\r\n\t/**\r\n\t * Multi-part line information in X/Y coordinates.\r\n\t */\r\n\tmultiLineString?: number[][][];\r\n\r\n\t/**\r\n\t * Single line information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoLineString?: IGeoPoint[];\r\n\r\n\t/**\r\n\t * Multi-part line information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoLineString?: IGeoPoint[][];\r\n\r\n}\r\n\r\n/**\r\n * Defines interface for a map image (market) object.\r\n */\r\nexport interface IMapImageDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Image position information in X/Y coordinates.\r\n\t */\r\n\tpoint?: number[];\r\n\r\n\t/**\r\n\t * Multi-image position information in X/Y coordinates.\r\n\t */\r\n\tmultiPoint?: number[][];\r\n\r\n\t/**\r\n\t * Image position information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPoint?: IGeoPoint;\r\n\r\n\t/**\r\n\t * Multi-image position information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPoint?: IGeoPoint[];\r\n\r\n}\r\n\r\n/**\r\n * Defines type suitable for all map objects.\r\n *\r\n * @type {IMapPolygonDataObject | IMapLineDataObject}\r\n */\r\nexport type IMapDataObject = IMapPolygonDataObject | IMapLineDataObject;\r\n\r\n/**\r\n * Defines data fields for [[MapChart]].\r\n */\r\nexport interface IMapChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapChart]].\r\n */\r\nexport interface IMapChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Projection to be used when drawing the map.\r\n\t *\r\n\t * @type {Projection}\r\n\t */\r\n\tprojection?: Projection;\r\n\r\n\t/**\r\n\t * Degrees to shift map center by.\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdeltaLongitude?: number;\r\n\r\n\tmaxPanOut?: number;\r\n\r\n\thomeGeoPoint?: IGeoPoint;\r\n\r\n\thomeZoomLevel?: number;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t */\r\n\tmouseWheelBehavior?: \"zoom\" | \"none\";\r\n}\r\n\r\n/**\r\n * Defines events for [[MapChart]].\r\n */\r\nexport interface IMapChartEvents extends ISerialChartEvents {\r\n\r\n\t/**\r\n\t * Invoked when map is zoomed in or out.\r\n\t */\r\n\tzoomlevelchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when map is panned. (moved)\r\n\t */\r\n\tmappositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when scale ratio is changed, e.g when the whole map area is\r\n\t * resized and the map needs to be resized to fit it, without changing\r\n\t * zoom level.\r\n\t */\r\n\tscaleratiochanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapChartAdapters extends ISerialChartAdapters, IMapChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a map.\r\n *\r\n * @see {@link IMapChartEvents} for a list of available Events\r\n * @see {@link IMapChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/} for documentation\r\n */\r\nexport class MapChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @type {IMapChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapChartProperties}\r\n\t */\r\n\tpublic _properties!: IMapChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapChartEvents}\r\n\t */\r\n\tpublic _events!: IMapChartEvents;\r\n\r\n\t/**\r\n\t * The East-most longitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * The West-most longitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * The South-most latitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * The North-most latitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * A ratio to be used when scaling the map shapes.\r\n\t *\r\n\t * @readonly\r\n\t * @type {number}\r\n\t */\r\n\tpublic scaleRatio: number = 1;\r\n\r\n\t/**\r\n\t * A screen point of the map's center.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic centerPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's left.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic westPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's right.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic eastPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's top.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic northPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's bottom.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic southPoint: IPoint;\r\n\r\n\t/**\r\n\t * Geo point of map center\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic centerGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Width of the actual map objects (px).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic seriesWidth: number;\r\n\r\n\t/**\r\n\t * Height of the actual map objects (px).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic seriesHeight: number;\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * @see {@link http://geojson.org/} GeoJSON official specification\r\n\t * @type {Object}\r\n\t */\r\n\tprotected _geodata: Object;\r\n\r\n\t/**\r\n\t * A reference to a [[ZoomControl]] instance.\r\n\t *\r\n\t * @type {ZoomControl}\r\n\t */\r\n\tprotected _zoomControl: ZoomControl;\r\n\r\n\t/**\r\n\t * A reference to a [[SmallMap]] control instance.\r\n\t *\r\n\t * @type {SmallMap}\r\n\t */\r\n\tprotected _smallMap: SmallMap;\r\n\r\n\t/**\r\n\t * [_zoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _zoomGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Default duration of zoom animations (ms).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic zoomDuration: number = 1000;\r\n\r\n\t/**\r\n\t * Default zooming animation easing function.\r\n\t *\r\n\t * @type {function}\r\n\t */\r\n\tpublic zoomEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Smallest available zoom level. The map will not allow to zoom out past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @defautl 1\r\n\t * @type {number}\r\n\t */\r\n\tpublic minZoomLevel: number = 1;\r\n\r\n\t/**\r\n\t * Biggest available zoom level. The map will not allow to zoom in past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 32\r\n\t * @type {number}\r\n\t */\r\n\tpublic maxZoomLevel: number = 32;\r\n\r\n\t/**\r\n\t * [_prevZoomLevel description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _prevZoomLevel: number;\r\n\r\n\t/**\r\n\t * [_prevZoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _prevZoomGeoPoint: IGeoPoint = { latitude: 0, longitude: 0 };\r\n\r\n\t/**\r\n\t * List of series of map objects. (lines, areas, etc.)\r\n\t *\r\n\t * @type {ListTemplate<MapSeries>}\r\n\t */\r\n\tpublic series: ListTemplate<MapSeries>;\r\n\r\n\t/**\r\n\t * A reference to currently playing animation, e.g. zooming.\r\n\t *\r\n\t * @type {Animation}\r\n\t */\r\n\tprotected _mapAnimation: Animation;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\tprotected _zoomGeoPointReal: IGeoPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChart\";\r\n\r\n\t\t// Set default projection\r\n\t\tthis.projection = new Projection();\r\n\r\n\t\tthis.deltaLongitude = 0;\r\n\t\tthis.maxPanOut = 0.7;\r\n\t\tthis.homeZoomLevel = 1;\r\n\r\n\t\t// Set padding\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\t// so that the map would render in a hidden div too\r\n\t\tthis.minWidth = 10;\r\n\t\tthis.minHeight = 10;\r\n\r\n\t\t// Create a container for map series\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.draggable = true;\r\n\t\tseriesContainer.inert = true;\r\n\t\tseriesContainer.resizable = true;\r\n\t\tseriesContainer.events.on(\"transformed\", this.handleMapTransform, this);\r\n\t\tseriesContainer.events.on(\"doublehit\", this.handleDoubleHit, this);\r\n\t\tseriesContainer.events.on(\"drag\", this.handleDrag, this);\r\n\t\tseriesContainer.zIndex = 0;\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"datavalidated\", this.updateExtremes, this);\r\n\r\n\t\t// Set up main chart container, e.g. set backgrounds and events to monitor\r\n\t\t// size changes, etc.\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tthis._disposers.push(seriesContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this._mapAnimation) {\r\n\t\t\t\tthis._mapAnimation.stop();\r\n\t\t\t}\r\n\t\t\tthis.updateScaleRatio();\r\n\t\t\tthis.zoomToGeoPoint(this._zoomGeoPointReal, this.zoomLevel, true, 0);\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.updateTooltipBounds();\r\n\t\t\t})\r\n\t\t}));\r\n\r\n\t\tlet chartContainerBg = chartContainer.background;\r\n\t\tchartContainerBg.fillOpacity = 0;\r\n\t\tchartContainerBg.events.on(\"down\", (e) => { this.seriesContainer.dragStart(e.target.interactions.downPointers.getIndex(0)); }, this);\r\n\t\tchartContainerBg.events.on(\"up\", (e) => { this.seriesContainer.dragStop() }, this);\r\n\t\tchartContainerBg.events.on(\"doublehit\", this.handleDoubleHit, this);\r\n\t\tchartContainerBg.focusable = true;\r\n\r\n\t\tchartContainer.events.on(\"down\", this.handleMapDown, this);\r\n\r\n\t\t// Add description to background\r\n\t\tthis.background.fillOpacity = 0;\r\n\t\tthis.background.readerTitle = this.language.translate(\"Use plus and minus keys on your keyboard to zoom in and out\");\r\n\r\n\t\t// Add keyboard events for panning\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\tif (this.topParent.hasFocused && (!this._zoomControl || !this._zoomControl.thumb.isFocused)) {\r\n\t\t\t\tswitch (keyboard.getEventKey(ev.event)) {\r\n\t\t\t\t\tcase \"up\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: 0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"down\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: -0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"left\":\r\n\t\t\t\t\t\tthis.pan({ x: 0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"right\":\r\n\t\t\t\t\t\tthis.pan({ x: -0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\tthis.mouseWheelBehavior = \"zoom\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Prevents map to be dragged out of the container area\r\n\t * @ignore\r\n\t */\r\n\tprotected handleDrag() {\r\n\t\t// not good doing it with adapters.\r\n\t\tlet ww = this.seriesWidth * this.zoomLevel * this.scaleRatio;\r\n\t\tlet hh = this.seriesHeight * this.zoomLevel * this.scaleRatio;\r\n\t\tlet x = this.seriesContainer.pixelX;\r\n\t\tlet y = this.seriesContainer.pixelY;\r\n\r\n\t\tlet maxPanOut = this.maxPanOut;\r\n\r\n\t\tlet minX = Math.min(this.maxWidth * (1 - maxPanOut) - ww / 2, -ww * (maxPanOut - 0.5));\r\n\t\tif (x < minX) {\r\n\t\t\tx = minX;\r\n\t\t}\r\n\r\n\t\tlet maxX = Math.max(this.maxWidth * maxPanOut + ww / 2, this.maxWidth + ww * (maxPanOut - 0.5));\r\n\t\tif (x > maxX) {\r\n\t\t\tx = maxX;\r\n\t\t}\r\n\r\n\r\n\t\tlet minY = Math.min(this.maxHeight * (1 - maxPanOut) - hh / 2, -hh * (maxPanOut - 0.5));\r\n\t\tif (y < minY) {\r\n\t\t\ty = minY;\r\n\t\t}\r\n\r\n\t\tlet maxY = Math.max(this.maxHeight * maxPanOut + hh / 2, this.maxHeight + hh * (maxPanOut - 0.5));\r\n\t\tif (y > maxY) {\r\n\t\t\ty = maxY;\r\n\t\t}\r\n\r\n\t\tthis.seriesContainer.moveTo({ x: x, y: y }, undefined, undefined, true);\r\n\r\n\t\tthis._zoomGeoPointReal = this.zoomGeoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Map\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles event when a pointer presses down on the map, e.g. user presses\r\n\t * down mouse or touches the map on a screen.\r\n\t *\r\n\t * Stops all animations currently going on.\r\n\t */\r\n\tprotected handleMapDown(): void {\r\n\t\tif (this._mapAnimation) {\r\n\t\t\tthis._mapAnimation.stop();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the event when user doubleclicks or dooubletaps the map: zooms\r\n\t * in on the reference point.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"doublehit\"]}  event  Original event\r\n\t */\r\n\tprotected handleDoubleHit(event: AMEvent<Sprite, ISpriteEvents>[\"doublehit\"]) {\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\t\tthis.zoomIn(geoPoint);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel event, e.g. user rotates mouse wheel while over the\r\n\t * map: zooms in or out depending on the direction of the wheel turn.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"wheel\"]}  event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\r\n\t\tif (event.shift.y < 0) {\r\n\t\t\tthis.zoomIn(geoPoint);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.zoomOut(geoPoint);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @param {\"zoom\" | \"none\"} mouse wheel behavior\r\n\t * @default zoomX\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoom\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.chartContainer.events.on(\"wheel\", this.handleWheel, this);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t\tthis.chartContainer.wheelable = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return { \"zoom\" | \"none\"}  mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoom\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Projection to use for the map.\r\n\t *\r\n\t * Available projections:\r\n\t * * Eckert6\r\n\t * * Mercator\r\n\t * * Miller\r\n\t * * Orthographic\r\n\t *\r\n\t * ```TypeScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"projection\": \"Mercator\"\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Projection}  projection  Projection\r\n\t */\r\n\tpublic set projection(projection: Projection) {\r\n\t\tprojection.deltaLongitude = this.deltaLongitude;\r\n\t\tthis.setPropertyValue(\"projection\", projection, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Projection} Projection\r\n\t */\r\n\tpublic get projection(): Projection {\r\n\t\treturn this.getPropertyValue(\"projection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the longitudes and latitudes of the most distant points from\r\n\t * the center in all four directions: West, East, North, and South.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateExtremes(): void {\r\n\r\n\t\tthis.west = null;\r\n\t\tthis.east = null;\r\n\t\tthis.north = null;\r\n\t\tthis.south = null;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif ((this.west > series.west) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = series.west;\r\n\t\t\t}\r\n\t\t\tif ((this.east < series.east) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = series.east;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < series.north) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = series.north;\r\n\t\t\t}\r\n\t\t\tif ((this.south > series.south) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = series.south;\r\n\t\t\t}\r\n\t\t});\r\n\t\tif($type.isNumber(this.east) && $type.isNumber(this.north)){\r\n\t\t\t// must reset\r\n\t\t\tthis.projection.centerPoint = { x: 0, y: 0 };\r\n\t\t\tthis.projection.scale = 1;\r\n\r\n\t\t\t// temporary setting deltaLongitude to 0 in order to measure w/h correctly\r\n\t\t\tlet deltaLongitude = this.projection.deltaLongitude;\r\n\t\t\tthis.projection.deltaLongitude = 0;\r\n\t\t\tlet westPoint: IPoint = this.projection.convert({ longitude: this.west, latitude: (this.south - this.north) / 2 });\r\n\t\t\tlet eastPoint: IPoint = this.projection.convert({ longitude: this.east, latitude: (this.south - this.north) / 2 });\r\n\r\n\t\t\tlet northPoint: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.north });\r\n\t\t\tlet southPoint: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.south });\r\n\t\t\tthis.projection.deltaLongitude = deltaLongitude;\r\n\r\n\t\t\tthis.projection.centerPoint = { x: westPoint.x + (eastPoint.x - westPoint.x) / 2, y: northPoint.y + (southPoint.y - northPoint.y) / 2 };\r\n\r\n\t\t\tlet scaleRatio: number;\r\n\r\n\t\t\tlet seriesWidth = eastPoint.x - westPoint.x;\r\n\t\t\tlet seriesHeight = southPoint.y - northPoint.y;\r\n\r\n\t\t\tlet vScale: number = this.chartContainer.innerWidth / seriesWidth;\r\n\t\t\tlet hScale: number = this.chartContainer.innerHeight / seriesHeight;\r\n\r\n\t\t\tif (vScale > hScale) {\r\n\t\t\t\tscaleRatio = hScale;\r\n\t\t\t} else {\r\n\t\t\t\tscaleRatio = vScale;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\t\tscaleRatio = 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.projection.scale = scaleRatio;\r\n\t\t\tthis.seriesWidth = seriesWidth * scaleRatio;\r\n\t\t\tthis.seriesHeight = seriesHeight * scaleRatio;\r\n\r\n\t\t\tthis.updateScaleRatio();\r\n\r\n\t\t\tlet seriesContainer: Container = this.seriesContainer;\r\n\t\t\tlet chartContainer: Container = this.chartContainer;\r\n\r\n\t\t\tseriesContainer.x = chartContainer.pixelWidth / 2;\r\n\t\t\tseriesContainer.y = chartContainer.pixelHeight / 2;\r\n\r\n\t\t\tthis.centerGeoPoint = this.svgPointToGeo({ x: this.measuredWidth / 2, y: this.measuredHeight / 2 });\r\n\r\n\t\t\tthis.goHome();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)calculates a ratio which should be used to scale the actual map so\r\n\t * that it fits perfectly into available space. Helps to avoid redrawing of all the map if container size changes\r\n\t * @ignore\r\n\t */\r\n\tprotected updateScaleRatio(): void {\r\n\t\tlet scaleRatio: number;\r\n\r\n\t\tlet vScale: number = this.chartContainer.innerWidth / this.seriesWidth;\r\n\t\tlet hScale: number = this.chartContainer.innerHeight / this.seriesHeight;\r\n\r\n\t\tif (vScale > hScale) {\r\n\t\t\tscaleRatio = hScale;\r\n\t\t} else {\r\n\t\t\tscaleRatio = vScale;\r\n\t\t}\r\n\r\n\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\tscaleRatio = 1;\r\n\t\t}\r\n\r\n\t\tif (scaleRatio != this.scaleRatio) {\r\n\t\t\tthis.scaleRatio = scaleRatio;\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.scale = this.scaleRatio;\r\n\t\t\t\tseries.updateTooltipBounds();\r\n\t\t\t});\r\n\r\n\t\t\tthis.dispatch(\"scaleratiochanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point within map container to geographical (lat/long)\r\n\t * coordinates.\r\n\t *\r\n\t * @param  {IPoint}     point  Source point\r\n\t * @return {IGeoPoint}         Geo-point\r\n\t */\r\n\tpublic svgPointToGeo(point: IPoint): IGeoPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = $utils.svgPointToSprite(point, series);\r\n\t\t\treturn this.seriesPointToGeo(seriesPoint);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within map's\r\n\t * container.\r\n\t *\r\n\t * @param  {IGeoPoint}  point  Source geo-point\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic geoPointToSVG(point: IGeoPoint): IPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = this.geoPointToSeries(point);\r\n\t\t\treturn $utils.spritePointToSvg(seriesPoint, series);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point (X/Y) within actual objects of the map to geographical\r\n\t * (lat/long) coordinates.\r\n\t *\r\n\t * @param  {IPoint}     point  Source point\r\n\t * @return {IGeoPoint}         Geo-point\r\n\t */\r\n\tpublic seriesPointToGeo(point: IPoint): IGeoPoint {\r\n\t\treturn this.projection.invert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within\r\n\t * actual elements/objects of the maps.\r\n\t *\r\n\t * @param  {IGeoPoint}  point  Source geo-point\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic geoPointToSeries(point: IGeoPoint): IPoint {\r\n\t\treturn this.projection.convert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * The Map supports the following GeoJSON objects: `Point`, `LineString`,\r\n\t * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n\t *\r\n\t * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n\t * @param {Object} geoJSON GeoJSON data\r\n\t */\r\n\tpublic set geodata(geodata: Object) {\r\n\t\tif (geodata != this._geodata) {\r\n\t\t\tthis._geodata = geodata;\r\n\t\t\tthis.invalidateData();\r\n\r\n\t\t\t$iter.each(this._dataUsers.iterator(), (x) => {\r\n\t\t\t\tx.invalidateData();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Object} GeoJSON data\r\n\t */\r\n\tpublic get geodata(): Object {\r\n\t\treturn this._geodata;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to particular zoom level and centers on a latitude/longitude\r\n\t * coordinate.\r\n\t *\r\n\t * @param  {IGeoPoint}  point      Center coordinate\r\n\t * @param  {number}     zoomLevel  Zoom level\r\n\t * @param  {boolean}    center     Center on the given coordinate?\r\n\t * @param  {number}     duration   Duration for zoom animation (ms)\r\n\t * @return {Animation}             Zoom animation\r\n\t */\r\n\tpublic zoomToGeoPoint(point: IGeoPoint, zoomLevel: number, center?: boolean, duration?: number): Animation {\r\n\r\n\t\t//let svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\t//let geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\r\n\r\n\t\tif (!point) {\r\n\t\t\tpoint = this.zoomGeoPoint;\r\n\t\t}\r\n\r\n\t\tthis._zoomGeoPointReal = point;\r\n\r\n\t\tzoomLevel = $math.fitToRange(zoomLevel, this.minZoomLevel, this.maxZoomLevel);\r\n\r\n\t\tlet seriesPoint: IPoint = this.projection.convert(point);\r\n\r\n\t\tlet svgPoint: IPoint = this.geoPointToSVG(point);\r\n\t\tif (center) {\r\n\t\t\tsvgPoint = {\r\n\t\t\t\tx: this.maxWidth / 2,\r\n\t\t\t\ty: this.maxHeight / 2\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(duration)) {\r\n\t\t\tduration = this.zoomDuration;\r\n\t\t}\r\n\r\n\t\tthis._mapAnimation = this.seriesContainer.animate(\r\n\t\t\t[{\r\n\t\t\t\tproperty: \"scale\",\r\n\t\t\t\tto: zoomLevel\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"x\",\r\n\t\t\t\tto: svgPoint.x - seriesPoint.x * zoomLevel * this.scaleRatio - this.pixelPaddingLeft\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"y\",\r\n\t\t\t\tto: svgPoint.y - seriesPoint.y * zoomLevel * this.scaleRatio - this.pixelPaddingTop\r\n\t\t\t}], duration, this.zoomEasing);\r\n\r\n\t\tthis._disposers.push(this._mapAnimation.events.on(\"animationended\", () => {\r\n\t\t\tthis._zoomGeoPointReal = this.zoomGeoPoint;\r\n\t\t}))\r\n\r\n\t\tthis.seriesContainer.validatePosition();\r\n\r\n\t\treturn this._mapAnimation;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular map object.\r\n\t *\r\n\t * @param  {MapObject}  mapObject  Target map object\r\n\t * @param  {number}     zoomLevel  Zoom level\r\n\t * @param  {boolean}    center     Center on the given coordinate?\r\n\t * @param  {number}     duration   Duration for zoom animation (ms)\r\n\t * @return {Animation}             Zoom animation\r\n\t */\r\n\tpublic zoomToMapObject(mapObject: MapObject, zoomLevel?: number, center?: boolean, duration?: number): Animation {\r\n\r\n\t\tif (center == undefined) {\r\n\t\t\tcenter = true;\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapImage) {\r\n\t\t\tif ($type.isNaN(zoomLevel)) {\r\n\t\t\t\tzoomLevel = 5;\r\n\t\t\t}\r\n\t\t\treturn this.zoomToGeoPoint({ latitude: mapObject.latitude, longitude: mapObject.longitude }, zoomLevel, center, duration);\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapPolygon) {\r\n\t\t\tlet dataItem = mapObject.dataItem;\r\n\t\t\tif ($type.isNumber(zoomLevel)) {\r\n\t\t\t\treturn this.zoomToGeoPoint({ latitude: mapObject.latitude, longitude: mapObject.longitude }, zoomLevel, center, duration);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn this.zoomToRectangle(dataItem.north, dataItem.east, dataItem.south, dataItem.west, null, center, duration);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular viewport.\r\n\t *\r\n\t * The `north`, `east`, `south`, and `west` define boundaries of the\r\n\t * imaginary viewort we want to zoom the map to.\r\n\t *\r\n\t * `level` is not actual zoom level. The map will determine the zoom level\r\n\t * required to accommodated such zoom, and will adjust it by `level` if set.\r\n\t *\r\n\t * @param  {number}     north     Latitude of the North-most boundary\r\n\t * @param  {number}     east      Longitude of the East-most boundary\r\n\t * @param  {number}     south     Latitude of the South-most boundary\r\n\t * @param  {number}     west      Longitude of the West-most boundary\r\n\t * @param  {number}     level     Adjust zoom level\r\n\t * @param  {boolean}    center    Center on the given coordinate?\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomToRectangle(north: number, east: number, south: number, west: number, level?: number, center?: boolean, duration?: number): Animation {\r\n\t\tif ($type.isNaN(level)) {\r\n\t\t\tlevel = 1;\r\n\t\t}\r\n\r\n\t\tlet zoomLevel = level * Math.min((this.south - this.north) / (south - north), (this.west - this.east) / (west - east));\r\n\r\n\t\treturn this.zoomToGeoPoint({ latitude: north + (south - north) / 2, longitude: west + (east - west) / 2 }, zoomLevel, center, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms in the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param  {IGeoPoint}  geoPoint  Optional center point\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomIn(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel * 2, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param  {IGeoPoint}  geoPoint  Optional center point\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomOut(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel / 2, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Pans the maps using relative coordinates. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * {\r\n\t *   x: 0.1,\r\n\t *   y: -0.1\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will move the map by 10% to the right, and by 10% upwards.\r\n\t *\r\n\t * @param {IPoint}  shift     Vertical and horizontal shift\r\n\t * @param {number}  duration  Pan animation duration (ms)\r\n\t */\r\n\tpublic pan(shift: IPoint, duration?: number): void {\r\n\t\tlet point = this.geoPointToSVG(this.zoomGeoPoint);\r\n\t\tpoint.x += this.pixelWidth * shift.x;\r\n\t\tpoint.y += this.pixelHeight * shift.y;\r\n\t\tthis.zoomToGeoPoint(this.svgPointToGeo(point), this.zoomLevel, true, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Current lat/long coordinates for the center of the viewport. (default\r\n\t * zoom reference point)\r\n\t *\r\n\t * @readonly\r\n\t * @return {IGeoPoint} Coordinates\r\n\t */\r\n\tpublic get zoomGeoPoint(): IGeoPoint {\r\n\t\treturn this.svgPointToGeo({\r\n\t\t\tx: this.pixelWidth / 2,\r\n\t\t\ty: this.pixelHeight / 2\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Current zoom level.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Zoom level\r\n\t */\r\n\tpublic get zoomLevel(): number {\r\n\t\treturn this.seriesContainer.scale;\r\n\t}\r\n\r\n\tpublic set zoomLevel(value: number) {\r\n\t\tthis.seriesContainer.scale = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches events after some map transformation, like pan or zoom.\r\n\t */\r\n\tprotected handleMapTransform(): void {\r\n\t\tif (this.zoomLevel != this._prevZoomLevel) {\r\n\t\t\tthis.dispatch(\"zoomlevelchanged\");\r\n\t\t\tthis._prevZoomLevel = this.zoomLevel;\r\n\t\t}\r\n\r\n\t\tif (this.zoomGeoPoint && (this._prevZoomGeoPoint.latitude != this.zoomGeoPoint.latitude || this._prevZoomGeoPoint.longitude != this.zoomGeoPoint.longitude)) {\r\n\t\t\tthis.dispatch(\"mappositionchanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[SmallMap]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a small map\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"smallMap\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {SmallMap}  smallMap  Small map\r\n\t */\r\n\tpublic set smallMap(smallMap: SmallMap) {\r\n\t\tif (this._smallMap) {\r\n\t\t\tthis.removeDispose(this._smallMap);\r\n\t\t}\r\n\t\tthis._smallMap = smallMap;\r\n\t\tthis._smallMap.chart = this;\r\n\t\tsmallMap.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {SmallMap} Small map\r\n\t */\r\n\tpublic get smallMap(): SmallMap {\r\n\t\tif (!this._smallMap) {\r\n\t\t\tlet smallMap: SmallMap = new SmallMap();\r\n\t\t\tthis.smallMap = smallMap;\r\n\t\t}\r\n\t\treturn this._smallMap;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[ZoomControl]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a zoom control\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"zoomControl\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {ZoomControl}  zoomControl  Zoom control\r\n\t */\r\n\tpublic set zoomControl(zoomControl: ZoomControl) {\r\n\t\tif (this._zoomControl) {\r\n\t\t\tthis.removeDispose(this._zoomControl);\r\n\t\t}\r\n\t\tthis._zoomControl = zoomControl;\r\n\t\tzoomControl.chart = this;\r\n\t\tzoomControl.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ZoomControl} Zoom control\r\n\t */\r\n\tpublic get zoomControl(): ZoomControl {\r\n\t\treturn this._zoomControl;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a map series of appropriate type.\r\n\t *\r\n\t * @return {MapSeries} Map series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new MapSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Degrees to shift map center by.\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t *\r\n\t * @param {number}  value  Map center shift\r\n\t */\r\n\tpublic set deltaLongitude(value: number) {\r\n\t\tif (this.setPropertyValue(\"deltaLongitude\", $geo.wrapAngleTo180(value))) {\r\n\t\t\tthis.invalidateProjection();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Map center shift\r\n\t */\r\n\tpublic get deltaLongitude(): number {\r\n\t\treturn this.getPropertyValue(\"deltaLongitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Max pan out\r\n\t *\r\n\t * @param {number} Max pan out\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Max pan out\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * The geographical point to center map on when it is first loaded.\r\n\t *\r\n\t * The map will also be centered to this point when you call `goHome()`\r\n\t * method.\r\n\t *\r\n\t * @param {IGeoPoint}  value  Home geo point\r\n\t */\r\n\tpublic set homeGeoPoint(value: IGeoPoint) {\r\n\t\tthis.setPropertyValue(\"homeGeoPoint\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint} Home geo point\r\n\t */\r\n\tpublic get homeGeoPoint(): IGeoPoint {\r\n\t\treturn this.getPropertyValue(\"homeGeoPoint\");\r\n\t}\r\n\r\n\t/**\r\n\t * The zoom level to put the map in when it is first loaded.\r\n\t *\r\n\t * The map will also be set to this zoom level when you call `goHome()`\r\n\t * method.\r\n\t *\r\n\t * @param {number}  value  Home zoom level\r\n\t */\r\n\tpublic set homeZoomLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"homeZoomLevel\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Home zoom level\r\n\t */\r\n\tpublic get homeZoomLevel(): number {\r\n\t\treturn this.getPropertyValue(\"homeZoomLevel\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates projection, causing all series to be redrawn.\r\n\t */\r\n\tprotected invalidateProjection() {\r\n\t\t//\t\tthis.projection.deltaLatitude = this.deltaLatitude;\r\n\t\tthis.projection.deltaLongitude = this.deltaLongitude;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @param {DataSource} value Data source\r\n\t */\r\n\tpublic set geodataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"geodata\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"geodata\"] = value;\r\n\t\tthis._dataSources[\"geodata\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"geodata\")\r\n\t\t}, this);\r\n\t\tthis.setDataSourceEvents(value, \"geodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[DataSource]] specifically for loading Component's data.\r\n\t *\r\n\t * @return {DataSource} Data source\r\n\t */\r\n\tpublic get geodataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.getDataSource(\"geodata\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"geodata\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\t// Instantiate projection\r\n\t\tif ($type.hasValue(config[\"projection\"]) && $type.isString(config[\"projection\"])) {\r\n\t\t\tconfig[\"projection\"] = this.createClassInstance(config[\"projection\"]);\r\n\t\t}\r\n\r\n\t\t// Set up small map\r\n\t\tif ($type.hasValue(config.smallMap) && !$type.hasValue(config.smallMap.type)) {\r\n\t\t\tconfig.smallMap.type = \"SmallMap\";\r\n\t\t}\r\n\r\n\t\t// Set up zoom control\r\n\t\tif ($type.hasValue(config.zoomControl) && !$type.hasValue(config.zoomControl.type)) {\r\n\t\t\tconfig.zoomControl.type = \"ZoomControl\";\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n * This function is used to sort element's JSON config properties, so that\r\n * some properties that absolutely need to be processed last, can be put at\r\n * the end.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {string}  a  Element 1\r\n * @param  {string}  b  Element 2\r\n * @return {number}     Sorting number\r\n */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"smallMap\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"smallMap\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `projection` to \"as is\" fields.\r\n\t *\r\n\t * @param  {string}   field  Field name\r\n\t * @return {boolean}         Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"projection\" || super.asIs(field);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Resets the map to its original position and zoom level.\r\n\t */\r\n\tpublic goHome(duration?: number) {\r\n\t\tlet homeGeoPoint = this.homeGeoPoint;\r\n\t\tif (!homeGeoPoint) {\r\n\t\t\thomeGeoPoint = this.centerGeoPoint;\r\n\t\t}\r\n\t\tif (homeGeoPoint) {\r\n\t\t\tthis.zoomToGeoPoint(homeGeoPoint, this.homeZoomLevel, true, duration);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapChart\"] = MapChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/MapChart.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * [number description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tposition?: number;\r\n\r\n\t/**\r\n\t * [boolean description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {boolean}\r\n\t */\r\n\tadjustRotation?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineObjectAdapters extends IContainerAdapters, IMapLineObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a line on the map.\r\n *\r\n * @see {@link IMapLineObjectEvents} for a list of available events\r\n * @see {@link IMapLineObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapLineObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapLineObjectProperties}\r\n\t */\r\n\tpublic _properties!: IMapLineObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapLineObjectAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapLineObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapLineObjectEvents}\r\n\t */\r\n\tpublic _events!: IMapLineObjectEvents;\r\n\r\n\t/**\r\n\t * [mapLine description]\r\n\t *\r\n\t * @todo Description\r\n\t * @todo Review if necessary (same as parent)\r\n\t * @type {MapLine}\r\n\t */\r\n\tpublic mapLine: MapLine;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.adjustRotation = true;\r\n\t\tthis.className = \"MapLineObject\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates element's position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition() {\r\n\t\tif (this.mapLine) {\r\n\t\t\tlet point: IOrientationPoint = this.mapLine.positionToPoint(this.position);\r\n\t\t\tthis.x = point.x;\r\n\t\t\tthis.y = point.y;\r\n\r\n\t\t\tif (this.adjustRotation) {\r\n\t\t\t\tthis.rotation = point.angle;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataItem = this.mapLine.dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet series = this.mapLine.dataItem.component;\r\n\t\t\t\tthis.scale = 1 / series.scale;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * [position description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\tpublic set position(value: number) {\r\n\t\tthis.setPropertyValue(\"position\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get position(): number {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * [adjustRotation description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {boolean} value [description]\r\n\t */\r\n\tpublic set adjustRotation(value: boolean) {\r\n\t\tthis.setPropertyValue(\"adjustRotation\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} [description]\r\n\t */\r\n\tpublic get adjustRotation(): boolean {\r\n\t\treturn this.getPropertyValue(\"adjustRotation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineObject\"] = MapLineObject;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineObject.ts","/**\r\n * Map polygon series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapPolygon } from \"./MapPolygon\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapPolygonSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapPolygonSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t *\r\n\t * @type {MapPolygon}\r\n\t */\r\n\tprotected _mapPolygon: MapPolygon;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon.\r\n\t *\r\n\t * @type {number[][][]}\r\n\t */\r\n\tprotected _polygon: number[][][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon.\r\n\t *\r\n\t * @type {number[][][][]}\r\n\t */\r\n\tprotected _multiPolygon: number[][][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon.\r\n\t *\r\n\t * @type {IGeoPoint[][]}\r\n\t */\r\n\tprotected _geoPolygon: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon.\r\n\t *\r\n\t * @type {IGeoPoint[][][]}\r\n\t */\r\n\tprotected _multiGeoPolygon: IGeoPoint[][][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {MapPolygonSeries}\r\n\t */\r\n\tpublic _component!: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapPolygonSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return {MapPolygon} Element\r\n\t */\r\n\tpublic get mapPolygon(): MapPolygon {\r\n\t\tif (!this._mapPolygon) {\r\n\t\t\tlet mapPolygon = this.component.mapPolygons.create();\r\n\t\t\tthis._mapPolygon = mapPolygon;\r\n\t\t\tthis.addSprite(mapPolygon);\r\n\r\n\t\t\tthis._disposers.push(mapPolygon);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.mapPolygons.removeValue(mapPolygon);\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._mapPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 200 ],\r\n\t *     [ 170, 240 ],\r\n\t *     [ 100, 150 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][][]}  polygon  Coordinates\r\n\t */\r\n\tpublic set polygon(polygon: number[][][]) {\r\n\t\tthis._polygon = polygon;\r\n\t\tthis.multiGeoPolygon = $mapUtils.multiPolygonToGeo([polygon]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get polygon(): number[][][] {\r\n\t\treturn this._polygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Part 1\r\n\t *   [\r\n\t *     [\r\n\t *       [ 100, 150 ],\r\n\t *       [ 120, 200 ],\r\n\t *       [ 150, 220 ],\r\n\t *       [ 170, 240 ],\r\n\t *       [ 100, 150 ]\r\n\t *     ]\r\n\t *   ],\r\n\t *\r\n\t *   // Part 2\r\n\t *   [\r\n\t *     [\r\n\t *       [ 300, 350 ],\r\n\t *       [ 320, 400 ],\r\n\t *       [ 350, 420 ],\r\n\t *       [ 370, 440 ],\r\n\t *       [ 300, 350 ]\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][][]}  multiPolygon  Coordinates\r\n\t */\r\n\tpublic set multiPolygon(multiPolygon: number[][][][]) {\r\n\t\tthis._multiPolygon = multiPolygon;\r\n\t\tthis.multiGeoPolygon = $mapUtils.multiPolygonToGeo(multiPolygon);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get multiPolygon(): number[][][][] {\r\n\t\treturn this._multiPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     { latitude: -10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: 10.0 },\r\n\t *     { latitude: -10.0, longitude: -10.0 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.6} GeoJSON Polygon reference\r\n\t * @param {IGeoPoint[][]}  geoPolygon  Coordinates\r\n\t */\r\n\tpublic set geoPolygon(geoPolygon: IGeoPoint[][]) {\r\n\t\tthis._geoPolygon = geoPolygon;\r\n\t\tthis.multiGeoPolygon = [geoPolygon];\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get geoPolygon(): IGeoPoint[][] {\r\n\t\treturn this._geoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: 180.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ],\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: -170.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.7} GeoJSON MultiPolygon reference\r\n\t * @param {IGeoPoint[][][]}  multiGeoPolygon  Coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis._multiGeoPolygon = multiGeoPolygon;\r\n\t\tthis.updateAreaExtremes(multiGeoPolygon);\r\n\t\tthis.mapPolygon.multiGeoPolygon = this._multiGeoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this._multiGeoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateAreaExtremes(multiGeoPolygon: IGeoPoint[][][]): void {\r\n\t\tfor (let i = 0; i < multiGeoPolygon.length; i++) {\r\n\t\t\tlet geoPolygon: IGeoPoint[][] = multiGeoPolygon[i];\r\n\t\t\tlet surface: IGeoPoint[] = geoPolygon[0];\r\n\t\t\tthis.updateExtremes(surface);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds polygon pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-polygon pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds polygon data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds poly-polygon data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoPolygon?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygonSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonSeriesAdapters extends IMapSeriesAdapters, IMapPolygonSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map polygon elements.\r\n *\r\n * @see {@link IMapPolygonSeriesEvents} for a list of available Events\r\n * @see {@link IMapPolygonSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapPolygonSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapPolygonSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapPolygonSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapPolygonSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapPolygonSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapPolygonSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapPolygonSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapPolygonSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapPolygonSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapPolygonSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map polygons in the series.\r\n\t *\r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapPolygons: ListTemplate<MapPolygon>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.parsingStepDuration = 1000; // to avoid some extra redrawing\r\n\r\n\t\tthis.className = \"MapPolygonSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPolygon = \"multiPolygon\";\r\n\t\tthis.dataFields.polygon = \"polygon\";\r\n\r\n\t\tthis.dataFields.geoPolygon = \"geoPolygon\";\r\n\t\tthis.dataFields.multiGeoPolygon = \"multiGeoPolygon\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapPolygonSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapPolygonSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc(){\r\n\t\tthis.mapPolygons.clear();\r\n\t\tsuper.processIncExc();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0 && this._parseDataFrom == 0) {\r\n\t\t\tthis.mapPolygons.clear();\r\n\t\t}\r\n\r\n\t\tthis.west = null;\r\n\t\tthis.east = null;\r\n\t\tthis.north = null;\r\n\t\tthis.south = null;\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\r\n\t\t\tif(this.geodata){\r\n\t\t\t\tgeoJSON = this.geodata;\r\n\t\t\t}\r\n\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0; i < features.length; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\r\n\t\t\t\t\t\t\tif (type == \"Polygon\" || type == \"MultiPolygon\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"Polygon\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// find data object in user-provided data\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapPolygonDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\t\t\t\t// create one if not found\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPolygon: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// in case found\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t// if user-provided object doesn't have points data provided in any way:\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPolygon) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPolygon = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\t// if data is parsed in chunks, polygon list is corrupted, fix it here\r\n\t\t// !important this should go after super!\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapPolygons.moveValue(dataItem.mapPolygon);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tmapPolygon.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * List of polygon elements in the series.\r\n\t *\r\n\t * @return {ListTemplate<MapPolygon>} Polygon list\r\n\t */\r\n\tpublic get mapPolygons(): ListTemplate<MapPolygon> {\r\n\r\n\t\tif (!this._mapPolygons) {\r\n\t\t\tlet polygonTemplate: MapPolygon = new MapPolygon();\r\n\r\n\t\t\tlet mapPolygons: ListTemplate<MapPolygon> = new ListTemplate<MapPolygon>(polygonTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapPolygons));\r\n\t\t\tthis._disposers.push(mapPolygons.template);\r\n\t\t\tmapPolygons.template.focusable = true;\r\n\t\t\tmapPolygons.events.on(\"inserted\", this.handleObjectAdded, this);\r\n\t\t\tthis._mapPolygons = mapPolygons;\r\n\t\t}\r\n\r\n\t\treturn this._mapPolygons;\r\n\t}\r\n\r\n\t/**\r\n\t * returns MapPolygon by id in geoJSON file\r\n\t * @param {string} polygon id\r\n\t * @return {MapPolygon}\r\n\t */\r\n\tpublic getPolygonById(id: string): MapPolygon {\r\n\t\treturn $iter.find(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tlet dataContext: any = mapPolygon.dataItem.dataContext;\r\n\t\t\treturn dataContext.id == id;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapPolygons.template.copyFrom(source.mapPolygons.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygonSeries\"] = MapPolygonSeries;\r\nregistry.registeredClasses[\"MapPolygonSeriesDataItem\"] = MapPolygonSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygonSeries.ts","/**\r\n * Map spline series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart, MapLineType } from \"../types/MapChart\";\r\nimport { MapSpline } from \"./MapSpline\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { IMapDataObject, IMapPolygonDataObject, IMapLineDataObject } from \"../types/MapChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSplineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapSplineSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapSpline]] element related to this data item.\r\n\t *\r\n\t * @type {MapSpline}\r\n\t */\r\n\tpublic _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSplineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineSeriesAdapters extends IMapLineSeriesAdapters, IMapSplineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map spline elements.\r\n *\r\n * @see {@link IMapSplineSeriesEvents} for a list of available Events\r\n * @see {@link IMapSplineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSplineSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapSplineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapSplineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapSplineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapSplineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapSplineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapSplineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapSplineSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapSplineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapSplineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @type {MapSpline}\r\n\t */\r\n\tpublic _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapSplineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSplineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return {MapSpline} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapSpline();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSplineSeries\"] = MapSplineSeries;\r\nregistry.registeredClasses[\"MapSplineSeriesDataItem\"] = MapSplineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSplineSeries.ts","/**\r\n * Map image series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapImageDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapImageSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapImageSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t *\r\n\t * @type {MapImage}\r\n\t */\r\n\tprotected _mapImage: MapImage;\r\n\r\n\t/**\r\n\t * [_point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number[]}\r\n\t */\r\n\tprotected _point: number[];\r\n\r\n\t/**\r\n\t * Geographical coordinates image is placed at.\r\n\t *\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _geoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t *\r\n\t * @return {MapImage} Element\r\n\t */\r\n\tpublic get mapImage(): MapImage {\r\n\t\tif (!this._mapImage) {\r\n\t\t\tlet mapImage = this.component.mapImages.create();\r\n\t\t\tthis.addSprite(mapImage);\r\n\t\t\tthis._mapImage = mapImage;\r\n\t\t\tthis._disposers.push(mapImage);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.mapImages.removeValue(mapImage);\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._mapImage;\r\n\t}\r\n\r\n\t/**\r\n\t * [point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number[]} point [description]\r\n\t */\r\n\tpublic set point(point: number[]) {\r\n\t\tthis._point = point;\r\n\t\tthis.geoPoint = $mapUtils.pointToGeo(point);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} [description]\r\n\t */\r\n\tpublic get point(): number[] {\r\n\t\treturn this._point;\r\n\t}\r\n\r\n\t/**\r\n\t * Geographical coordinates (lat/long) image is placed at.\r\n\t *\r\n\t * @param {IGeoPoint} geoPoint Image coordinates\r\n\t */\r\n\tpublic set geoPoint(geoPoint: IGeoPoint) {\r\n\t\tthis._geoPoint = geoPoint;\r\n\t\tthis.updateExtremes([this._geoPoint]);\r\n\t\tthis.mapImage.latitude = this._geoPoint.latitude;\r\n\t\tthis.mapImage.longitude = this._geoPoint.longitude;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint} Image coordinates\r\n\t */\r\n\tpublic get geoPoint(): IGeoPoint {\r\n\t\treturn this._geoPoint;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds image point data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds image point data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoPoint?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImageSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageSeriesAdapters extends IMapSeriesAdapters, IMapImageSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map image (marker) elements.\r\n *\r\n * @see {@link IMapImageSeriesEvents} for a list of available Events\r\n * @see {@link IMapImageSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapImageSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapImageSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapImageSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapImageSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapImageSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapImageSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapImageSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapImageSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapImageSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapImageSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this image is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t *\r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapImages: ListTemplate<MapImage>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPoint = \"multiPoint\";\r\n\t\tthis.dataFields.point = \"point\";\r\n\r\n\t\tthis.dataFields.geoPoint = \"geoPoint\";\r\n\t\tthis.dataFields.multiGeoPoint = \"multiGeoPoint\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapImageSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapImageSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the data of the sries, effectively forcing it to redraw\r\n\t * all of its elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.mapImages.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata) {\r\n\t\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0; i < features.length; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"Point\" || type == \"MultiPoint\") {  // todo: we don't support multipoints at the moment actually\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPoint\r\n\t\t\t\t\t\t\t\t\tif (type == \"MultiPoint\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapImageDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPoint: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPoint) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPoint = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t\t// important! this should go after super.validateData\r\n\t\t// if data is parsed in chunks, images list is corrupted, fix it here\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapImages.moveValue(dataItem.mapImage);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t *\r\n\t * @return {ListTemplate<MapImage>} Map images\r\n\t */\r\n\tpublic get mapImages(): ListTemplate<MapImage> {\r\n\r\n\t\tif (!this._mapImages) {\r\n\t\t\tlet template: MapImage = new MapImage();\r\n\t\t\tlet mapImages = new ListTemplate<MapImage>(template);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapImages));\r\n\t\t\tthis._disposers.push(mapImages.template);\r\n\t\t\tmapImages.template.focusable = true;\r\n\t\t\tmapImages.events.on(\"inserted\", this.handleObjectAdded, this);\r\n\t\t\tthis._mapImages = mapImages;\r\n\t\t}\r\n\r\n\t\treturn this._mapImages;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data element, effectively triggering its redrawal.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]) {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tdataItem.mapImage.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapImages.iterator(), (mapImage) => {\r\n\t\t\tmapImage.validatePosition();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapImages.template.copyFrom(source.mapImages.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImageSeries\"] = MapImageSeries;\r\nregistry.registeredClasses[\"MapImageSeriesDataItem\"] = MapImageSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImageSeries.ts","/**\r\n * Map arc series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart, MapLineType } from \"../types/MapChart\";\r\nimport { MapArc } from \"./MapArc\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { IMapDataObject, IMapPolygonDataObject, IMapLineDataObject } from \"../types/MapChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapArcSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapArcSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapArc]] element related to this data item.\r\n\t *\r\n\t * @type {MapArc}\r\n\t */\r\n\tpublic _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArcSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcSeriesAdapters extends IMapLineSeriesAdapters, IMapArcSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of arc elements. (curved lines)\r\n *\r\n * @see {@link IMapArcSeriesEvents} for a list of available Events\r\n * @see {@link IMapArcSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapArcSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapArcSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapArcSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapArcSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapArcSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapArcSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapArcSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapArcSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapArcSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapArcSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapArcSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @type {MapArc}\r\n\t */\r\n\tpublic _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapArcSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapArcSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return {MapArc} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapArc();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArcSeries\"] = MapArcSeries;\r\nregistry.registeredClasses[\"MapArcSeriesDataItem\"] = MapArcSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArcSeries.ts","/**\r\n * Functionality for Mercator projection\r\n * \r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\n\r\n/**\r\n * Mercator projection.\r\n */\r\nexport class Mercator extends Projection {\r\n\r\n\t/**\r\n\t * Converts screen coordinates to latitude/longitude in radians\r\n\t * @param  {number}     x  X\r\n\t * @param  {number}     y  Y\r\n\t * @return {IGeoPoint}     Geographical coordinates\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn {\r\n\t\t\tlongitude: x,\r\n\t\t\tlatitude: 2 * Math.atan(Math.exp(y)) - Math.PI / 2\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn {\r\n\t\t\tx: lambda,\r\n\t\t\ty: Math.log(Math.tan((Math.PI / 2 + phi) / 2))\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Mercator\"] = Mercator;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Mercator.ts","/**\n * Functionality for Miller projection\n *\n * The function(s) below are from D3.js library (https://d3js.org/)\n * \n * ```\n * Copyright 2017 Mike Bostock\n * \n * Redistribution and use in source and binary forms, with or without \n * modification, are permitted provided that the following conditions are met:\n * \n * 1. Redistributions of source code must retain the above copyright notice, \n *    this list of conditions and the following disclaimer.\n * \n * 2. Redistributions in binary form must reproduce the above copyright notice, \n *    this list of conditions and the following disclaimer in the documentation \n *    and/or other materials provided with the distribution.\n * \n * 3. Neither the name of the copyright holder nor the names of its \n *    contributors may be used to endorse or promote products derived from this \n *    software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \n * POSSIBILITY OF SUCH DAMAGE.\n * ```\n */\n\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { Projection } from \"./Projection\";\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\nimport { IPoint } from \"../../../core/defs/IPoint\";\nimport { registry } from \"../../../core/Registry\";\n\n/**\n * Miller projection.\n */\nexport class Miller extends Projection {\n\n\t/**\n\t * Converts screen coordinates to latitude/longitude.\n\t * \n\t * @param  {number}     x  X\n\t * @param  {number}     y  Y\n\t * @return {IGeoPoint}     Geographical coordinates in radians\n\t */\n\tpublic unproject(x: number, y: number): IGeoPoint {\n\t\treturn {\n\t\t\tlongitude: x,\n\t\t\tlatitude: 2.5 * Math.atan(Math.exp(0.8 * y)) - 0.625 * Math.PI\n\t\t};\n\t}\n\n\t/**\n\t * Converts geographical coordinates to screen coordinates.\n\t * \n\t * @param  {number}  lambda  Lambda parameter\n\t * @param  {number}  phi     Phi parameter\n\t * @return {IPoint}          Screen coordinates\n\t */\n\tpublic project(lambda: number, phi: number): IPoint {\n\t\treturn {\n\t\t\tx: lambda,\n\t\t\ty: 1.25 * Math.log(Math.tan(Math.PI / 4 + 0.4 * phi))\n\t\t};\n\t}\n\n}\n\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n * \n * @ignore\n */\nregistry.registeredClasses[\"Miller\"] = Miller;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Miller.ts","/**\r\n * Functionality for Eckert6 projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\n\r\n/**\r\n * Eckert6 projection.\r\n */\r\nexport class Eckert6 extends Projection {\r\n\r\n\t/**\r\n\t * Converts screen coordinates to latitude/longitude.\r\n\t * \r\n\t * @param  {number}     x  X\r\n\t * @param  {number}     y  Y\r\n\t * @return {IGeoPoint}     Geographical coordinates in radians\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\tlet j = 1 + Math.PI / 2,\r\n\t\t\tk = Math.sqrt(j / 2);\r\n\t\treturn {\r\n\t\t\tlongitude: x * 2 * k / (1 + Math.cos(y *= k)),\r\n\t\t\tlatitude: Math.asin((y + Math.sin(y)) / j)\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\tlet k = (1 + Math.PI / 2) * Math.sin(phi);\r\n\t\tfor (let i = 0, delta = Infinity; i < 10 && Math.abs(delta) > 0.00001; i++) {\r\n\t\t\tphi -= delta = (phi + Math.sin(phi) - k) / (1 + Math.cos(phi));\r\n\t\t}\r\n\t\tk = Math.sqrt(2 + Math.PI);\r\n\t\treturn {\r\n\t\t\tx: lambda * (1 + Math.cos(phi)) / k,\r\n\t\t\ty: 2 * phi / k\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Eckert6\"] = Eckert6;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Eckert6.ts","/**\r\n * Functionality for Mercator projection\r\n * \r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class Orthographic extends Projection {\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn { x: Math.cos(phi) * Math.sin(lambda), y: Math.sin(phi) };\r\n\t}\r\n\r\n\r\n\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: longitude - 180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: longitude - 180, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\tpublic getRect1(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t}\r\n\r\n\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\r\n\t\tlet delta: number;\r\n\r\n\t\tif (longitude > 0) {\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\r\n\t\treturn [{ longitude: smallNum + longitude - 180 + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude + 90 }, { longitude: smallNum + longitude - 180 + delta, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\r\n\tpublic getRect2(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet delta: number;\r\n\r\n\t\tif (longitude > 0) {\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180 + delta, east: longitude + delta };\r\n\t}\r\n\r\n\r\n\r\n\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tlet rect1 = this.getRect1();\r\n\t\tlet rect2 = this.getRect2();\r\n\r\n\t\tfor (let i: number = 0; i < geoArea.length; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.isInside(surfaceRect, rect1)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\r\n\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.isInside(surfaceRect, rect2)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\tclippedArea.push(area);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i: number = 0; i < clippedArea.length; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = clippedArea[i][0];\r\n\t\t\t//let hole: IGeoPoint[] = clippedArea[i][1];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet prevPoint = surface[surface.length - 1];\r\n\r\n\t\t\t\tfor (let i = 0; i < surface.length; i++) {\r\n\t\t\t\t\tlet point = surface[i];\r\n\r\n\t\t\t\t\tif ($math.round(point.longitude, 4) == $math.round(prevPoint.longitude, 4)) {\r\n\t\t\t\t\t\tlet stepCount = Math.abs((prevPoint.latitude - point.latitude) * 2);\r\n\t\t\t\t\t\tlet extraPoints: IGeoPoint[] = [];\r\n\r\n\t\t\t\t\t\tif (stepCount > 1) {\r\n\t\t\t\t\t\t\tfor (let s = 1; s < stepCount; s++) {\r\n\t\t\t\t\t\t\t\textraPoints.push({ longitude: prevPoint.longitude, latitude: prevPoint.latitude + (point.latitude - prevPoint.latitude) / stepCount * s })\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tsurface.splice(i, 0, ...extraPoints);\r\n\t\t\t\t\t\t\ti = i + extraPoints.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tprevPoint = point;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedArea;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Orthographic\"] = Orthographic;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Orthographic.ts","/**\r\n * This module contains funcitonality related to geographical projections\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\nimport * as $geo from \"../Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for a geographical projection.\r\n */\r\nexport class Projection {\r\n\r\n\tpublic deltaLongitude: number = 0;\r\n\r\n\tpublic deltaLatitude: number = 0;\r\n\r\n\tpublic deltaGama: number = 0;\r\n\r\n\tpublic centerPoint: IPoint = { x: 0, y: 0 };\r\n\r\n\tpublic scale: number = 1;\r\n\r\n\tpublic projectGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\r\n\t\tlet clippedGeoArea: IGeoPoint[][][] = this.clipGeoArea(geoArea);\r\n\t\tlet convertedPoints: IPoint[][][] = this.convertGeoArea(clippedGeoArea);\r\n\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\tpublic projectGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\treturn this.convertGeoLine(this.clipGeoLine(geoLine));\r\n\t}\r\n\r\n\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: -180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: -180, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\t//let latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: longitude + smallNum, latitude: -90 }, { longitude: 180, latitude: -90 }, { longitude: 180, latitude: 90 }, { longitude: longitude + smallNum, latitude: 90 }];\r\n\t}\r\n\r\n\tpublic getRect1(): IGeoRectangle {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t}\r\n\r\n\tpublic getRect2(): IGeoRectangle {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude, east: (longitude + 180) };\r\n\t}\r\n\r\n\r\n\r\n\tprotected clipGeoLine(geoLine: IGeoPoint[][]): IGeoPoint[][] {\r\n\t\tif (!geoLine) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedLine: IGeoPoint[][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tfor (let i: number = 0; i < geoLine.length; i++) {\r\n\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\r\n\t\t\tif (segment) {\r\n\t\t\t\tlet clippedSegments: IGeoPoint[][] = this.clipLine(segment, clipRectangle1);\r\n\t\t\t\tclippedLine = clippedLine.concat(clippedSegments);\r\n\r\n\t\t\t\tif (this.deltaLongitude != 0) {\r\n\t\t\t\t\tlet clippedSegments2: IGeoPoint[][] = this.clipLine(segment, clipRectangle2);\r\n\t\t\t\t\tclippedLine = clippedLine.concat(clippedSegments2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedLine;\r\n\t}\r\n\r\n\r\n\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tlet rect1 = this.getRect1();\r\n\t\tlet rect2 = this.getRect2();\r\n\r\n\t\tfor (let i: number = 0; i < geoArea.length; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\tclippedArea.push(area);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedArea;\r\n\t}\r\n\r\n\tprotected convertGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet convertedPoints: IPoint[][][] = [];\r\n\r\n\t\tfor (let i: number = 0; i < geoArea.length; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet convertedAreaPoints: IPoint[][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\t\t\t\tlet convertedSurface: IPoint[] = [];\r\n\r\n\t\t\t\tfor (let s: number = 0; s < surface.length; s++) {\r\n\t\t\t\t\tlet point: IPoint = this.convert(surface[s]);\r\n\r\n\t\t\t\t\tconvertedSurface.push(point);\r\n\t\t\t\t}\r\n\t\t\t\tconvertedAreaPoints.push(convertedSurface);\r\n\t\t\t}\r\n\r\n\t\t\tif (hole) {\r\n\t\t\t\tlet convertedHole: IPoint[] = [];\r\n\t\t\t\tfor (let s: number = 0; s < hole.length; s++) {\r\n\t\t\t\t\tlet point: IPoint = this.convert(hole[s]);\r\n\r\n\t\t\t\t\tconvertedHole.push(point);\r\n\t\t\t\t}\r\n\t\t\t\tconvertedAreaPoints.push(convertedHole);\r\n\t\t\t}\r\n\t\t\tconvertedPoints.push(convertedAreaPoints);\r\n\t\t}\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\tprotected convertGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\tif (!geoLine) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet convertedPoints: IPoint[][] = [];\r\n\r\n\t\tfor (let i: number = 0; i < geoLine.length; i++) {\r\n\r\n\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\r\n\t\t\tlet convertedSegmentPoints: IPoint[] = [];\r\n\r\n\t\t\tfor (let s: number = 0; s < segment.length; s++) {\r\n\t\t\t\tlet geoPoint: IGeoPoint = segment[s];\r\n\r\n\t\t\t\tlet point: IPoint = this.convert(geoPoint);\r\n\t\t\t\tconvertedSegmentPoints.push(point);\r\n\t\t\t}\r\n\r\n\t\t\tconvertedPoints.push(convertedSegmentPoints);\r\n\t\t}\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a geographical point (lat/long) to a screen point (x/y)\r\n\t * @param  {IGeoPoint} geoPoint Geo point (lat/long)\r\n\t * @return {IPoint}             Screen point (x/y)\r\n\t */\r\n\tpublic convert(geoPoint: IGeoPoint): IPoint {\r\n\t\tgeoPoint = $geo.normalizePoint(geoPoint);\r\n\t\tgeoPoint = this.rotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\t\tlet pointInRadians: IPoint = this.project(geoPoint.longitude * $math.RADIANS, geoPoint.latitude * $math.RADIANS);\r\n\t\treturn {\r\n\t\t\tx: $math.round(pointInRadians.x * $math.DEGREES - this.centerPoint.x, 4) * this.scale,\r\n\t\t\ty: $math.round(-pointInRadians.y * $math.DEGREES - this.centerPoint.y, 4) * this.scale\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a screen point (x/y) to a geographical point (lat/long)\r\n\t * @param  {IPoint}    point Screen point (x/y)\r\n\t * @return {IGeoPoint}       Geo point (lat/long)\r\n\t */\r\n\tpublic invert(point: IPoint): IGeoPoint {\r\n\t\tlet pointInRadians: IGeoPoint = this.unproject((point.x / this.scale + this.centerPoint.x) * $math.RADIANS, (-point.y / this.scale - this.centerPoint.y) * $math.RADIANS);\r\n\r\n\t\tlet geoPoint = { longitude: pointInRadians.longitude * $math.DEGREES, latitude: pointInRadians.latitude * $math.DEGREES };\r\n\r\n\t\tgeoPoint = this.unrotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\r\n\t\treturn geoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns X/Y coordinates.\r\n\t * Individual projections will override this method to apply their own \r\n\t * projection logic.\r\n\t * @param  {number} lambda [description]\r\n\t * @param  {number} phi    [description]\r\n\t * @return {IPoint}        X/Y coordinates\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn { x: lambda, y: phi };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns geographical coordinates (lat/long).\r\n\t * Individual projections will override this method to apply their own \r\n\t * projection logic.\r\n\t * @param  {number}    x X coordinate\r\n\t * @param  {number}    y Y coordinate\r\n\t * @return {IGeoPoint}   Geographical point\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn { longitude: x, latitude: y };\r\n\t}\r\n\r\n\r\n\trotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS + deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaPhi + x * sinDeltaPhi;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaGamma + y * sinDeltaGamma) };\r\n\t}\r\n\r\n\tunrotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS - deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaGamma - y * sinDeltaGamma;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaPhi - x * sinDeltaPhi) };\r\n\t}\r\n\r\n\r\n\r\n\tclipLine(subjectPolyline: IGeoPoint[], clipPolygon: IGeoPoint[]): IGeoPoint[][] {\r\n\r\n\t\tif (!subjectPolyline || subjectPolyline.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet cp1: IGeoPoint;\r\n\t\tlet cp2: IGeoPoint;\r\n\r\n\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t};\r\n\r\n\t\tlet s: IGeoPoint;\r\n\t\tlet e: IGeoPoint;\r\n\r\n\t\t//@todo: make a separate function\r\n\t\tvar intersection = function() {\r\n\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\r\n\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t};\r\n\r\n\t\tvar segment: IGeoPoint[] = subjectPolyline;\r\n\r\n\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\r\n\t\tfor (let j in clipPolygon) {\r\n\t\t\tcp2 = clipPolygon[j];\r\n\t\t\tlet inputList = segment;\r\n\t\t\tsegment = [];\r\n\t\t\ts = inputList[0];\r\n\t\t\tfor (let i = 0; i < inputList.length; i++) {\r\n\t\t\t\te = inputList[i];\r\n\r\n\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsegment.push(e);\r\n\t\t\t\t}\r\n\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t}\r\n\r\n\t\t\t\ts = e;\r\n\t\t\t}\r\n\t\t\tcp1 = cp2;\r\n\t\t}\r\n\r\n\t\treturn [segment];\r\n\t}\r\n\r\n\r\n\r\n\r\n\t//@todo add credits to roseta code\r\n\t//@todo: someday make it better\r\n\tclip(subjectPolygon: IGeoPoint[], clipPolygon: IGeoPoint[]) {\r\n\r\n\t\tif (!subjectPolygon || subjectPolygon.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet cp1: IGeoPoint;\r\n\t\tlet cp2: IGeoPoint;\r\n\r\n\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t};\r\n\r\n\t\tlet s: IGeoPoint;\r\n\t\tlet e: IGeoPoint;\r\n\t\t//@todo: make a separate function\r\n\t\tvar intersection = function() {\r\n\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\r\n\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t};\r\n\r\n\t\tvar outputList = subjectPolygon;\r\n\r\n\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\r\n\t\tfor (let j in clipPolygon) {\r\n\t\t\tcp2 = clipPolygon[j];\r\n\t\t\tlet inputList = outputList;\r\n\t\t\toutputList = [];\r\n\t\t\ts = inputList[inputList.length - 1]; //last on the input list\r\n\t\t\tfor (let i in inputList) {\r\n\t\t\t\te = inputList[i];\r\n\r\n\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t\t}\r\n\t\t\t\t\toutputList.push(e);\r\n\t\t\t\t}\r\n\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t}\r\n\t\t\t\ts = e;\r\n\t\t\t}\r\n\t\t\tcp1 = cp2;\r\n\t\t}\r\n\t\treturn outputList;\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic getExtremes(geoPoints: IGeoPoint[]): IGeoRectangle {\r\n\r\n\t\tlet west: number = geoPoints[0].longitude;\r\n\t\tlet east: number = geoPoints[0].longitude;\r\n\t\tlet north: number = geoPoints[0].latitude;\r\n\t\tlet south: number = geoPoints[0].latitude;\r\n\r\n\t\tfor (let s: number = 0; s < geoPoints.length; s++) {\r\n\t\t\tlet longitude: number = geoPoints[s].longitude;\r\n\t\t\tlet latitude: number = geoPoints[s].latitude;\r\n\r\n\t\t\tif ((west > longitude)) {\r\n\t\t\t\twest = longitude;\r\n\t\t\t}\r\n\t\t\tif ((east < longitude)) {\r\n\t\t\t\teast = longitude;\r\n\t\t\t}\r\n\r\n\t\t\tif ((north < latitude)) {\r\n\t\t\t\tnorth = latitude;\r\n\t\t\t}\r\n\t\t\tif ((south > latitude)) {\r\n\t\t\t\tsouth = latitude;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { north: north, east: east, south: south, west: west };\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic isInside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\tif (r1.north < r2.north && r1.south > r2.south && r1.west > r2.west && r1.east < r2.east) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic isOutside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\tif (r1.south > r2.north || r1.north < r2.south || r1.west > r2.east || r1.east < r2.west) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\t//@todo: move to some utils?\r\n\t//@todo: add credits to: https://www.movable-type.co.uk/scripts/latlong.html\r\n\tpublic intermediatePoint(pointA: IGeoPoint, pointB: IGeoPoint, position: number) {\r\n\t\tvar phi1 = pointA.latitude * $math.RADIANS;\r\n\t\tlet lambda1 = pointA.longitude * $math.RADIANS;\r\n\r\n\t\tlet phi2 = pointB.latitude * $math.RADIANS;\r\n\t\tlet lambda2 = pointB.longitude * $math.RADIANS;\r\n\r\n\t\tvar sinPhi1 = Math.sin(phi1);\r\n\t\tlet cosPhi1 = Math.cos(phi1);\r\n\t\tlet sinLambda1 = Math.sin(lambda1);\r\n\t\tlet cosLambda1 = Math.cos(lambda1);\r\n\t\tvar sinPhi2 = Math.sin(phi2);\r\n\t\tlet cosPhi2 = Math.cos(phi2);\r\n\t\tlet sinLambda2 = Math.sin(lambda2);\r\n\t\tlet cosLambda2 = Math.cos(lambda2);\r\n\r\n\t\t// distance between points\r\n\t\tvar deltaPhi = phi2 - phi1;\r\n\t\tvar deltaLambda = lambda2 - lambda1;\r\n\t\tvar a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) + Math.cos(phi1) * Math.cos(phi2) * Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);\r\n\t\tvar delta = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n\t\tvar A = Math.sin((1 - position) * delta) / Math.sin(delta);\r\n\t\tvar B = Math.sin(position * delta) / Math.sin(delta);\r\n\r\n\t\tvar x = A * cosPhi1 * cosLambda1 + B * cosPhi2 * cosLambda2;\r\n\t\tvar y = A * cosPhi1 * sinLambda1 + B * cosPhi2 * sinLambda2;\r\n\t\tvar z = A * sinPhi1 + B * sinPhi2;\r\n\r\n\t\tvar phi3 = Math.atan2(z, Math.sqrt(x * x + y * y));\r\n\t\tvar lambda3 = Math.atan2(y, x);\r\n\r\n\t\treturn { latitude: phi3 * $math.DEGREES, longitude: lambda3 * $math.DEGREES };\r\n\t};\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Projection\"] = Projection;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Projection.ts"],"sourceRoot":""}
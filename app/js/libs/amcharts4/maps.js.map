{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/map/MapSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapObject.ts","webpack:///../../../../../src/.internal/charts/map/Geo.ts","webpack:///../../../../../src/.internal/charts/map/MapLine.ts","webpack:///../../../../../src/.internal/charts/map/MapUtils.ts","webpack:///../../../../../src/.internal/charts/map/MapImage.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygon.ts","webpack:///../../../../../src/.internal/charts/map/MapLineSeries.ts","webpack:///../../../../../src/.internal/charts/map/SmallMap.ts","webpack:///../../../../../src/.internal/charts/map/MapSpline.ts","webpack:///../../../../../src/.internal/charts/map/MapArc.ts","webpack:///../../../../../src/.internal/charts/map/ZoomControl.ts","webpack:///./maps.js","webpack:///../../src/maps.ts","webpack:///../../../../../src/.internal/charts/types/MapChart.ts","webpack:///../../../../../src/.internal/charts/map/MapLineObject.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygonSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapSplineSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapImageSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapArcSeries.ts","webpack:///../../../../../src/.internal/charts/map/projections.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Mercator.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Miller.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Eckert6.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Orthographic.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Projection.ts"],"names":["__webpack_require__","d","__webpack_exports__","MapSeriesDataItem","MapSeries","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_1__series_Series__","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__","_super","_this","call","this","className","values","value","applyTheme","Object","defineProperty","prototype","setValue","updateExtremes","geoPoints","s","length","longitude","latitude","west","east","north","south","isMeasured","nonScalingStroke","dataFields","createDataItem","validateData","dataItems","iterator","dataItem","chart","checkInclude","includes","excludes","id","indexOf","getPropertyValue","setPropertyValue","invalidateData","processIncExc","handleObjectAdded","event","mapObject","newValue","parent","series","_geodata","geodata","_dataUsers","x","_dataSources","getDataSource","removeDispose","component","events","on","loadData","setDataSourceEvents","registeredClasses","MapObject","__WEBPACK_IMPORTED_MODULE_1__core_Container__","layout","clickable","validate","readerTitle","itemReaderText","normalizePoint","multiline","multiline_1","multiline_1_1","next","done","segment","segment_1","segment_1_1","point","wrapAngleTo180","geoPoint","y","__WEBPACK_IMPORTED_MODULE_1__core_utils_Math__","Math","asin","sin","latitude180","abs","angle","MapLine","__WEBPACK_IMPORTED_MODULE_1__MapObject__","__WEBPACK_IMPORTED_MODULE_2__MapLineObject__","__WEBPACK_IMPORTED_MODULE_3__core_elements_Triangle__","__WEBPACK_IMPORTED_MODULE_4__core_utils_List__","__WEBPACK_IMPORTED_MODULE_5__core_elements_Polyline__","__WEBPACK_IMPORTED_MODULE_6__core_Registry__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Color__","__WEBPACK_IMPORTED_MODULE_8__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_12__Geo__","line","stroke","strokeOpacity","interfaceColors","getFor","shortestDistance","positionToPoint","position","multiGeoLine","images","i","len","image","map","hasKey","getKey","property","invalidate","imagesToConnect","_a","_b","push","newMultiGeoLine","geoLine","newGeoLine","p","plen","geoPointA","geoPointB","stepCount","max","intermediatePoint","projection","previousPoint","segments","projectGeoLine","_arrow","validatePosition","lineObjects","measureElement","_lineObjects","handleLineObjectAdded","_disposers","template","mapLineObject","mapLine","arrow","createChild","shouldClone","width","height","triangle","fillOpacity","rotation","horizontalCenter","verticalCenter","copyFrom","source","clone","multiPointToGeo","points","pointToGeo","multiPolygon","multiGeoArea","surface","hole","multiLine","MapImage","__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","moveTo","convert","MapPolygon","__WEBPACK_IMPORTED_MODULE_2__core_elements_Polygon__","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","__WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__","polygon","fill","tooltipPosition","multiGeoPolygon","projectGeoArea","pixelWidth","pixelHeight","MapLineSeriesDataItem","MapLineSeries","__WEBPACK_IMPORTED_MODULE_1__MapSeries__","__WEBPACK_IMPORTED_MODULE_2__MapLine__","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","__WEBPACK_IMPORTED_MODULE_5__MapUtils__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Array__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Disposer__","_mapLine","mapLine_1","mapLines","create","addSprite","removeValue","_line","_multiLine","_geoLine","_multiGeoLine","updateLineExtremes","data","clear","useGeodata","geoJSON","features","type","geometry","console","log","feature","id_1","this_1","include","exclude","coordinates","dataObject","multiLineString","properties","moveValue","_mapLines","lineTemplate","createLine","SmallMap","__WEBPACK_IMPORTED_MODULE_2__core_elements_Rectangle__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Color__","__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","_chart","align","valign","percentHeight","percentWidth","margin","background","moveToPosition","updateMapSize","seriesContainer","rectangle","strokeWidth","_series","handleSeriesAdded","handleSeriesRemoved","contains","newSeries","dataUsers","interactionsEnabled","svgPoint","rectPoint","zoomLevel","scale","min","svgPointToGeo","zoomToGeoPoint","get","set","updateRectangle","ceil","pixelX","pixelY","scaleRatio","afterDraw","maskRectangle","processConfig","config","MapSpline","__WEBPACK_IMPORTED_MODULE_1__MapLine__","__WEBPACK_IMPORTED_MODULE_2__core_elements_Polyspline__","tensionX","tensionY","MapArc","__WEBPACK_IMPORTED_MODULE_2__core_elements_Polyarc__","ZoomControl","__WEBPACK_IMPORTED_MODULE_2__core_elements_Button__","__WEBPACK_IMPORTED_MODULE_3__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Keyboard__","__WEBPACK_IMPORTED_MODULE_6__core_interaction_Interaction__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_8__core_Registry__","__WEBPACK_IMPORTED_MODULE_9__core_utils_InterfaceColorSet__","padding","plusButton","label","text","fontFamily","slider","handleBackgroundClick","updateThumbSize","thumb","draggable","handleThumbDrag","minusButton","role","readerLive","language","translate","fixLayout","undefined","marginTop","marginBottom","toFront","toBack","minX","maxX","minY","maxY","marginLeft","marginRight","sprite","target","spritePoint","maxPower","maxZoomLevel","LN2","minPower","minZoomLevel","power","pow","zoomGeoPoint","updateThumb","zoomOut","body","ev","topParent","hasFocused","isKey","isFocused","zoomIn","minHeight","visible","minWidth","isDown","step","createBackground","__WEBPACK_IMPORTED_MODULE_0__es2015_maps__","window","am4maps","__WEBPACK_IMPORTED_MODULE_0__internal_charts_Legend__","__WEBPACK_IMPORTED_MODULE_1__internal_charts_elements_HeatLegend__","__WEBPACK_IMPORTED_MODULE_2__internal_charts_types_MapChart__","__WEBPACK_IMPORTED_MODULE_3__internal_charts_map_MapSeries__","__WEBPACK_IMPORTED_MODULE_4__internal_charts_map_MapObject__","__WEBPACK_IMPORTED_MODULE_5__internal_charts_map_MapPolygon__","__WEBPACK_IMPORTED_MODULE_6__internal_charts_map_MapImage__","__WEBPACK_IMPORTED_MODULE_7__internal_charts_map_MapLine__","__WEBPACK_IMPORTED_MODULE_8__internal_charts_map_MapSpline__","__WEBPACK_IMPORTED_MODULE_9__internal_charts_map_MapArc__","__WEBPACK_IMPORTED_MODULE_10__internal_charts_map_MapPolygonSeries__","__WEBPACK_IMPORTED_MODULE_11__internal_charts_map_MapLineSeries__","__WEBPACK_IMPORTED_MODULE_12__internal_charts_map_MapSplineSeries__","__WEBPACK_IMPORTED_MODULE_13__internal_charts_map_MapImageSeries__","__WEBPACK_IMPORTED_MODULE_14__internal_charts_map_MapArcSeries__","__WEBPACK_IMPORTED_MODULE_15__internal_charts_map_MapUtils__","__WEBPACK_IMPORTED_MODULE_16__internal_charts_map_ZoomControl__","__WEBPACK_IMPORTED_MODULE_17__internal_charts_map_SmallMap__","__WEBPACK_IMPORTED_MODULE_18__internal_charts_map_projections_Projection__","__WEBPACK_IMPORTED_MODULE_19__internal_charts_map_projections__","__WEBPACK_IMPORTED_MODULE_20__internal_charts_map_Geo__","MapChartDataItem","MapChart","__WEBPACK_IMPORTED_MODULE_1__SerialChart__","__WEBPACK_IMPORTED_MODULE_2__map_MapSeries__","__WEBPACK_IMPORTED_MODULE_3__map_MapImage__","__WEBPACK_IMPORTED_MODULE_4__map_MapPolygon__","__WEBPACK_IMPORTED_MODULE_5__map_projections_Projection__","__WEBPACK_IMPORTED_MODULE_6__map_SmallMap__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Keyboard__","__WEBPACK_IMPORTED_MODULE_8__core_interaction_Interaction__","__WEBPACK_IMPORTED_MODULE_9__core_Registry__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Ease__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_15__map_Geo__","zoomDuration","zoomEasing","_prevZoomGeoPoint","deltaLongitude","maxPanOut","homeZoomLevel","inert","resizable","handleMapTransform","handleDoubleHit","handleDrag","zIndex","chartContainer","_mapAnimation","stop","updateScaleRatio","_zoomGeoPointReal","each","updateTooltipBounds","chartContainerBg","e","dragStart","interactions","downPointers","getIndex","dragStop","focusable","handleMapDown","_zoomControl","getEventKey","pan","mouseWheelBehavior","ww","seriesWidth","hh","seriesHeight","maxWidth","maxHeight","applyInternalDefaults","htmlContainer","handleWheel","shift","_mouseWheelDisposer","dispose","wheelable","centerPoint","westPoint","eastPoint","northPoint","southPoint","vScale","innerWidth","hScale","innerHeight","Infinity","centerGeoPoint","measuredWidth","measuredHeight","goHome","dispatch","seriesPoint","seriesPointToGeo","geoPointToSVG","geoPointToSeries","invert","center","duration","animate","to","pixelPaddingLeft","pixelPaddingTop","zoomToMapObject","zoomToRectangle","level","_prevZoomLevel","_smallMap","smallMap","zoomControl","createSeries","invalidateProjection","createClassInstance","configOrder","a","b","asIs","field","homeGeoPoint","MapLineObject","adjustRotation","MapPolygonSeriesDataItem","MapPolygonSeries","__WEBPACK_IMPORTED_MODULE_2__MapPolygon__","_mapPolygon","mapPolygon_1","mapPolygons","_polygon","_multiPolygon","_geoPolygon","geoPolygon","_multiGeoPolygon","updateAreaExtremes","mapPolygon","parsingStepDuration","_parseDataFrom","_mapPolygons","polygonTemplate","getPolygonById","dataContext","MapSplineSeriesDataItem","MapSplineSeries","__WEBPACK_IMPORTED_MODULE_1__MapLineSeries__","__WEBPACK_IMPORTED_MODULE_2__MapSpline__","MapImageSeriesDataItem","MapImageSeries","__WEBPACK_IMPORTED_MODULE_2__MapImage__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Array__","__WEBPACK_IMPORTED_MODULE_6__MapUtils__","_mapImage","mapImage_1","mapImages","_point","_geoPoint","mapImage","multiPoint","multiGeoPoint","_mapImages","validateDataElement","MapArcSeriesDataItem","MapArcSeries","__WEBPACK_IMPORTED_MODULE_2__MapArc__","__WEBPACK_IMPORTED_MODULE_0__projections_Mercator__","__WEBPACK_IMPORTED_MODULE_1__projections_Miller__","__WEBPACK_IMPORTED_MODULE_2__projections_Eckert6__","__WEBPACK_IMPORTED_MODULE_3__projections_Orthographic__","__WEBPACK_IMPORTED_MODULE_4__projections_Projection__","Mercator","__WEBPACK_IMPORTED_MODULE_1__Projection__","unproject","atan","exp","PI","project","lambda","phi","tan","Miller","Eckert6","j","k","sqrt","cos","delta","Orthographic","__WEBPACK_IMPORTED_MODULE_3__core_utils_Math__","getClipRectangle1","deltaLatitude","getRect1","getClipRectangle2","getRect2","clipGeoArea","geoArea","clippedArea","clipRectangle1","clipRectangle2","rect1","rect2","clippedAreas","surfaceRect","getExtremes","isInside","isOutside","clippedSurface1","clip","clippedHole1","clippedSurface2","clippedHole2","clippedAreas_1","clippedAreas_1_1","area","len_1","prevPoint","i_1","extraPoints","splice","apply","Projection","__WEBPACK_IMPORTED_MODULE_1__core_Registry__","__WEBPACK_IMPORTED_MODULE_2__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_3__Geo__","deltaGama","clippedGeoArea","convertGeoArea","convertGeoLine","clipGeoLine","clippedLine","clippedSegments","clipLine","concat","clippedSegments2","convertedPoints","convertedAreaPoints","convertedSurface","slen","convertedHole","hlen","convertedSegmentPoints","rotate","pointInRadians","unrotate","deltaGamma","deltaLambda","deltaPhi","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","cosPhi","z","atan2","subjectPolyline","clipPolygon","cp1","cp2","inside","intersection","dc","dp","n1","n2","n3","inputList","subjectPolygon","outputList","r1","r2","pointA","pointB","phi1","lambda1","phi2","lambda2","sinPhi1","cosPhi1","sinLambda1","cosLambda1","sinPhi2","cosPhi2","sinLambda2","cosLambda2","A","B","phi3","lambda3"],"mappings":"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","file":"maps.js","sourcesContent":["/**\r\n * Map series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"../series/Series\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapObject } from \"./MapObject\";\r\nimport { IListEvents } from \"../../core/utils/List\";\r\nimport { IMapDataObject, IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { DataSource } from \"../../core/data/DataSource\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * Longitude of the East-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * Longitude of the West-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * Latitude of the South-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * Latitude of the North-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeriesDataItem\";\r\n\t\tthis.values.value = {};\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the data item.\r\n\t *\r\n\t * Value may be used in heat-map calculations.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateExtremes(geoPoints: IGeoPoint[]): void {\r\n\t\tfor (let s: number = 0; s < geoPoints.length; s++) {\r\n\t\t\tlet longitude: number = geoPoints[s].longitude;\r\n\t\t\tlet latitude: number = geoPoints[s].latitude;\r\n\r\n\t\t\tif ((this.west > longitude) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = longitude;\r\n\t\t\t}\r\n\t\t\tif ((this.east < longitude) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = longitude;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < latitude) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = latitude;\r\n\t\t\t}\r\n\t\t\tif ((this.south > latitude) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = latitude;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * [GEOJSONGeometry description]\r\n *\r\n * @type {string}\r\n * @todo Description\r\n */\r\nexport type GEOJSONGeometry = \"Point\" | \"LineString\" | \"Polygon\" | \"MultiPoint\" | \"MultiLineString\" | \"MultiPolygon\";\r\n\r\n/**\r\n * Defines data fields for [[MapSeries]].\r\n *\r\n * @todo Alllow any number of values?\r\n */\r\nexport interface IMapSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * A field number in data for a numeric value of the map object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * A flag telling if the series should get data from `geodata` or not\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tuseGeodata?: boolean;\r\n\r\n\t/**\r\n\t * A list of object ids to include from the series.\r\n\t *\r\n\t * @type {string[]}\r\n\t */\r\n\tinclude?: string[];\r\n\r\n\t/**\r\n\t * A list of object ids to exclude from the series.\r\n\t *\r\n\t * @type {string[]}\r\n\t */\r\n\texclude?: string[];\r\n}\r\n\r\n/**\r\n * Defines events for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSeriesAdapters extends ISeriesAdapters, IMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for series of map objects.\r\n *\r\n * @see {@link IMapSeriesEvents} for a list of available Events\r\n * @see {@link IMapSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSeriesDataItem;\r\n\r\n\t/**\r\n\t * The longitude of the East-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * The longitude of the West-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * The latitude of the South-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * The latitude of the North-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * @see {@link http://geojson.org/} GeoJSON official specification\r\n\t * @type {Object}\r\n\t */\r\n\tprotected _geodata: Object;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeries\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.value = \"value\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tif ((this.west > dataItem.west) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = dataItem.west;\r\n\t\t\t}\r\n\t\t\tif ((this.east < dataItem.east) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = dataItem.east;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < dataItem.north) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = dataItem.north;\r\n\t\t\t}\r\n\t\t\tif ((this.south > dataItem.south) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = dataItem.south;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.chart.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether object should be included in series.\r\n\t *\r\n\t * @param  {string[]}  includes  A list of explicitly included ids\r\n\t * @param  {string[]}  excludes  A list of explicitly excluded ids\r\n\t * @param  {string}    id        Id of the object\r\n\t * @return {boolean}             Include?\r\n\t */\r\n\tprotected checkInclude(includes: string[], excludes: string[], id: string): boolean {\r\n\t\tif (includes) {\r\n\t\t\tif (includes.length == 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (includes.indexOf(id) == -1) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (excludes && excludes.length > 0) {\r\n\t\t\tif (excludes.indexOf(id) != -1) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Should the map extract all the data about element from the GeoJSON?\r\n\t *\r\n\t * This is especially relevant for [[MapPolygonSeries]]. If not set to `true`\r\n\t * polygon series will need to contain geographical data in itself in order\r\n\t * to be drawn.\r\n\t *\r\n\t * If this is set to `true`, series will try to extract data for its objects\r\n\t * from either chart-level `geodata` or from series' `geodata` which holds\r\n\t * map infor in GeoJSON format.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Use GeoJSON data?\r\n\t */\r\n\tpublic set useGeodata(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"useGeodata\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use GeoJSON data?\r\n\t */\r\n\tpublic get useGeodata(): boolean {\r\n\t\treturn this.getPropertyValue(\"useGeodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be explictly included in the series.\r\n\t *\r\n\t * If this is not set, the series will automatically include all of the\r\n\t * objects, available in the GeoJSON map. (minus the ones listed in\r\n\t * `exclude`)\r\n\t *\r\n\t * If you need to display only specific objects, use `include`. E.g.:\r\n\t *\r\n\t * `include = [\"FR\", \"ES\", \"DE\"];`\r\n\t *\r\n\t * The above will show only France, Spain, and Germany out of the whole map.\r\n\t *\r\n\t * @param {string[]}  value  Included objects\r\n\t */\r\n\tpublic set include(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"include\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc() {\r\n\t\t//this.data = [];\r\n\t\tthis.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string[]} Included objects\r\n\t */\r\n\tpublic get include(): string[] {\r\n\t\treturn this.getPropertyValue(\"include\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be excluded from the series.\r\n\t *\r\n\t * E.g. you want to include all of the areas from a GeoJSON map, except\r\n\t * Antarctica.\r\n\t *\r\n\t * You'd leave `include` empty, and set `exclude = [\"AQ\"]`.\r\n\t *\r\n\t * @param {string[]}  value  Excluded ids\r\n\t */\r\n\tpublic set exclude(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"exclude\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string[]} Excluded ids\r\n\t */\r\n\tpublic get exclude(): string[] {\r\n\t\treturn this.getPropertyValue(\"exclude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a newly added object.\r\n\t *\r\n\t * @param {IListEvents<MapObject>[\"inserted\"]} event [description]\r\n\t */\r\n\tprotected handleObjectAdded(event: IListEvents<MapObject>[\"inserted\"]) {\r\n\t\tlet mapObject: MapObject = event.newValue;\r\n\t\tmapObject.parent = this;\r\n\t\tmapObject.series = this;\r\n\t}\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * The series supports the following GeoJSON objects: `Point`, `LineString`,\r\n\t * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n\t *\r\n\t * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n\t * @param {Object} geoJSON GeoJSON data\r\n\t */\r\n\tpublic set geodata(geodata: Object) {\r\n\t\tif (geodata != this._geodata) {\r\n\t\t\tthis._geodata = geodata;\r\n\t\t\tthis.invalidateData();\r\n\r\n\t\t\t$iter.each(this._dataUsers.iterator(), (x) => {\r\n\t\t\t\tx.invalidateData();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Object} GeoJSON data\r\n\t */\r\n\tpublic get geodata(): Object {\r\n\t\treturn this._geodata;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @param {DataSource} value Data source\r\n\t */\r\n\tpublic set geodataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"geodata\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"geodata\"] = value;\r\n\t\tthis._dataSources[\"geodata\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"geodata\")\r\n\t\t}, this);\r\n\t\tthis.setDataSourceEvents(value, \"geodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[DataSource]] specifically for loading Component's data.\r\n\t *\r\n\t * @return {DataSource} Data source\r\n\t */\r\n\tpublic get geodataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.getDataSource(\"geodata\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"geodata\"];\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSeries\"] = MapSeries;\r\nregistry.registeredClasses[\"MapSeriesDataItem\"] = MapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSeries.ts","/**\r\n * Map object module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines propeties for [[MapObject]].\r\n */\r\nexport interface IMapObjectProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[MapObject]].\r\n */\r\nexport interface IMapObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapObjectAdapters extends IContainerAdapters, IMapObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all map objects: lines, images, etc.\r\n *\r\n * @see {@link IMapObjectEvents} for a list of available events\r\n * @see {@link IMapObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapObjectProperties}\r\n\t */\r\n\tpublic _properties!: IMapObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapObjectAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapObjectEvents}\r\n\t */\r\n\tpublic _events!: IMapObjectEvents;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapSeries}\r\n\t */\r\n\tpublic series: MapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapObject\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.clickable = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates this object, forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis.readerTitle = this.series.itemReaderText;\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapObject\"] = MapObject;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapObject.ts","/**\r\n * A collection of GeoJSON format-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * Normalizes a geo-point.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint}  geoPoint  Source geo-point\r\n * @return {IGeoPoint}            Normalized geo-point\r\n */\r\nexport function normalizePoint(geoPoint: IGeoPoint): IGeoPoint {\r\n\tlet longitude = wrapAngleTo180(geoPoint.longitude);\r\n\tlet latitude = Math.asin(Math.sin((geoPoint.latitude * $math.RADIANS))) * $math.DEGREES;\r\n\r\n\tlet latitude180 = wrapAngleTo180(geoPoint.latitude);\r\n\r\n\tif (Math.abs(latitude180) > 90) {\r\n\t\tlongitude = wrapAngleTo180(longitude + 180);\r\n\t}\r\n\r\n\tgeoPoint.longitude = longitude;\r\n\tgeoPoint.latitude = latitude;\r\n\r\n\treturn geoPoint;\r\n}\r\n\r\n/**\r\n * Normalizes all points of a geo-line.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint[][]}  multiline  Source geo-line\r\n * @return {IGeoPoint[]}               Normalized geo-line\r\n */\r\nexport function normalizeMultiline(multiline: IGeoPoint[][]): IGeoPoint[][] {\r\n\tfor (let segment of multiline) {\r\n\t\tfor (let point of segment) {\r\n\t\t\tpoint = normalizePoint(point);\r\n\t\t}\r\n\t}\r\n\treturn multiline;\r\n}\r\n\r\n/**\r\n * [wrapAngleTo180 description]\r\n *\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n * @param  {number}  angle  Angle\r\n * @return {number}         Angle\r\n */\r\nexport function wrapAngleTo180(angle: number): number {\r\n\tangle = angle % 360;\r\n\r\n\tif (angle > 180) {\r\n\t\tangle -= 360;\r\n\t}\r\n\tif (angle < -180) {\r\n\t\tangle += 360;\r\n\t}\r\n\r\n\treturn angle;\r\n}\r\n\r\n/**\r\n * Converts a geo point to a regular point object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint}  geoPoint  Source geo point\r\n * @return {IPoint}               Point\r\n */\r\nexport function geoToPoint(geoPoint: IGeoPoint): IPoint {\r\n\treturn { x: geoPoint.longitude, y: geoPoint.latitude };\r\n}\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/Geo.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapLineObject } from \"./MapLineObject\";\r\nimport { MapLineSeriesDataItem, MapLineSeries } from \"./MapLineSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $geo from \"./Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLine]].\r\n */\r\nexport interface IMapLineProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Lat/long coordinates of all line ends and intermediate elbows.\r\n\t */\r\n\tmultiGeoLine?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * If `true` it line will be arched in the way to simulate shortest path\r\n\t * over curvature of Earth's surface, based on currently used on projection.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tshortestDistance?: boolean;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t */\r\n\timagesToConnect?: MapImage[];\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLine]].\r\n */\r\nexport interface IMapLineEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLine]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineAdapters extends IMapObjectAdapters, IMapLineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a line on the map.\r\n *\r\n * @see {@link IMapLineEvents} for a list of available events\r\n * @see {@link IMapLineAdapters} for a list of available Adapters\r\n */\r\nexport class MapLine extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapLineProperties}\r\n\t */\r\n\tpublic _properties!: IMapLineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapLineAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapLineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapLineEvents}\r\n\t */\r\n\tpublic _events!: IMapLineEvents;\r\n\r\n\t/**\r\n\t * A line visual element.\r\n\t *\r\n\t * @type {Polyline}\r\n\t */\r\n\tpublic line: Polyline;\r\n\r\n\t/**\r\n\t * [_lineObjects description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {ListTemplate<MapLineObject>}\r\n\t */\r\n\tprotected _lineObjects: ListTemplate<MapLineObject>;\r\n\r\n\t/**\r\n\t * [_arrow description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MapLineObject}\r\n\t */\r\n\tprotected _arrow: MapLineObject;\r\n\r\n\t/**\r\n\t * [_distance description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _distance: number;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @type {MapLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapLineSeries}\r\n\t */\r\n\tpublic series: MapLineSeries;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t * @ignore\r\n\t */\r\n\tprotected _imagesToConnect: MapImage[];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLine\";\r\n\r\n\t\t// Create a line and set its default properties\r\n\t\tthis.line = new Polyline();\r\n\t\tthis.line.stroke = color();\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.shortestDistance = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position within the line (0-1) to a physical point\r\n\t * coordinates.\r\n\t *\r\n\t * 0 indicates start of the line, 0.5 - middle, while 1 indicates the end.\r\n\t *\r\n\t * @param  {number}             position  Position (0-1)\r\n\t * @return {IOrientationPoint}            Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tif (this.line) {\r\n\t\t\treturn this.line.positionToPoint(position);\r\n\t\t}\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [multiGeoLine description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IGeoPoint[][]} multiGeoLine [description]\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoLine\", $geo.normalizeMultiline(multiGeoLine), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} [description]\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\treturn this.getPropertyValue(\"multiGeoLine\");\r\n\t}\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images\r\n\t * which will be connected by the line.\r\n\t *\r\n\t * Parameter is an array that can hold string `id`'s to of the images, or\r\n\t * references to actual [[MapImage]] objects.\r\n\t *\r\n\t * @param {MapImages[]}  images  Images\r\n\t */\r\n\tpublic set imagesToConnect(images: MapImage[] | string[]) {\r\n\t\t//@todo dispose listeners if previous imagesToConnect exists\r\n\t\tfor (let i = 0, len = images.length; i < len; i++) {\r\n\t\t\tlet image = images[i];\r\n\t\t\tif ($type.isString(image)) {\r\n\t\t\t\tif (this.map.hasKey(image)) {\r\n\t\t\t\t\timage = <MapImage>this.map.getKey(image);\r\n\t\t\t\t\timages[i] = image;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\timage.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\tif (event.property == \"longitude\" || event.property == \"latitude\") {\r\n\t\t\t\t\tthis.invalidate();\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"imagesToConnect\", images);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapImages[]}\r\n\t */\r\n\tpublic get imagesToConnect(): MapImage[] | string[] {\r\n\t\treturn this.getPropertyValue(\"imagesToConnect\");\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the line, effectively forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chart: MapChart = this.series.chart;\r\n\t\t//let multiPoints: IPoint[][] = [];\r\n\t\tlet multiGeoLine: IGeoPoint[][] = this.multiGeoLine || [];\r\n\r\n\t\tif (this.imagesToConnect) {\r\n\t\t\tlet segment: IGeoPoint[] = [];\r\n\t\t\tmultiGeoLine = [segment];\r\n\r\n\t\t\tfor (let image of this.imagesToConnect) {\r\n\t\t\t\tsegment.push({ longitude: (<MapImage>image).longitude, latitude: (<MapImage>image).latitude });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.shortestDistance) {\r\n\t\t\tlet newMultiGeoLine: IGeoPoint[][] = [];\r\n\r\n\t\t\tfor (let i = 0, len = multiGeoLine.length; i < len; i++) {\r\n\t\t\t\tlet geoLine: IGeoPoint[] = multiGeoLine[i];\r\n\t\t\t\tlet newGeoLine: IGeoPoint[] = [];\r\n\r\n\t\t\t\tfor (let p = 1, plen = geoLine.length; p < plen; p++) {\r\n\t\t\t\t\tlet geoPointA: IGeoPoint = geoLine[p - 1];\r\n\t\t\t\t\tlet geoPointB: IGeoPoint = geoLine[p];\r\n\r\n\t\t\t\t\tlet stepCount: number = Math.max(Math.abs(geoPointA.latitude - geoPointB.latitude), Math.abs(geoPointA.longitude - geoPointB.longitude));\r\n\t\t\t\t\t//let latitudeStep: number = (geoPointB.latitude - geoPointA.latitude) / stepCount;\r\n\t\t\t\t\t//let longitudeStep: number = (geoPointB.longitude - geoPointA.longitude) / stepCount;\r\n\r\n\t\t\t\t\tfor (let d = 0; d < stepCount; d++) {\r\n\t\t\t\t\t\tlet intermediatePoint = chart.projection.intermediatePoint(geoPointA, geoPointB, d / stepCount);\r\n\r\n\t\t\t\t\t\tif (newGeoLine.length > 0) {\r\n\t\t\t\t\t\t\tlet previousPoint = newGeoLine[newGeoLine.length - 1];\r\n\t\t\t\t\t\t\tif (Math.abs(previousPoint.longitude - intermediatePoint.longitude) > 359) {\r\n\t\t\t\t\t\t\t\tnewMultiGeoLine.push(newGeoLine);\r\n\t\t\t\t\t\t\t\tnewGeoLine = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnewGeoLine.push(intermediatePoint);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// add last point to avoid gap\r\n\t\t\t\t\tnewGeoLine.push(geoPointB);\r\n\t\t\t\t}\r\n\t\t\t\tnewMultiGeoLine.push(newGeoLine);\r\n\t\t\t}\r\n\t\t\tmultiGeoLine = newMultiGeoLine;\r\n\t\t}\r\n\r\n\t\tthis.line.segments = chart.projection.projectGeoLine(multiGeoLine);\r\n\r\n\t\tif (this._arrow) {\r\n\t\t\tthis._arrow.validatePosition();\r\n\t\t}\r\n\r\n\t\t$iter.each(this.lineObjects.iterator(), (x) => {\r\n\t\t\tx.validatePosition();\r\n\t\t});\r\n\r\n\t\tthis.line.parent = this;\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * The line should take the shortest path over the globe.\r\n\t *\r\n\t * Enabling this will make the line look differently in different\r\n\t * projections. Only `MapLine` supports this setting, `MapArc` and\r\n\t * `MapSplice` don't.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Real path?\r\n\t */\r\n\tpublic set shortestDistance(value: boolean) {\r\n\t\tthis.setPropertyValue(\"shortestDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Real path?\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn this.getPropertyValue(\"shortestDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * List of separate line objects, the line consists of.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @readonly\r\n\t * @return {ListTemplate<MapLineObject>} List of line objects\r\n\t */\r\n\tpublic get lineObjects(): ListTemplate<MapLineObject> {\r\n\t\tif (!this._lineObjects) {\r\n\t\t\tthis._lineObjects = new ListTemplate<MapLineObject>(new MapLineObject());\r\n\t\t\tthis._lineObjects.events.on(\"inserted\", this.handleLineObjectAdded, this);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._lineObjects));\r\n\t\t\tthis._disposers.push(this._lineObjects.template);\r\n\t\t}\r\n\r\n\t\treturn this._lineObjects;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorate a [[LineObject]] when it is added to the line.\r\n\t *\r\n\t * @param {IListEvents<MapLineObject>[\"inserted\"]}  event  Event\r\n\t */\r\n\tprotected handleLineObjectAdded(event: IListEvents<MapLineObject>[\"inserted\"]) {\r\n\t\tlet mapLineObject: MapLineObject = event.newValue;\r\n\t\tmapLineObject.mapLine = this;\r\n\t\tmapLineObject.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLineObject]] to use as an option arrowhead on the line.\r\n\t *\r\n\t * Just accessing this property will create a default arrowhead on the line\r\n\t * automatically.\r\n\t *\r\n\t * @param {MapLineObject}  arrow  Arrow element\r\n\t */\r\n\tpublic set arrow(arrow: MapLineObject) {\r\n\t\tthis._arrow = arrow;\r\n\t\tarrow.mapLine = this;\r\n\t\tarrow.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapLineObject} Arrow element\r\n\t */\r\n\tpublic get arrow(): MapLineObject {\r\n\t\tif (!this._arrow) {\r\n\t\t\tlet arrow: MapLineObject = this.createChild(MapLineObject);\r\n\t\t\tarrow.shouldClone = false;\r\n\t\t\tarrow.width = 8;\r\n\t\t\tarrow.height = 10;\r\n\t\t\tarrow.mapLine = this;\r\n\t\t\tarrow.position = 0.5;\r\n\r\n\t\t\tlet triangle = arrow.createChild(Triangle);\r\n\t\t\ttriangle.shouldClone = false;\r\n\t\t\ttriangle.fillOpacity = 1;\r\n\t\t\ttriangle.width = percent(100);\r\n\t\t\ttriangle.height = percent(100);\r\n\t\t\ttriangle.rotation = 90;\r\n\t\t\ttriangle.horizontalCenter = \"middle\";\r\n\t\t\ttriangle.verticalCenter = \"middle\";\r\n\t\t\tthis._arrow = arrow;\r\n\t\t}\r\n\t\treturn this._arrow;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies line properties and other attributes, like arrow, from another\r\n\t * instance of [[MapLine]].\r\n\t *\r\n\t * @param {MapLineObject}  source  Source map line\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.line.copyFrom(source.line);\r\n\t\tthis.lineObjects.copyFrom(source.lineObjects);\r\n\t\tif (source._arrow) {\r\n\t\t\tthis.arrow = <MapLineObject>source.arrow.clone();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.north + (dataItem.south - dataItem.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.east + (dataItem.west - dataItem.east) / 2;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLine\"] = MapLine;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLine.ts","/**\r\n * A collection of Map-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\n\r\n/**\r\n * Converts a multi-part polygon in X/Y coordinates to a geo-multipolygon in\r\n * geo-points (lat/long).\r\n * \r\n * @param  {number[][][][]}  multiPolygon  Source multi-polygon\r\n * @return {IGeoPoint[]}                   Geo-multipolygon\r\n */\r\n\r\nexport function multiPolygonToGeo(multiPolygon: number[][][][]): IGeoPoint[][][] {\r\n\tlet multiGeoArea: IGeoPoint[][][] = [];\r\n\r\n\tfor (let i = 0, len = multiPolygon.length; i < len; i++) {\r\n\r\n\t\tlet surface: number[][] = multiPolygon[i][0];\r\n\t\tlet hole: number[][] = multiPolygon[i][1];\r\n\r\n\t\t//let holePoints: IGeoPoint[] = [];\r\n\r\n\t\tmultiGeoArea[i] = [];\r\n\r\n\t\tif (surface) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(surface));\r\n\t\t}\r\n\r\n\t\tif (hole) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(hole));\r\n\t\t}\r\n\t}\r\n\treturn multiGeoArea;\r\n}\r\n\r\n/**\r\n * Converts a multiline in X/Y coordinates to a geo-multiline in geo-points\r\n * (lat/long).\r\n * \r\n * @param  {number[][][]}  multiLine  Source multiline\r\n * @return {IGeoPoint[]}              Geo-multiline\r\n */\r\nexport function multiLineToGeo(multiLine: number[][][]): IGeoPoint[][] {\r\n\tlet multiGeoLine: IGeoPoint[][] = [];\r\n\r\n\tfor (let i = 0, len = multiLine.length; i < len; i++) {\r\n\t\tmultiGeoLine.push(multiPointToGeo(multiLine[i]));\r\n\t}\r\n\treturn multiGeoLine;\r\n}\r\n\r\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n * \r\n * @param  {number[][]}   points  Source points\r\n * @return {IGeoPoint[]}          Geo-points\r\n */\r\nexport function multiPointToGeo(points: number[][]): IGeoPoint[] {\r\n\tlet geoPoints: IGeoPoint[] = [];\r\n\tfor (let i = 0, len = points.length; i < len; i++) {\r\n\t\tgeoPoints.push(pointToGeo(points[i]));\r\n\t}\r\n\treturn geoPoints;\r\n}\r\n\r\n/**\r\n * Converts X/Y point into a lat/long geo-point.\r\n * \r\n * @param  {number[]}   point  Source point\r\n * @return {IGeoPoint}         Geo-point\r\n */\r\nexport function pointToGeo(point: number[]): IGeoPoint {\r\n\treturn { longitude: point[0], latitude: point[1] }\r\n}\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapUtils.ts","/**\r\n *\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapImageSeriesDataItem, MapImageSeries } from \"./MapImageSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapImage]].\r\n */\r\nexport interface IMapImageProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Latitude of the image location.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlatitude?: number;\r\n\r\n\t/**\r\n\t * Longitude of the mage location.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlongitude?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapImage]].\r\n */\r\nexport interface IMapImageEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImage]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageAdapters extends IMapObjectAdapters, IMapImageProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to place an image on the map.\r\n *\r\n * @see {@link IMapImageEvents} for a list of available events\r\n * @see {@link IMapImageAdapters} for a list of available Adapters\r\n */\r\nexport class MapImage extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapImageProperties}\r\n\t */\r\n\tpublic _properties!: IMapImageProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapImageAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapImageAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapImageEvents}\r\n\t */\r\n\tpublic _events!: IMapImageEvents;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @type {MapImageSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapImageSeries}\r\n\t */\r\n\tpublic series: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapImage\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude image is placed at.\r\n\t *\r\n\t * @param {number}  value  Latitude\r\n\t */\r\n\tpublic set latitude(value: number) {\r\n\t\tthis.setPropertyValue(\"latitude\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\treturn this.getPropertyValue(\"latitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude image is placed on.\r\n\t *\r\n\t * @param {number}  value  Longitude\r\n\t */\r\n\tpublic set longitude(value: number) {\r\n\t\tthis.setPropertyValue(\"longitude\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\treturn this.getPropertyValue(\"longitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions the image to it's current position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition(): void {\r\n\t\tif ($type.isNumber(this.latitude) && $type.isNumber(this.longitude)) {\r\n\t\t\tthis.moveTo(this.series.chart.projection.convert({ latitude: this.latitude, longitude: this.longitude }));\r\n\t\t}\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImage\"] = MapImage;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImage.ts","/**\r\n * Map polygon module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapPolygonSeriesDataItem, MapPolygonSeries } from \"./MapPolygonSeries\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Polygon } from \"../../core/elements/Polygon\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================f================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygon]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonAdapters extends IMapObjectAdapters, IMapPolygonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a polygon on the map.\r\n *\r\n * @see {@link IMapPolygonEvents} for a list of available events\r\n * @see {@link IMapPolygonAdapters} for a list of available Adapters\r\n */\r\nexport class MapPolygon extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapPolygonProperties}\r\n\t */\r\n\tpublic _properties!: IMapPolygonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapPolygonAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapPolygonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapPolygonEvents}\r\n\t */\r\n\tpublic _events!: IMapPolygonEvents;\r\n\r\n\t/**\r\n\t * A visual polygon element.\r\n\t *\r\n\t * @type {Polygon}\r\n\t */\r\n\tpublic polygon: Polygon;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @type {MapPolygonSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapPolygonSeries}\r\n\t */\r\n\tpublic series: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapPolygon\";\r\n\r\n\t\tthis.polygon = this.createChild(Polygon);\r\n\t\tthis.polygon.shouldClone = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"secondaryButton\");\r\n\t\tthis.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.tooltipPosition = \"pointer\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t *\r\n\t * @param {IGeoPoint[][][]}  multiGeoPolygon  Polygon coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoPolygon\", multiGeoPolygon, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Polygon coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this.getPropertyValue(\"multiGeoPolygon\");\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the polygon, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series) {\r\n\t\t\tthis.polygon.points = this.series.chart.projection.projectGeoArea(this.multiGeoPolygon);\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center latitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Center latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.north + (dataItem.south - dataItem.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center longitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Center longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.east + (dataItem.west - dataItem.east) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Not 100% sure about this, as if we add something to MapPolygon this\r\n\t * won't be true, but otherwise we will get all 0 and the tooltip won't\r\n\t * be positioned properly\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Element's width in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get pixelWidth(): number {\r\n\t\treturn this.polygon.pixelWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's height in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get pixelHeight(): number {\r\n\t\treturn this.polygon.pixelHeight;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygon\"] = MapPolygon;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygon.ts","/**\r\n * Map line series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapLineDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapLineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapLineSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t *\r\n\t * @type {MapLine}\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line.\r\n\t *\r\n\t * @type {number[][]}\r\n\t */\r\n\tprotected _line: number[][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line.\r\n\t *\r\n\t * @type {number[][][]}\r\n\t */\r\n\tprotected _multiLine: number[][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line.\r\n\t *\r\n\t * @type {IGeoPoint[]}\r\n\t */\r\n\tprotected _geoLine: IGeoPoint[];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-segment line.\r\n\t *\r\n\t * @type {IGeoPoint[][]}\r\n\t */\r\n\tprotected _multiGeoLine: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {MapLineSeries}\r\n\t */\r\n\tpublic _component!: MapLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return {MapLine} Element\r\n\t */\r\n\tpublic get mapLine(): this[\"_mapLine\"] {\r\n\t\tif (!this._mapLine) {\r\n\t\t\tlet mapLine = this.component.mapLines.create();\r\n\r\n\t\t\tthis._mapLine = mapLine;\r\n\t\t\tthis.addSprite(mapLine);\r\n\r\n\t\t\tthis._disposers.push(mapLine);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.mapLines.removeValue(mapLine);\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._mapLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [ 100, 150 ],\r\n\t *   [ 120, 200 ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][]}  line  Coordinates\r\n\t */\r\n\tpublic set line(line: number[][]) {\r\n\t\tthis._line = line;\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo([line]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get line(): number[][] {\r\n\t\treturn this._line;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ]\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 100 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][]}  multiLine  Coordinates\r\n\t */\r\n\tpublic set multiLine(multiLine: number[][][]) {\r\n\t\tthis._multiLine = multiLine;\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get multiLine(): number[][][] {\r\n\t\treturn this._multiLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   { longitude: 3.121, latitude: 0.58 },\r\n\t *   { longitude: -5.199, latitude: 21.223 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.4} GeoJSON LineString reference\r\n\t * @param {IGeoPoint[][]}  geoLine  Coordinates\r\n\t */\r\n\tpublic set geoLine(geoLine: IGeoPoint[]) {\r\n\t\tthis._geoLine = geoLine;\r\n\t\tthis.multiGeoLine = [geoLine];\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get geoLine(): IGeoPoint[] {\r\n\t\treturn this._geoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     { longitude: 3.121, latitude: 0.58 },\r\n\t *     { longitude: -5.199, latitude: 21.223 }\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     { longitude: -5.199, latitude: 21.223 },\r\n\t *     { longitude: -12.9, latitude: 25.85 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n\t * @param {IGeoPoint[][]}  multiGeoLine  Coordinates\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tthis._multiGeoLine = multiGeoLine;\r\n\t\tthis.updateLineExtremes(multiGeoLine);\r\n\t\tthis.mapLine.multiGeoLine = this._multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\treturn this._multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateLineExtremes(multiGeoLine: IGeoPoint[][]): void {\r\n\t\tfor (let i = 0, len = multiGeoLine.length; i < len; i++) {\r\n\t\t\tlet geoLine: IGeoPoint[] = multiGeoLine[i];\r\n\t\t\tthis.updateExtremes(geoLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds line data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tline?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds line data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoLine?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineSeriesAdapters extends IMapSeriesAdapters, IMapLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map line series.\r\n *\r\n * @see {@link IMapLineSeriesEvents} for a list of available Events\r\n * @see {@link IMapLineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapLineSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapLineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapLineSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @type {MapLine}\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A list of map lins in the series.\r\n\t *\r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapLines: ListTemplate<this[\"_mapLine\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiLine = \"multiLine\";\r\n\t\tthis.dataFields.line = \"line\";\r\n\r\n\t\tthis.dataFields.geoLine = \"geoLine\";\r\n\t\tthis.dataFields.multiGeoLine = \"multiGeoLine\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.mapLines.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"LineString\" || type == \"MultiLineString\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"MultiLineString\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapLineDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiLineString: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiLineString) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiLineString = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t\t// important! this should go after super\r\n\t\t// if data is parsed in chunks, lines list is corrupted, fix it here\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapLines.moveValue(dataItem.mapLine);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of lines in the series.\r\n\t *\r\n\t * @return {ListTemplate} Lines\r\n\t */\r\n\tpublic get mapLines(): ListTemplate<this[\"_mapLine\"]> {\r\n\r\n\t\tif (!this._mapLines) {\r\n\t\t\tlet lineTemplate: MapLine = this.createLine();\r\n\t\t\tlet mapLines = new ListTemplate<MapLine>(lineTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapLines));\r\n\t\t\tthis._disposers.push(mapLines.template);\r\n\t\t\tmapLines.events.on(\"inserted\", this.handleObjectAdded, this);\r\n\t\t\tthis._mapLines = mapLines;\r\n\t\t}\r\n\r\n\t\treturn this._mapLines;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return {MapLine} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapLine();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapLines.iterator(), (mapLine) => {\r\n\t\t\tmapLine.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapLines.template.copyFrom(source.mapLines.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineSeries\"] = MapLineSeries;\r\nregistry.registeredClasses[\"MapLineSeriesDataItem\"] = MapLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineSeries.ts","/**\r\n * A module for the mini-map control.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SmallMap]].\r\n */\r\nexport interface ISmallMapProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SmallMap]].\r\n */\r\nexport interface ISmallMapEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SmallMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISmallMapAdapters extends IContainerAdapters, ISmallMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SmallMap extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {SmallMaPproperties}\r\n\t */\r\n\tpublic _properties!: ISmallMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ISmallMapAdapters}\r\n\t */\r\n\tpublic _adapter!: ISmallMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ISmallMapEvents}\r\n\t */\r\n\tpublic _events!: ISmallMapEvents;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A container that holds the visual elements for the mini-map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * The rectangle element which highlights current viewport.\r\n\t *\r\n\t * @type {Rectangle}\r\n\t */\r\n\tpublic rectangle: Rectangle;\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @type {List<MapSeries>}\r\n\t */\r\n\tprotected _series: List<MapSeries>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SmallMap\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.align = \"left\";\r\n\t\tthis.valign = \"bottom\";\r\n\t\tthis.percentHeight = 20;\r\n\t\tthis.percentWidth = 20;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set background defailts\r\n\t\tthis.background.fillOpacity = 0.9;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"hit\", this.moveToPosition, this);\r\n\t\tthis.events.on(\"maxsizechanged\", this.updateMapSize, this);\r\n\r\n\t\t// Create a container\r\n\t\tthis.seriesContainer = this.createChild(Container);\r\n\t\tthis.seriesContainer.shouldClone = false;\r\n\r\n\t\t// Create an outline rectangle\r\n\t\tlet rectangle: Rectangle = this.createChild(Rectangle);\r\n\t\trectangle.shouldClone = false;\r\n\t\trectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\trectangle.strokeWidth = 1;\r\n\t\trectangle.strokeOpacity = 0.5;\r\n\t\trectangle.fill = color(); //\"none\";\r\n\t\trectangle.verticalCenter = \"middle\";\r\n\t\trectangle.horizontalCenter = \"middle\";\r\n\t\trectangle.isMeasured = false;\r\n\t\tthis.rectangle = rectangle;\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<MapSeries>} Series\r\n\t */\r\n\tpublic get series(): List<MapSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<MapSeries>();\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<MapSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<MapSeries>[\"inserted\"]) {\r\n\t\tlet series: MapSeries = event.newValue;\r\n\t\tif (this.chart.series.contains(series)) {\r\n\t\t\tlet newSeries = series.clone();\r\n\t\t\tthis._series.removeValue(series);\r\n\t\t\tthis._series.push(newSeries);\r\n\t\t\tseries = newSeries;\r\n\r\n\t\t\tthis.chart.dataUsers.push(newSeries);\r\n\t\t}\r\n\t\tseries.chart = this.chart;\r\n\t\tseries.parent = this.seriesContainer;\r\n\t\tseries.interactionsEnabled = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<MapSeries>[\"removed\"]) {\r\n\t\t//let sourceSeries: MapSeries = event.oldValue;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Moves main map pan position after click on the small map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic moveToPosition(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tlet svgPoint: IPoint = event.svgPoint;\r\n\t\tlet rectPoint: IPoint = $utils.svgPointToSprite(svgPoint, this.rectangle);\r\n\r\n\t\tlet zoomLevel: number = this.chart.zoomLevel;\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\tlet x: number = (rectPoint.x + this.rectangle.pixelWidth / 2) / scale * zoomLevel;\r\n\t\tlet y: number = (rectPoint.y + this.rectangle.pixelHeight / 2) / scale * zoomLevel;\r\n\r\n\t\tlet geoPoint: IGeoPoint = this.chart.svgPointToGeo({ x: x, y: y });\r\n\r\n\t\tthis.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart/map that this control is meant for.\r\n\t *\r\n\t * @param {MapChart}  chart  Chart/map\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tif (this.chart != chart) {\r\n\t\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"mappositionchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"scaleratiochanged\", this.updateMapSize, this)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Chart/map\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the viewport recangle as per current map zoom/pan position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRectangle(): void {\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet zoomLevel: number = chart.zoomLevel;\r\n\t\tlet rectangle: Rectangle = this.rectangle;\r\n\r\n\t\trectangle.width = this.pixelWidth / zoomLevel;\r\n\t\trectangle.height = this.pixelHeight / zoomLevel;\r\n\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\r\n\t\tlet seriesContainer: Container = chart.seriesContainer;\r\n\r\n\t\tlet x: number = Math.ceil((zoomLevel * seriesContainer.pixelWidth / 2 - seriesContainer.pixelX) * scale / zoomLevel + rectangle.pixelWidth / 2);\r\n\t\tlet y: number = Math.ceil((zoomLevel * seriesContainer.pixelHeight / 2 - seriesContainer.pixelY) * scale / zoomLevel + rectangle.pixelHeight / 2);\r\n\r\n\t\trectangle.x = x;\r\n\t\trectangle.y = y;\r\n\t}\r\n\r\n\t/**\r\n\t * Update map size so that internal elements can redraw themselves after\r\n\t * the size of the small map changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateMapSize(): void {\r\n\t\tif (this.chart) {\r\n\t\t\tthis.seriesContainer.scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\t\tthis.afterDraw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update elements after drawing the small map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n\t\tthis.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\r\n\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/SmallMap.ts","/**\r\n * Map spline module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { MapSplineSeriesDataItem, MapSplineSeries } from \"./MapSplineSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapSpline]].\r\n */\r\nexport interface IMapSplineProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSpline]].\r\n */\r\nexport interface IMapSplineEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSpline]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineAdapters extends IMapLineAdapters, IMapSplineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a spline on the map.\r\n *\r\n * @see {@link IMapSplineEvents} for a list of available events\r\n * @see {@link IMapSplineAdapters} for a list of available Adapters\r\n */\r\nexport class MapSpline extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapSplineProperties}\r\n\t */\r\n\tpublic _properties!: IMapSplineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapSplineAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapSplineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapSplineEvents}\r\n\t */\r\n\tpublic _events!: IMapSplineEvents;\r\n\r\n\t/**\r\n\t * A visual element for the spline.\r\n\t *\r\n\t * @type {Polyspline}\r\n\t */\r\n\tpublic line: Polyspline;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @type {MapSplineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapSplineSeries}\r\n\t */\r\n\tpublic series: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSpline\";\r\n\r\n\t\t// Create a spline\r\n\t\tthis.line = new Polyspline();\r\n\t\tthis.line.tensionX = 0.8;\r\n\t\tthis.line.tensionY = 0.8;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ShortestDistance = true is not supported by MapSpline, only MapLine does support it\r\n\t * @default false\r\n\t * @param {boolean}  value\r\n\t * @todo: review description\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSpline\"] = MapSpline;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSpline.ts","/**\r\n * Map arched line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Polyarc } from \"../../core/elements/Polyarc\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { MapArcSeries } from \"./MapArcSeries\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapArc]].\r\n */\r\nexport interface IMapArcProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArc]].\r\n */\r\nexport interface IMapArcEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArc]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcAdapters extends IMapLineAdapters, IMapArcProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw an arched line on the map.\r\n *\r\n * @see {@link IMapArcEvents} for a list of available events\r\n * @see {@link IMapArcAdapters} for a list of available Adapters\r\n */\r\nexport class MapArc extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapArcProperties}\r\n\t */\r\n\tpublic _properties!: IMapArcProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapArcAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapArcAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapArcEvents}\r\n\t */\r\n\tpublic _events!: IMapArcEvents;\r\n\r\n\t/**\r\n\t * A visual element.\r\n\t *\r\n\t * @type {Polyarc}\r\n\t */\r\n\tpublic line: Polyarc;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapArcSeries}\r\n\t */\r\n\tpublic series: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArc\";\r\n\r\n\t\t// Create a line\r\n\t\tthis.line = new Polyarc();\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ShortestDistance = true is not supported by MapArc, only MapLine does support it\r\n\t * @default false\r\n\t * @param {boolean}  value\r\n\t * @todo: review description\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArc\"] = MapArc;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArc.ts","/**\r\n * Zoom control module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomControl]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomControlAdapters extends IContainerAdapters, IZoomControlProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ZoomControl extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IZoomControlProperties}\r\n\t */\r\n\tpublic _properties!: IZoomControlProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IZoomControlAdapters}\r\n\t */\r\n\tpublic _adapter!: IZoomControlAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IZoomControlEvents}\r\n\t */\r\n\tpublic _events!: IZoomControlEvents;\r\n\r\n\t/**\r\n\t * Zoom in button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic plusButton: Button;\r\n\r\n\t/**\r\n\t * Zoom out button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic minusButton: Button;\r\n\r\n\t/**\r\n\t * A zoom slider background element.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic slider: Container;\r\n\r\n\t/**\r\n\t * A zoom slider thumb element.\r\n\t * @type {Button}\r\n\t */\r\n\tpublic thumb: Button;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A type to use for the background element for zoom control.\r\n\t *\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ZoomControl\";\r\n\r\n\t\tthis.align = \"right\";\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tthis.layout = \"vertical\";\r\n\t\tthis.padding(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet plusButton: Button = this.createChild(Button);\r\n\t\tplusButton.shouldClone = false;\r\n\t\tplusButton.label.text = \"+\";\r\n\t\tplusButton.width = percent(100);\r\n\t\tplusButton.padding(5, 5, 5, 5);\r\n\t\tplusButton.fontFamily = \"Verdana\";\r\n\t\tthis.plusButton = plusButton;\r\n\r\n\t\tlet slider: Container = this.createChild(Container);\r\n\t\tslider.shouldClone = false;\r\n\t\tslider.width = percent(100);\r\n\t\tslider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tslider.background.fillOpacity = 0.05;\r\n\t\tslider.background.events.on(\"hit\", this.handleBackgroundClick, this);\r\n\t\tslider.events.on(\"sizechanged\", this.updateThumbSize, this);\r\n\t\tthis.slider = slider;\r\n\r\n\t\tlet thumb: Button = slider.createChild(Button);\r\n\t\tthumb.shouldClone = false;\r\n\t\tthumb.padding(0, 0, 0, 0);\r\n\t\tthumb.draggable = true;\r\n\t\tthumb.events.on(\"drag\", this.handleThumbDrag, this);\r\n\t\tthis.thumb = thumb;\r\n\r\n\t\tlet minusButton: Button = this.createChild(Button);\r\n\t\tminusButton.shouldClone = false;\r\n\t\tminusButton.label.text = \"-\";\r\n\t\tminusButton.padding(5, 5, 5, 5);\r\n\t\tminusButton.fontFamily = \"Verdana\";\r\n\t\tthis.minusButton = minusButton;\r\n\r\n\t\t// Set roles\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\r\n\t\t// Set reader text\r\n\t\tthis.thumb.readerTitle = this.language.translate(\"Use arrow keys to zoom in and out\");\r\n\t\tthis.minusButton.readerTitle = this.language.translate(\"Press ENTER to zoom in\");\r\n\t\tthis.plusButton.readerTitle = this.language.translate(\"Press ENTER to zoom out\");\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property == \"layout\") {\r\n\t\t\t\tthis.fixLayout();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\tprotected fixLayout() {\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tthis.width = 40;\r\n\t\t\tthis.height = undefined;\r\n\t\t\tthis.minusButton.width = percent(100);\r\n\t\t\tthis.thumb.width = percent(100);\r\n\t\t\tthis.plusButton.width = percent(100);\r\n\t\t\tthis.slider.width = percent(100);\r\n\t\t\tthis.minusButton.marginTop = 1;\r\n\t\t\tthis.plusButton.marginBottom = 2;\r\n\t\t\tthis.slider.height = 0;\r\n\t\t\tthis.minusButton.toFront();\r\n\t\t\tthis.plusButton.toBack();\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.maxX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t}\r\n\t\telse if (this.layout == \"horizontal\") {\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t\tthis.thumb.maxY = 0;\r\n\t\t\tthis.height = 40;\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.minusButton.height = percent(100);\r\n\t\t\tthis.minusButton.width = 30;\r\n\t\t\tthis.thumb.height = percent(100);\r\n\t\t\tthis.thumb.width = undefined;\r\n\t\t\tthis.plusButton.height = percent(100);\r\n\t\t\tthis.plusButton.width = 30;\r\n\t\t\tthis.slider.height = percent(100);\r\n\t\t\tthis.slider.width = 0;\r\n\t\t\tthis.minusButton.marginLeft = 2;\r\n\t\t\tthis.plusButton.marginRight = 2;\r\n\t\t\tthis.minusButton.toBack();\r\n\t\t\tthis.plusButton.toFront();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles zoom operation after clicking on the slider background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic handleBackgroundClick(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\tlet sprite: Sprite = event.target;\r\n\t\tlet y: number = event.spritePoint.y;\r\n\t\tlet chart: MapChart = this.chart;\r\n\r\n\t\tlet maxPower: number = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n\t\tlet minPower: number = Math.log(chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tlet power: number = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n\t\tlet zoomLevel: number = Math.pow(2, power);\r\n\t\tchart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n\t}\r\n\r\n\t/**\r\n\t * A main chart/map that this zoom control is for.\r\n\t *\r\n\t * @param {MapChart}  chart  Map/chart\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\tchart.events.on(\"maxsizechanged\", this.updateThumbSize, this),\r\n\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateThumb, this),\r\n\t\t\tthis.minusButton.events.on(\"hit\", () => { chart.zoomOut(chart.zoomGeoPoint) }, chart),\r\n\t\t\tgetInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (this.topParent.hasFocused) {\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\t\tif (this.minusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomOut()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (this.plusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomIn()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"plus\")) {\r\n\t\t\t\t\t\tchart.zoomIn();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"minus\")) {\r\n\t\t\t\t\t\tchart.zoomOut();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, chart),\r\n\t\t\tthis.plusButton.events.on(\"hit\", () => { chart.zoomIn(chart.zoomGeoPoint) }, chart)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Map/chart\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the slider's thumb size based on the available zoom space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumbSize(): void {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet slider: Container = this.slider;\r\n\t\t\tlet thumb: Button = this.thumb;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n\r\n\t\t\t\tthumb.height = slider.pixelHeight / this.stepCount;\r\n\t\t\t\tthumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n\r\n\t\t\t\tif (thumb.pixelHeight <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n\t\t\t\tthumb.width = slider.pixelWidth / this.stepCount;\r\n\t\t\t\tthumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n\r\n\t\t\t\tif (thumb.pixelWidth <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates thumb according to current zoom position from map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumb(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\r\n\t\tif (!thumb.isDown) {\r\n\t\t\tlet step: number = (Math.log(chart.zoomLevel) - Math.log(this.chart.minZoomLevel)) / Math.LN2;\r\n\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * step / this.stepCount - thumb.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.x = slider.pixelWidth * step / this.stepCount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the actual map when slider position changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbDrag(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\t\tlet step: number;\r\n\r\n\t\tlet minStep = Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tstep = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstep = this.stepCount * thumb.pixelX / slider.pixelWidth;\r\n\t\t}\r\n\t\tstep = minStep + step;\r\n\r\n\t\tlet zoomLevel: number = Math.pow(2, step);\r\n\t\tchart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the step countfor the slider grid according to map's min and max\r\n\t * zoom level settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Step count\r\n\t */\r\n\tpublic get stepCount(): number {\r\n\t\treturn Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for slider control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {this} Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/ZoomControl.ts","import * as m from \"../es2015/maps\";\nwindow.am4maps = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./maps.js\n// module id = 551\n// module chunks = 5","/**\n * Duplicated\n */\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Maps\n */\nexport { MapChartDataItem, IMapPolygonDataObject, MapLineType, IMapLineDataObject, IMapImageDataObject, IMapDataObject, IMapChartDataFields, IMapChartProperties, IMapChartEvents, IMapChartAdapters, MapChart } from \"./.internal/charts/types/MapChart\";\nexport { MapSeriesDataItem, GEOJSONGeometry, IMapSeriesDataFields, IMapSeriesProperties, IMapSeriesEvents, IMapSeriesAdapters, MapSeries } from \"./.internal/charts/map/MapSeries\";\nexport { IMapObjectProperties, IMapObjectEvents, IMapObjectAdapters, MapObject } from \"./.internal/charts/map/MapObject\";\nexport { IMapPolygonProperties, IMapPolygonEvents, IMapPolygonAdapters, MapPolygon } from \"./.internal/charts/map/MapPolygon\";\nexport { IMapImageProperties, IMapImageEvents, IMapImageAdapters, MapImage } from \"./.internal/charts/map/MapImage\";\nexport { IMapLineProperties, IMapLineEvents, IMapLineAdapters, MapLine } from \"./.internal/charts/map/MapLine\";\nexport { IMapSplineProperties, IMapSplineEvents, IMapSplineAdapters, MapSpline } from \"./.internal/charts/map/MapSpline\";\nexport { IMapArcProperties, IMapArcEvents, IMapArcAdapters, MapArc } from \"./.internal/charts/map/MapArc\";\nexport { MapPolygonSeriesDataItem, IMapPolygonSeriesDataFields, IMapPolygonSeriesProperties, IMapPolygonSeriesEvents, IMapPolygonSeriesAdapters, MapPolygonSeries } from \"./.internal/charts/map/MapPolygonSeries\";\nexport { MapLineSeriesDataItem, IMapLineSeriesDataFields, IMapLineSeriesProperties, IMapLineSeriesEvents, IMapLineSeriesAdapters, MapLineSeries } from \"./.internal/charts/map/MapLineSeries\";\nexport { MapSplineSeriesDataItem, IMapSplineSeriesDataFields, IMapSplineSeriesProperties, IMapSplineSeriesEvents, IMapSplineSeriesAdapters, MapSplineSeries } from \"./.internal/charts/map/MapSplineSeries\";\nexport { MapImageSeriesDataItem, IMapImageSeriesDataFields, IMapImageSeriesProperties, IMapImageSeriesEvents, IMapImageSeriesAdapters, MapImageSeries } from \"./.internal/charts/map/MapImageSeries\";\nexport { MapArcSeriesDataItem, IMapArcSeriesDataFields, IMapArcSeriesProperties, IMapArcSeriesEvents, IMapArcSeriesAdapters, MapArcSeries } from \"./.internal/charts/map/MapArcSeries\";\nexport { multiPolygonToGeo, multiLineToGeo, multiPointToGeo, pointToGeo } from \"./.internal/charts/map/MapUtils\";\nexport { IZoomControlProperties, IZoomControlEvents, IZoomControlAdapters, ZoomControl } from \"./.internal/charts/map/ZoomControl\";\nexport { ISmallMapProperties, ISmallMapEvents, ISmallMapAdapters, SmallMap } from \"./.internal/charts/map/SmallMap\";\n\n/**\n * Elements: projections\n */\nexport { Projection } from \"./.internal/charts/map/projections/Projection\";\nimport * as projections from \"./.internal/charts/map/projections\";\nexport { projections };\nimport * as geo from \"./.internal/charts/map/Geo\";\nexport { geo };\n\n\n\n// WEBPACK FOOTER //\n// ../../src/maps.ts","/**\r\n * Map module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, MultiDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { MapSeries } from \"../map/MapSeries\";\r\nimport { MapObject } from \"../map/MapObject\";\r\nimport { MapImage } from \"../map/MapImage\";\r\nimport { MapPolygon } from \"../map/MapPolygon\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { DataSource } from \"../../core/data/DataSource\";\r\nimport { Projection } from \"../map/projections/Projection\";\r\nimport { ZoomControl } from \"../map/ZoomControl\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { SmallMap } from \"../map/SmallMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $geo from \"../map/Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic _component!: MapChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines interface for a map polygon object.\r\n */\r\nexport interface IMapPolygonDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single polygon information in X/Y coordinates.\r\n\t */\r\n\tpolygon?: number[][][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in X/Y coordinates.\r\n\t */\r\n\tmultiPolygon?: number[][][][];\r\n\r\n\t/**\r\n\t * Single polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPolygon?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n}\r\n\r\n/**\r\n * Defines types of map line.\r\n *\r\n * @type {string}\r\n */\r\nexport type MapLineType = \"line\" | \"arc\" | \"spline\" | \"realTrajectory\";\r\n\r\n/**\r\n * Defines interface for the map line object.\r\n */\r\nexport interface IMapLineDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single line information in X/Y coordinates.\r\n\t */\r\n\tlineString?: number[][];\r\n\r\n\t/**\r\n\t * Multi-part line information in X/Y coordinates.\r\n\t */\r\n\tmultiLineString?: number[][][];\r\n\r\n\t/**\r\n\t * Single line information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoLineString?: IGeoPoint[];\r\n\r\n\t/**\r\n\t * Multi-part line information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoLineString?: IGeoPoint[][];\r\n\r\n}\r\n\r\n/**\r\n * Defines interface for a map image (market) object.\r\n */\r\nexport interface IMapImageDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Image position information in X/Y coordinates.\r\n\t */\r\n\tpoint?: number[];\r\n\r\n\t/**\r\n\t * Multi-image position information in X/Y coordinates.\r\n\t */\r\n\tmultiPoint?: number[][];\r\n\r\n\t/**\r\n\t * Image position information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPoint?: IGeoPoint;\r\n\r\n\t/**\r\n\t * Multi-image position information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPoint?: IGeoPoint[];\r\n\r\n}\r\n\r\n/**\r\n * Defines type suitable for all map objects.\r\n *\r\n * @type {IMapPolygonDataObject | IMapLineDataObject}\r\n */\r\nexport type IMapDataObject = IMapPolygonDataObject | IMapLineDataObject;\r\n\r\n/**\r\n * Defines data fields for [[MapChart]].\r\n */\r\nexport interface IMapChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapChart]].\r\n */\r\nexport interface IMapChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Projection to be used when drawing the map.\r\n\t *\r\n\t * @type {Projection}\r\n\t */\r\n\tprojection?: Projection;\r\n\r\n\t/**\r\n\t * Degrees to shift map center by.\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdeltaLongitude?: number;\r\n\r\n\tmaxPanOut?: number;\r\n\r\n\thomeGeoPoint?: IGeoPoint;\r\n\r\n\thomeZoomLevel?: number;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t */\r\n\tmouseWheelBehavior?: \"zoom\" | \"none\";\r\n}\r\n\r\n/**\r\n * Defines events for [[MapChart]].\r\n */\r\nexport interface IMapChartEvents extends ISerialChartEvents {\r\n\r\n\t/**\r\n\t * Invoked when map is zoomed in or out.\r\n\t */\r\n\tzoomlevelchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when map is panned. (moved)\r\n\t */\r\n\tmappositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when scale ratio is changed, e.g when the whole map area is\r\n\t * resized and the map needs to be resized to fit it, without changing\r\n\t * zoom level.\r\n\t */\r\n\tscaleratiochanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapChartAdapters extends ISerialChartAdapters, IMapChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a map.\r\n *\r\n * @see {@link IMapChartEvents} for a list of available Events\r\n * @see {@link IMapChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/} for documentation\r\n */\r\nexport class MapChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @type {IMapChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapChartProperties}\r\n\t */\r\n\tpublic _properties!: IMapChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapChartEvents}\r\n\t */\r\n\tpublic _events!: IMapChartEvents;\r\n\r\n\t/**\r\n\t * The East-most longitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * The West-most longitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * The South-most latitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * The North-most latitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * A ratio to be used when scaling the map shapes.\r\n\t *\r\n\t * @readonly\r\n\t * @type {number}\r\n\t */\r\n\tpublic scaleRatio: number = 1;\r\n\r\n\t/**\r\n\t * A screen point of the map's center.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic centerPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's left.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic westPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's right.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic eastPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's top.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic northPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's bottom.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic southPoint: IPoint;\r\n\r\n\t/**\r\n\t * Geo point of map center\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic centerGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Width of the actual map objects (px).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic seriesWidth: number;\r\n\r\n\t/**\r\n\t * Height of the actual map objects (px).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic seriesHeight: number;\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * @see {@link http://geojson.org/} GeoJSON official specification\r\n\t * @type {Object}\r\n\t */\r\n\tprotected _geodata: Object;\r\n\r\n\t/**\r\n\t * A reference to a [[ZoomControl]] instance.\r\n\t *\r\n\t * @type {ZoomControl}\r\n\t */\r\n\tprotected _zoomControl: ZoomControl;\r\n\r\n\t/**\r\n\t * A reference to a [[SmallMap]] control instance.\r\n\t *\r\n\t * @type {SmallMap}\r\n\t */\r\n\tprotected _smallMap: SmallMap;\r\n\r\n\t/**\r\n\t * [_zoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _zoomGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Default duration of zoom animations (ms).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic zoomDuration: number = 1000;\r\n\r\n\t/**\r\n\t * Default zooming animation easing function.\r\n\t *\r\n\t * @type {function}\r\n\t */\r\n\tpublic zoomEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Smallest available zoom level. The map will not allow to zoom out past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @defautl 1\r\n\t * @type {number}\r\n\t */\r\n\tpublic minZoomLevel: number = 1;\r\n\r\n\t/**\r\n\t * Biggest available zoom level. The map will not allow to zoom in past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 32\r\n\t * @type {number}\r\n\t */\r\n\tpublic maxZoomLevel: number = 32;\r\n\r\n\t/**\r\n\t * [_prevZoomLevel description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _prevZoomLevel: number;\r\n\r\n\t/**\r\n\t * [_prevZoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _prevZoomGeoPoint: IGeoPoint = { latitude: 0, longitude: 0 };\r\n\r\n\t/**\r\n\t * List of series of map objects. (lines, areas, etc.)\r\n\t *\r\n\t * @type {ListTemplate<MapSeries>}\r\n\t */\r\n\tpublic series: ListTemplate<MapSeries>;\r\n\r\n\t/**\r\n\t * A reference to currently playing animation, e.g. zooming.\r\n\t *\r\n\t * @type {Animation}\r\n\t */\r\n\tprotected _mapAnimation: Animation;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\tprotected _zoomGeoPointReal: IGeoPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChart\";\r\n\r\n\t\t// Set default projection\r\n\t\tthis.projection = new Projection();\r\n\r\n\t\tthis.deltaLongitude = 0;\r\n\t\tthis.maxPanOut = 0.7;\r\n\t\tthis.homeZoomLevel = 1;\r\n\r\n\t\t// Set padding\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\t// so that the map would render in a hidden div too\r\n\t\tthis.minWidth = 10;\r\n\t\tthis.minHeight = 10;\r\n\r\n\t\t// Create a container for map series\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.draggable = true;\r\n\t\tseriesContainer.inert = true;\r\n\t\tseriesContainer.resizable = true;\r\n\t\tseriesContainer.events.on(\"transformed\", this.handleMapTransform, this);\r\n\t\tseriesContainer.events.on(\"doublehit\", this.handleDoubleHit, this);\r\n\t\tseriesContainer.events.on(\"drag\", this.handleDrag, this);\r\n\t\tseriesContainer.zIndex = 0;\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"validated\", this.updateExtremes, this);\r\n\t\tthis.events.on(\"datavalidated\", this.updateExtremes, this);\r\n\r\n\t\t// Set up main chart container, e.g. set backgrounds and events to monitor\r\n\t\t// size changes, etc.\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tthis._disposers.push(seriesContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this._mapAnimation) {\r\n\t\t\t\tthis._mapAnimation.stop();\r\n\t\t\t}\r\n\t\t\tthis.updateScaleRatio();\r\n\t\t\tthis.zoomToGeoPoint(this._zoomGeoPointReal, this.zoomLevel, true, 0);\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.updateTooltipBounds();\r\n\t\t\t})\r\n\t\t}));\r\n\r\n\t\tlet chartContainerBg = chartContainer.background;\r\n\t\tchartContainerBg.fillOpacity = 0;\r\n\t\tchartContainerBg.events.on(\"down\", (e) => { this.seriesContainer.dragStart(e.target.interactions.downPointers.getIndex(0)); }, this);\r\n\t\tchartContainerBg.events.on(\"up\", (e) => { this.seriesContainer.dragStop() }, this);\r\n\t\tchartContainerBg.events.on(\"doublehit\", this.handleDoubleHit, this);\r\n\t\tchartContainerBg.focusable = true;\r\n\r\n\t\tchartContainer.events.on(\"down\", this.handleMapDown, this);\r\n\r\n\t\t// Add description to background\r\n\t\tthis.background.fillOpacity = 0;\r\n\t\tthis.background.readerTitle = this.language.translate(\"Use plus and minus keys on your keyboard to zoom in and out\");\r\n\r\n\t\t// Add keyboard events for panning\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\tif (this.topParent.hasFocused && (!this._zoomControl || !this._zoomControl.thumb.isFocused)) {\r\n\t\t\t\tswitch (keyboard.getEventKey(ev.event)) {\r\n\t\t\t\t\tcase \"up\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: 0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"down\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: -0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"left\":\r\n\t\t\t\t\t\tthis.pan({ x: 0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"right\":\r\n\t\t\t\t\t\tthis.pan({ x: -0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\tthis.mouseWheelBehavior = \"zoom\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Prevents map to be dragged out of the container area\r\n\t * @ignore\r\n\t */\r\n\tprotected handleDrag() {\r\n\t\t// not good doing it with adapters.\r\n\t\tlet ww = this.seriesWidth * this.zoomLevel * this.scaleRatio;\r\n\t\tlet hh = this.seriesHeight * this.zoomLevel * this.scaleRatio;\r\n\t\tlet x = this.seriesContainer.pixelX;\r\n\t\tlet y = this.seriesContainer.pixelY;\r\n\r\n\t\tlet maxPanOut = this.maxPanOut;\r\n\r\n\t\tlet minX = Math.min(this.maxWidth * (1 - maxPanOut) - ww / 2, -ww * (maxPanOut - 0.5));\r\n\t\tif (x < minX) {\r\n\t\t\tx = minX;\r\n\t\t}\r\n\r\n\t\tlet maxX = Math.max(this.maxWidth * maxPanOut + ww / 2, this.maxWidth + ww * (maxPanOut - 0.5));\r\n\t\tif (x > maxX) {\r\n\t\t\tx = maxX;\r\n\t\t}\r\n\r\n\r\n\t\tlet minY = Math.min(this.maxHeight * (1 - maxPanOut) - hh / 2, -hh * (maxPanOut - 0.5));\r\n\t\tif (y < minY) {\r\n\t\t\ty = minY;\r\n\t\t}\r\n\r\n\t\tlet maxY = Math.max(this.maxHeight * maxPanOut + hh / 2, this.maxHeight + hh * (maxPanOut - 0.5));\r\n\t\tif (y > maxY) {\r\n\t\t\ty = maxY;\r\n\t\t}\r\n\r\n\t\tthis.seriesContainer.moveTo({ x: x, y: y }, undefined, undefined, true);\r\n\r\n\t\tthis._zoomGeoPointReal = this.zoomGeoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Map\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles event when a pointer presses down on the map, e.g. user presses\r\n\t * down mouse or touches the map on a screen.\r\n\t *\r\n\t * Stops all animations currently going on.\r\n\t */\r\n\tprotected handleMapDown(): void {\r\n\t\tif (this._mapAnimation) {\r\n\t\t\tthis._mapAnimation.stop();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the event when user doubleclicks or dooubletaps the map: zooms\r\n\t * in on the reference point.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"doublehit\"]}  event  Original event\r\n\t */\r\n\tprotected handleDoubleHit(event: AMEvent<Sprite, ISpriteEvents>[\"doublehit\"]) {\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\t\tthis.zoomIn(geoPoint);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel event, e.g. user rotates mouse wheel while over the\r\n\t * map: zooms in or out depending on the direction of the wheel turn.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"wheel\"]}  event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\r\n\t\tif (event.shift.y < 0) {\r\n\t\t\tthis.zoomIn(geoPoint);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.zoomOut(geoPoint);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @param {\"zoom\" | \"none\"} mouse wheel behavior\r\n\t * @default zoomX\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoom\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.chartContainer.events.on(\"wheel\", this.handleWheel, this);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t\tthis.chartContainer.wheelable = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return { \"zoom\" | \"none\"}  mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoom\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Projection to use for the map.\r\n\t *\r\n\t * Available projections:\r\n\t * * Eckert6\r\n\t * * Mercator\r\n\t * * Miller\r\n\t * * Orthographic\r\n\t *\r\n\t * ```TypeScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"projection\": \"Mercator\"\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Projection}  projection  Projection\r\n\t */\r\n\tpublic set projection(projection: Projection) {\r\n\t\tprojection.deltaLongitude = this.deltaLongitude;\r\n\t\tthis.setPropertyValue(\"projection\", projection, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Projection} Projection\r\n\t */\r\n\tpublic get projection(): Projection {\r\n\t\treturn this.getPropertyValue(\"projection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the longitudes and latitudes of the most distant points from\r\n\t * the center in all four directions: West, East, North, and South.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateExtremes(): void {\r\n\r\n\t\tthis.west = null;\r\n\t\tthis.east = null;\r\n\t\tthis.north = null;\r\n\t\tthis.south = null;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif ((this.west > series.west) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = series.west;\r\n\t\t\t}\r\n\t\t\tif ((this.east < series.east) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = series.east;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < series.north) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = series.north;\r\n\t\t\t}\r\n\t\t\tif ((this.south > series.south) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = series.south;\r\n\t\t\t}\r\n\t\t});\r\n\t\tif($type.isNumber(this.east) && $type.isNumber(this.north)){\r\n\t\t\t// must reset\r\n\t\t\tthis.projection.centerPoint = { x: 0, y: 0 };\r\n\t\t\tthis.projection.scale = 1;\r\n\r\n\t\t\t// temporary setting deltaLongitude to 0 in order to measure w/h correctly\r\n\t\t\tlet deltaLongitude = this.projection.deltaLongitude;\r\n\t\t\tthis.projection.deltaLongitude = 0;\r\n\t\t\tlet westPoint: IPoint = this.projection.convert({ longitude: this.west, latitude: (this.south - this.north) / 2 });\r\n\t\t\tlet eastPoint: IPoint = this.projection.convert({ longitude: this.east, latitude: (this.south - this.north) / 2 });\r\n\r\n\t\t\tlet northPoint: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.north });\r\n\t\t\tlet southPoint: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.south });\r\n\t\t\tthis.projection.deltaLongitude = deltaLongitude;\r\n\r\n\t\t\tthis.projection.centerPoint = { x: westPoint.x + (eastPoint.x - westPoint.x) / 2, y: northPoint.y + (southPoint.y - northPoint.y) / 2 };\r\n\r\n\t\t\tlet scaleRatio: number;\r\n\r\n\t\t\tlet seriesWidth = eastPoint.x - westPoint.x;\r\n\t\t\tlet seriesHeight = southPoint.y - northPoint.y;\r\n\r\n\t\t\tlet vScale: number = this.chartContainer.innerWidth / seriesWidth;\r\n\t\t\tlet hScale: number = this.chartContainer.innerHeight / seriesHeight;\r\n\r\n\t\t\tif (vScale > hScale) {\r\n\t\t\t\tscaleRatio = hScale;\r\n\t\t\t} else {\r\n\t\t\t\tscaleRatio = vScale;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\t\tscaleRatio = 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.projection.scale = scaleRatio;\r\n\t\t\tthis.seriesWidth = seriesWidth * scaleRatio;\r\n\t\t\tthis.seriesHeight = seriesHeight * scaleRatio;\r\n\r\n\t\t\tthis.updateScaleRatio();\r\n\r\n\t\t\tlet seriesContainer: Container = this.seriesContainer;\r\n\t\t\tlet chartContainer: Container = this.chartContainer;\r\n\r\n\t\t\tseriesContainer.x = chartContainer.pixelWidth / 2;\r\n\t\t\tseriesContainer.y = chartContainer.pixelHeight / 2;\r\n\r\n\t\t\tthis.centerGeoPoint = this.svgPointToGeo({ x: this.measuredWidth / 2, y: this.measuredHeight / 2 });\r\n\r\n\t\t\tthis.goHome();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)calculates a ratio which should be used to scale the actual map so\r\n\t * that it fits perfectly into available space. Helps to avoid redrawing of all the map if container size changes\r\n\t * @ignore\r\n\t */\r\n\tprotected updateScaleRatio(): void {\r\n\t\tlet scaleRatio: number;\r\n\r\n\t\tlet vScale: number = this.chartContainer.innerWidth / this.seriesWidth;\r\n\t\tlet hScale: number = this.chartContainer.innerHeight / this.seriesHeight;\r\n\r\n\t\tif (vScale > hScale) {\r\n\t\t\tscaleRatio = hScale;\r\n\t\t} else {\r\n\t\t\tscaleRatio = vScale;\r\n\t\t}\r\n\r\n\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\tscaleRatio = 1;\r\n\t\t}\r\n\r\n\t\tif (scaleRatio != this.scaleRatio) {\r\n\t\t\tthis.scaleRatio = scaleRatio;\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.scale = this.scaleRatio;\r\n\t\t\t\tseries.updateTooltipBounds();\r\n\t\t\t});\r\n\r\n\t\t\tthis.dispatch(\"scaleratiochanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point within map container to geographical (lat/long)\r\n\t * coordinates.\r\n\t *\r\n\t * @param  {IPoint}     point  Source point\r\n\t * @return {IGeoPoint}         Geo-point\r\n\t */\r\n\tpublic svgPointToGeo(point: IPoint): IGeoPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = $utils.svgPointToSprite(point, series);\r\n\t\t\treturn this.seriesPointToGeo(seriesPoint);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within map's\r\n\t * container.\r\n\t *\r\n\t * @param  {IGeoPoint}  point  Source geo-point\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic geoPointToSVG(point: IGeoPoint): IPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = this.geoPointToSeries(point);\r\n\t\t\treturn $utils.spritePointToSvg(seriesPoint, series);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point (X/Y) within actual objects of the map to geographical\r\n\t * (lat/long) coordinates.\r\n\t *\r\n\t * @param  {IPoint}     point  Source point\r\n\t * @return {IGeoPoint}         Geo-point\r\n\t */\r\n\tpublic seriesPointToGeo(point: IPoint): IGeoPoint {\r\n\t\treturn this.projection.invert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within\r\n\t * actual elements/objects of the maps.\r\n\t *\r\n\t * @param  {IGeoPoint}  point  Source geo-point\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic geoPointToSeries(point: IGeoPoint): IPoint {\r\n\t\treturn this.projection.convert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * The Map supports the following GeoJSON objects: `Point`, `LineString`,\r\n\t * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n\t *\r\n\t * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n\t * @param {Object} geoJSON GeoJSON data\r\n\t */\r\n\tpublic set geodata(geodata: Object) {\r\n\t\tif (geodata != this._geodata) {\r\n\t\t\tthis._geodata = geodata;\r\n\t\t\tthis.invalidateData();\r\n\r\n\t\t\t$iter.each(this._dataUsers.iterator(), (x) => {\r\n\t\t\t\tx.invalidateData();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Object} GeoJSON data\r\n\t */\r\n\tpublic get geodata(): Object {\r\n\t\treturn this._geodata;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to particular zoom level and centers on a latitude/longitude\r\n\t * coordinate.\r\n\t *\r\n\t * @param  {IGeoPoint}  point      Center coordinate\r\n\t * @param  {number}     zoomLevel  Zoom level\r\n\t * @param  {boolean}    center     Center on the given coordinate?\r\n\t * @param  {number}     duration   Duration for zoom animation (ms)\r\n\t * @return {Animation}             Zoom animation\r\n\t */\r\n\tpublic zoomToGeoPoint(point: IGeoPoint, zoomLevel: number, center?: boolean, duration?: number): Animation {\r\n\r\n\t\t//let svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\t//let geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\r\n\r\n\t\tif (!point) {\r\n\t\t\tpoint = this.zoomGeoPoint;\r\n\t\t}\r\n\r\n\t\tif(!point){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._zoomGeoPointReal = point;\r\n\r\n\t\tzoomLevel = $math.fitToRange(zoomLevel, this.minZoomLevel, this.maxZoomLevel);\r\n\r\n\t\tlet seriesPoint: IPoint = this.projection.convert(point);\r\n\r\n\t\tlet svgPoint: IPoint = this.geoPointToSVG(point);\r\n\t\tif (center) {\r\n\t\t\tsvgPoint = {\r\n\t\t\t\tx: this.maxWidth / 2,\r\n\t\t\t\ty: this.maxHeight / 2\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(duration)) {\r\n\t\t\tduration = this.zoomDuration;\r\n\t\t}\r\n\r\n\t\tthis._mapAnimation = this.seriesContainer.animate(\r\n\t\t\t[{\r\n\t\t\t\tproperty: \"scale\",\r\n\t\t\t\tto: zoomLevel\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"x\",\r\n\t\t\t\tto: svgPoint.x - seriesPoint.x * zoomLevel * this.scaleRatio - this.pixelPaddingLeft\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"y\",\r\n\t\t\t\tto: svgPoint.y - seriesPoint.y * zoomLevel * this.scaleRatio - this.pixelPaddingTop\r\n\t\t\t}], duration, this.zoomEasing);\r\n\r\n\t\tthis._disposers.push(this._mapAnimation.events.on(\"animationended\", () => {\r\n\t\t\tthis._zoomGeoPointReal = this.zoomGeoPoint;\r\n\t\t}))\r\n\r\n\t\tthis.seriesContainer.validatePosition();\r\n\r\n\t\treturn this._mapAnimation;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular map object.\r\n\t *\r\n\t * @param  {MapObject}  mapObject  Target map object\r\n\t * @param  {number}     zoomLevel  Zoom level\r\n\t * @param  {boolean}    center     Center on the given coordinate?\r\n\t * @param  {number}     duration   Duration for zoom animation (ms)\r\n\t * @return {Animation}             Zoom animation\r\n\t */\r\n\tpublic zoomToMapObject(mapObject: MapObject, zoomLevel?: number, center?: boolean, duration?: number): Animation {\r\n\r\n\t\tif (center == undefined) {\r\n\t\t\tcenter = true;\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapImage) {\r\n\t\t\tif ($type.isNaN(zoomLevel)) {\r\n\t\t\t\tzoomLevel = 5;\r\n\t\t\t}\r\n\t\t\treturn this.zoomToGeoPoint({ latitude: mapObject.latitude, longitude: mapObject.longitude }, zoomLevel, center, duration);\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapPolygon) {\r\n\t\t\tlet dataItem = mapObject.dataItem;\r\n\t\t\tif ($type.isNumber(zoomLevel)) {\r\n\t\t\t\treturn this.zoomToGeoPoint({ latitude: mapObject.latitude, longitude: mapObject.longitude }, zoomLevel, center, duration);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn this.zoomToRectangle(dataItem.north, dataItem.east, dataItem.south, dataItem.west, null, center, duration);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular viewport.\r\n\t *\r\n\t * The `north`, `east`, `south`, and `west` define boundaries of the\r\n\t * imaginary viewort we want to zoom the map to.\r\n\t *\r\n\t * `level` is not actual zoom level. The map will determine the zoom level\r\n\t * required to accommodated such zoom, and will adjust it by `level` if set.\r\n\t *\r\n\t * @param  {number}     north     Latitude of the North-most boundary\r\n\t * @param  {number}     east      Longitude of the East-most boundary\r\n\t * @param  {number}     south     Latitude of the South-most boundary\r\n\t * @param  {number}     west      Longitude of the West-most boundary\r\n\t * @param  {number}     level     Adjust zoom level\r\n\t * @param  {boolean}    center    Center on the given coordinate?\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomToRectangle(north: number, east: number, south: number, west: number, level?: number, center?: boolean, duration?: number): Animation {\r\n\t\tif ($type.isNaN(level)) {\r\n\t\t\tlevel = 1;\r\n\t\t}\r\n\r\n\t\tlet zoomLevel = level * Math.min((this.south - this.north) / (south - north), (this.west - this.east) / (west - east));\r\n\r\n\t\treturn this.zoomToGeoPoint({ latitude: north + (south - north) / 2, longitude: west + (east - west) / 2 }, zoomLevel, center, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms in the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param  {IGeoPoint}  geoPoint  Optional center point\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomIn(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel * 2, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param  {IGeoPoint}  geoPoint  Optional center point\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomOut(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel / 2, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Pans the maps using relative coordinates. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * {\r\n\t *   x: 0.1,\r\n\t *   y: -0.1\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will move the map by 10% to the right, and by 10% upwards.\r\n\t *\r\n\t * @param {IPoint}  shift     Vertical and horizontal shift\r\n\t * @param {number}  duration  Pan animation duration (ms)\r\n\t */\r\n\tpublic pan(shift: IPoint, duration?: number): void {\r\n\t\tlet point = this.geoPointToSVG(this.zoomGeoPoint);\r\n\t\tpoint.x += this.pixelWidth * shift.x;\r\n\t\tpoint.y += this.pixelHeight * shift.y;\r\n\t\tthis.zoomToGeoPoint(this.svgPointToGeo(point), this.zoomLevel, true, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Current lat/long coordinates for the center of the viewport. (default\r\n\t * zoom reference point)\r\n\t *\r\n\t * @readonly\r\n\t * @return {IGeoPoint} Coordinates\r\n\t */\r\n\tpublic get zoomGeoPoint(): IGeoPoint {\r\n\t\treturn this.svgPointToGeo({\r\n\t\t\tx: this.pixelWidth / 2,\r\n\t\t\ty: this.pixelHeight / 2\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Current zoom level.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Zoom level\r\n\t */\r\n\tpublic get zoomLevel(): number {\r\n\t\treturn this.seriesContainer.scale;\r\n\t}\r\n\r\n\tpublic set zoomLevel(value: number) {\r\n\t\tthis.seriesContainer.scale = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches events after some map transformation, like pan or zoom.\r\n\t */\r\n\tprotected handleMapTransform(): void {\r\n\t\tif (this.zoomLevel != this._prevZoomLevel) {\r\n\t\t\tthis.dispatch(\"zoomlevelchanged\");\r\n\t\t\tthis._prevZoomLevel = this.zoomLevel;\r\n\t\t}\r\n\r\n\t\tif (this.zoomGeoPoint && (this._prevZoomGeoPoint.latitude != this.zoomGeoPoint.latitude || this._prevZoomGeoPoint.longitude != this.zoomGeoPoint.longitude)) {\r\n\t\t\tthis.dispatch(\"mappositionchanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[SmallMap]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a small map\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"smallMap\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {SmallMap}  smallMap  Small map\r\n\t */\r\n\tpublic set smallMap(smallMap: SmallMap) {\r\n\t\tif (this._smallMap) {\r\n\t\t\tthis.removeDispose(this._smallMap);\r\n\t\t}\r\n\t\tthis._smallMap = smallMap;\r\n\t\tthis._smallMap.chart = this;\r\n\t\tsmallMap.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {SmallMap} Small map\r\n\t */\r\n\tpublic get smallMap(): SmallMap {\r\n\t\tif (!this._smallMap) {\r\n\t\t\tlet smallMap: SmallMap = new SmallMap();\r\n\t\t\tthis.smallMap = smallMap;\r\n\t\t}\r\n\t\treturn this._smallMap;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[ZoomControl]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a zoom control\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"zoomControl\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {ZoomControl}  zoomControl  Zoom control\r\n\t */\r\n\tpublic set zoomControl(zoomControl: ZoomControl) {\r\n\t\tif (this._zoomControl) {\r\n\t\t\tthis.removeDispose(this._zoomControl);\r\n\t\t}\r\n\t\tthis._zoomControl = zoomControl;\r\n\t\tzoomControl.chart = this;\r\n\t\tzoomControl.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ZoomControl} Zoom control\r\n\t */\r\n\tpublic get zoomControl(): ZoomControl {\r\n\t\treturn this._zoomControl;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a map series of appropriate type.\r\n\t *\r\n\t * @return {MapSeries} Map series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new MapSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Degrees to shift map center by.\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t *\r\n\t * @param {number}  value  Map center shift\r\n\t */\r\n\tpublic set deltaLongitude(value: number) {\r\n\t\tif (this.setPropertyValue(\"deltaLongitude\", $geo.wrapAngleTo180(value))) {\r\n\t\t\tthis.invalidateProjection();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Map center shift\r\n\t */\r\n\tpublic get deltaLongitude(): number {\r\n\t\treturn this.getPropertyValue(\"deltaLongitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Max pan out\r\n\t *\r\n\t * @param {number} Max pan out\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Max pan out\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * The geographical point to center map on when it is first loaded.\r\n\t *\r\n\t * The map will also be centered to this point when you call `goHome()`\r\n\t * method.\r\n\t *\r\n\t * @param {IGeoPoint}  value  Home geo point\r\n\t */\r\n\tpublic set homeGeoPoint(value: IGeoPoint) {\r\n\t\tthis.setPropertyValue(\"homeGeoPoint\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint} Home geo point\r\n\t */\r\n\tpublic get homeGeoPoint(): IGeoPoint {\r\n\t\treturn this.getPropertyValue(\"homeGeoPoint\");\r\n\t}\r\n\r\n\t/**\r\n\t * The zoom level to put the map in when it is first loaded.\r\n\t *\r\n\t * The map will also be set to this zoom level when you call `goHome()`\r\n\t * method.\r\n\t *\r\n\t * @param {number}  value  Home zoom level\r\n\t */\r\n\tpublic set homeZoomLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"homeZoomLevel\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Home zoom level\r\n\t */\r\n\tpublic get homeZoomLevel(): number {\r\n\t\treturn this.getPropertyValue(\"homeZoomLevel\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates projection, causing all series to be redrawn.\r\n\t */\r\n\tprotected invalidateProjection() {\r\n\t\t//\t\tthis.projection.deltaLatitude = this.deltaLatitude;\r\n\t\tthis.projection.deltaLongitude = this.deltaLongitude;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @param {DataSource} value Data source\r\n\t */\r\n\tpublic set geodataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"geodata\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"geodata\"] = value;\r\n\t\tthis._dataSources[\"geodata\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"geodata\")\r\n\t\t}, this);\r\n\t\tthis.setDataSourceEvents(value, \"geodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[DataSource]] specifically for loading Component's data.\r\n\t *\r\n\t * @return {DataSource} Data source\r\n\t */\r\n\tpublic get geodataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.getDataSource(\"geodata\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"geodata\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\t// Instantiate projection\r\n\t\tif ($type.hasValue(config[\"projection\"]) && $type.isString(config[\"projection\"])) {\r\n\t\t\tconfig[\"projection\"] = this.createClassInstance(config[\"projection\"]);\r\n\t\t}\r\n\r\n\t\t// Set up small map\r\n\t\tif ($type.hasValue(config.smallMap) && !$type.hasValue(config.smallMap.type)) {\r\n\t\t\tconfig.smallMap.type = \"SmallMap\";\r\n\t\t}\r\n\r\n\t\t// Set up zoom control\r\n\t\tif ($type.hasValue(config.zoomControl) && !$type.hasValue(config.zoomControl.type)) {\r\n\t\t\tconfig.zoomControl.type = \"ZoomControl\";\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n * This function is used to sort element's JSON config properties, so that\r\n * some properties that absolutely need to be processed last, can be put at\r\n * the end.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {string}  a  Element 1\r\n * @param  {string}  b  Element 2\r\n * @return {number}     Sorting number\r\n */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"smallMap\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"smallMap\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `projection` to \"as is\" fields.\r\n\t *\r\n\t * @param  {string}   field  Field name\r\n\t * @return {boolean}         Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"projection\" || super.asIs(field);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Resets the map to its original position and zoom level.\r\n\t */\r\n\tpublic goHome(duration?: number) {\r\n\t\tlet homeGeoPoint = this.homeGeoPoint;\r\n\t\tif (!homeGeoPoint) {\r\n\t\t\thomeGeoPoint = this.centerGeoPoint;\r\n\t\t}\r\n\t\tif (homeGeoPoint) {\r\n\t\t\tthis.zoomToGeoPoint(homeGeoPoint, this.homeZoomLevel, true, duration);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapChart\"] = MapChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/MapChart.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * [number description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tposition?: number;\r\n\r\n\t/**\r\n\t * [boolean description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {boolean}\r\n\t */\r\n\tadjustRotation?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineObjectAdapters extends IContainerAdapters, IMapLineObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a line on the map.\r\n *\r\n * @see {@link IMapLineObjectEvents} for a list of available events\r\n * @see {@link IMapLineObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapLineObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapLineObjectProperties}\r\n\t */\r\n\tpublic _properties!: IMapLineObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapLineObjectAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapLineObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapLineObjectEvents}\r\n\t */\r\n\tpublic _events!: IMapLineObjectEvents;\r\n\r\n\t/**\r\n\t * [mapLine description]\r\n\t *\r\n\t * @todo Description\r\n\t * @todo Review if necessary (same as parent)\r\n\t * @type {MapLine}\r\n\t */\r\n\tpublic mapLine: MapLine;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.adjustRotation = true;\r\n\t\tthis.className = \"MapLineObject\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates element's position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition() {\r\n\t\tif (this.mapLine) {\r\n\t\t\tlet point: IOrientationPoint = this.mapLine.positionToPoint(this.position);\r\n\t\t\tthis.x = point.x;\r\n\t\t\tthis.y = point.y;\r\n\r\n\t\t\tif (this.adjustRotation) {\r\n\t\t\t\tthis.rotation = point.angle;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataItem = this.mapLine.dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet series = this.mapLine.dataItem.component;\r\n\t\t\t\tthis.scale = 1 / series.scale;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * [position description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\tpublic set position(value: number) {\r\n\t\tthis.setPropertyValue(\"position\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get position(): number {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * [adjustRotation description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {boolean} value [description]\r\n\t */\r\n\tpublic set adjustRotation(value: boolean) {\r\n\t\tthis.setPropertyValue(\"adjustRotation\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} [description]\r\n\t */\r\n\tpublic get adjustRotation(): boolean {\r\n\t\treturn this.getPropertyValue(\"adjustRotation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineObject\"] = MapLineObject;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineObject.ts","/**\r\n * Map polygon series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapPolygon } from \"./MapPolygon\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapPolygonSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapPolygonSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t *\r\n\t * @type {MapPolygon}\r\n\t */\r\n\tprotected _mapPolygon: MapPolygon;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon.\r\n\t *\r\n\t * @type {number[][][]}\r\n\t */\r\n\tprotected _polygon: number[][][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon.\r\n\t *\r\n\t * @type {number[][][][]}\r\n\t */\r\n\tprotected _multiPolygon: number[][][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon.\r\n\t *\r\n\t * @type {IGeoPoint[][]}\r\n\t */\r\n\tprotected _geoPolygon: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon.\r\n\t *\r\n\t * @type {IGeoPoint[][][]}\r\n\t */\r\n\tprotected _multiGeoPolygon: IGeoPoint[][][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {MapPolygonSeries}\r\n\t */\r\n\tpublic _component!: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapPolygonSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return {MapPolygon} Element\r\n\t */\r\n\tpublic get mapPolygon(): MapPolygon {\r\n\t\tif (!this._mapPolygon) {\r\n\t\t\tlet mapPolygon = this.component.mapPolygons.create();\r\n\t\t\tthis._mapPolygon = mapPolygon;\r\n\t\t\tthis.addSprite(mapPolygon);\r\n\r\n\t\t\tthis._disposers.push(mapPolygon);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.mapPolygons.removeValue(mapPolygon);\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._mapPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 200 ],\r\n\t *     [ 170, 240 ],\r\n\t *     [ 100, 150 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][][]}  polygon  Coordinates\r\n\t */\r\n\tpublic set polygon(polygon: number[][][]) {\r\n\t\tthis._polygon = polygon;\r\n\t\tthis.multiGeoPolygon = $mapUtils.multiPolygonToGeo([polygon]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get polygon(): number[][][] {\r\n\t\treturn this._polygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Part 1\r\n\t *   [\r\n\t *     [\r\n\t *       [ 100, 150 ],\r\n\t *       [ 120, 200 ],\r\n\t *       [ 150, 220 ],\r\n\t *       [ 170, 240 ],\r\n\t *       [ 100, 150 ]\r\n\t *     ]\r\n\t *   ],\r\n\t *\r\n\t *   // Part 2\r\n\t *   [\r\n\t *     [\r\n\t *       [ 300, 350 ],\r\n\t *       [ 320, 400 ],\r\n\t *       [ 350, 420 ],\r\n\t *       [ 370, 440 ],\r\n\t *       [ 300, 350 ]\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][][]}  multiPolygon  Coordinates\r\n\t */\r\n\tpublic set multiPolygon(multiPolygon: number[][][][]) {\r\n\t\tthis._multiPolygon = multiPolygon;\r\n\t\tthis.multiGeoPolygon = $mapUtils.multiPolygonToGeo(multiPolygon);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get multiPolygon(): number[][][][] {\r\n\t\treturn this._multiPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     { latitude: -10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: 10.0 },\r\n\t *     { latitude: -10.0, longitude: -10.0 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.6} GeoJSON Polygon reference\r\n\t * @param {IGeoPoint[][]}  geoPolygon  Coordinates\r\n\t */\r\n\tpublic set geoPolygon(geoPolygon: IGeoPoint[][]) {\r\n\t\tthis._geoPolygon = geoPolygon;\r\n\t\tthis.multiGeoPolygon = [geoPolygon];\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get geoPolygon(): IGeoPoint[][] {\r\n\t\treturn this._geoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: 180.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ],\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: -170.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.7} GeoJSON MultiPolygon reference\r\n\t * @param {IGeoPoint[][][]}  multiGeoPolygon  Coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis._multiGeoPolygon = multiGeoPolygon;\r\n\t\tthis.updateAreaExtremes(multiGeoPolygon);\r\n\t\tthis.mapPolygon.multiGeoPolygon = this._multiGeoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this._multiGeoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateAreaExtremes(multiGeoPolygon: IGeoPoint[][][]): void {\r\n\t\tfor (let i = 0, len = multiGeoPolygon.length; i < len; i++) {\r\n\t\t\tlet geoPolygon: IGeoPoint[][] = multiGeoPolygon[i];\r\n\t\t\tlet surface: IGeoPoint[] = geoPolygon[0];\r\n\t\t\tthis.updateExtremes(surface);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds polygon pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-polygon pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds polygon data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds poly-polygon data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoPolygon?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygonSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonSeriesAdapters extends IMapSeriesAdapters, IMapPolygonSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map polygon elements.\r\n *\r\n * @see {@link IMapPolygonSeriesEvents} for a list of available Events\r\n * @see {@link IMapPolygonSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapPolygonSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapPolygonSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapPolygonSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapPolygonSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapPolygonSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapPolygonSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapPolygonSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapPolygonSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapPolygonSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapPolygonSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map polygons in the series.\r\n\t *\r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapPolygons: ListTemplate<MapPolygon>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.parsingStepDuration = 1000; // to avoid some extra redrawing\r\n\r\n\t\tthis.className = \"MapPolygonSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPolygon = \"multiPolygon\";\r\n\t\tthis.dataFields.polygon = \"polygon\";\r\n\r\n\t\tthis.dataFields.geoPolygon = \"geoPolygon\";\r\n\t\tthis.dataFields.multiGeoPolygon = \"multiGeoPolygon\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapPolygonSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapPolygonSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc(){\r\n\t\tthis.mapPolygons.clear();\r\n\t\tsuper.processIncExc();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0 && this._parseDataFrom == 0) {\r\n\t\t\tthis.mapPolygons.clear();\r\n\t\t}\r\n\r\n\t\tthis.west = null;\r\n\t\tthis.east = null;\r\n\t\tthis.north = null;\r\n\t\tthis.south = null;\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = !this._dataSources[\"geodata\"] ? this.chart.geodata : undefined;\r\n\r\n\t\t\tif(this.geodata){\r\n\t\t\t\tgeoJSON = this.geodata;\r\n\t\t\t}\r\n\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\r\n\t\t\t\t\t\t\tif (type == \"Polygon\" || type == \"MultiPolygon\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"Polygon\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// find data object in user-provided data\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapPolygonDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\t\t\t\t// create one if not found\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPolygon: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// in case found\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t// if user-provided object doesn't have points data provided in any way:\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPolygon) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPolygon = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\t// if data is parsed in chunks, polygon list is corrupted, fix it here\r\n\t\t// !important this should go after super!\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapPolygons.moveValue(dataItem.mapPolygon);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapPolygons.iterator(), (mapPolygon) => {\t\t\t\r\n\t\t\tmapPolygon.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * List of polygon elements in the series.\r\n\t *\r\n\t * @return {ListTemplate<MapPolygon>} Polygon list\r\n\t */\r\n\tpublic get mapPolygons(): ListTemplate<MapPolygon> {\r\n\r\n\t\tif (!this._mapPolygons) {\r\n\t\t\tlet polygonTemplate: MapPolygon = new MapPolygon();\r\n\r\n\t\t\tlet mapPolygons: ListTemplate<MapPolygon> = new ListTemplate<MapPolygon>(polygonTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapPolygons));\r\n\t\t\tthis._disposers.push(mapPolygons.template);\r\n\t\t\tmapPolygons.template.focusable = true;\r\n\t\t\tmapPolygons.events.on(\"inserted\", this.handleObjectAdded, this);\r\n\t\t\tthis._mapPolygons = mapPolygons;\r\n\t\t}\r\n\r\n\t\treturn this._mapPolygons;\r\n\t}\r\n\r\n\t/**\r\n\t * returns MapPolygon by id in geoJSON file\r\n\t * @param {string} polygon id\r\n\t * @return {MapPolygon}\r\n\t */\r\n\tpublic getPolygonById(id: string): MapPolygon {\r\n\t\treturn $iter.find(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tlet dataContext: any = mapPolygon.dataItem.dataContext;\r\n\t\t\treturn dataContext.id == id;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapPolygons.template.copyFrom(source.mapPolygons.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygonSeries\"] = MapPolygonSeries;\r\nregistry.registeredClasses[\"MapPolygonSeriesDataItem\"] = MapPolygonSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygonSeries.ts","/**\r\n * Map spline series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart, MapLineType } from \"../types/MapChart\";\r\nimport { MapSpline } from \"./MapSpline\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { IMapDataObject, IMapPolygonDataObject, IMapLineDataObject } from \"../types/MapChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSplineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapSplineSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapSpline]] element related to this data item.\r\n\t *\r\n\t * @type {MapSpline}\r\n\t */\r\n\tpublic _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSplineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineSeriesAdapters extends IMapLineSeriesAdapters, IMapSplineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map spline elements.\r\n *\r\n * @see {@link IMapSplineSeriesEvents} for a list of available Events\r\n * @see {@link IMapSplineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSplineSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapSplineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapSplineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapSplineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapSplineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapSplineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapSplineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapSplineSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapSplineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapSplineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @type {MapSpline}\r\n\t */\r\n\tpublic _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapSplineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSplineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return {MapSpline} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapSpline();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSplineSeries\"] = MapSplineSeries;\r\nregistry.registeredClasses[\"MapSplineSeriesDataItem\"] = MapSplineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSplineSeries.ts","/**\r\n * Map image series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapImageDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapImageSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapImageSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t *\r\n\t * @type {MapImage}\r\n\t */\r\n\tprotected _mapImage: MapImage;\r\n\r\n\t/**\r\n\t * [_point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number[]}\r\n\t */\r\n\tprotected _point: number[];\r\n\r\n\t/**\r\n\t * Geographical coordinates image is placed at.\r\n\t *\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _geoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t *\r\n\t * @return {MapImage} Element\r\n\t */\r\n\tpublic get mapImage(): MapImage {\r\n\t\tif (!this._mapImage) {\r\n\t\t\tlet mapImage = this.component.mapImages.create();\r\n\t\t\tthis.addSprite(mapImage);\r\n\t\t\tthis._mapImage = mapImage;\r\n\t\t\tthis._disposers.push(mapImage);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.mapImages.removeValue(mapImage);\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._mapImage;\r\n\t}\r\n\r\n\t/**\r\n\t * [point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number[]} point [description]\r\n\t */\r\n\tpublic set point(point: number[]) {\r\n\t\tthis._point = point;\r\n\t\tthis.geoPoint = $mapUtils.pointToGeo(point);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} [description]\r\n\t */\r\n\tpublic get point(): number[] {\r\n\t\treturn this._point;\r\n\t}\r\n\r\n\t/**\r\n\t * Geographical coordinates (lat/long) image is placed at.\r\n\t *\r\n\t * @param {IGeoPoint} geoPoint Image coordinates\r\n\t */\r\n\tpublic set geoPoint(geoPoint: IGeoPoint) {\r\n\t\tthis._geoPoint = geoPoint;\r\n\t\tthis.updateExtremes([this._geoPoint]);\r\n\t\tthis.mapImage.latitude = this._geoPoint.latitude;\r\n\t\tthis.mapImage.longitude = this._geoPoint.longitude;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint} Image coordinates\r\n\t */\r\n\tpublic get geoPoint(): IGeoPoint {\r\n\t\treturn this._geoPoint;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds image point data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds image point data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoPoint?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImageSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageSeriesAdapters extends IMapSeriesAdapters, IMapImageSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map image (marker) elements.\r\n *\r\n * @see {@link IMapImageSeriesEvents} for a list of available Events\r\n * @see {@link IMapImageSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapImageSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapImageSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapImageSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapImageSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapImageSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapImageSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapImageSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapImageSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapImageSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapImageSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this image is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t *\r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapImages: ListTemplate<MapImage>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPoint = \"multiPoint\";\r\n\t\tthis.dataFields.point = \"point\";\r\n\r\n\t\tthis.dataFields.geoPoint = \"geoPoint\";\r\n\t\tthis.dataFields.multiGeoPoint = \"multiGeoPoint\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapImageSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapImageSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the data of the sries, effectively forcing it to redraw\r\n\t * all of its elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.mapImages.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata) {\r\n\t\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"Point\" || type == \"MultiPoint\") {  // todo: we don't support multipoints at the moment actually\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPoint\r\n\t\t\t\t\t\t\t\t\tif (type == \"MultiPoint\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapImageDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPoint: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPoint) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPoint = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t\t// important! this should go after super.validateData\r\n\t\t// if data is parsed in chunks, images list is corrupted, fix it here\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapImages.moveValue(dataItem.mapImage);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t *\r\n\t * @return {ListTemplate<MapImage>} Map images\r\n\t */\r\n\tpublic get mapImages(): ListTemplate<MapImage> {\r\n\r\n\t\tif (!this._mapImages) {\r\n\t\t\tlet template: MapImage = new MapImage();\r\n\t\t\tlet mapImages = new ListTemplate<MapImage>(template);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapImages));\r\n\t\t\tthis._disposers.push(mapImages.template);\r\n\t\t\tmapImages.template.focusable = true;\r\n\t\t\tmapImages.events.on(\"inserted\", this.handleObjectAdded, this);\r\n\t\t\tthis._mapImages = mapImages;\r\n\t\t}\r\n\r\n\t\treturn this._mapImages;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data element, effectively triggering its redrawal.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]) {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tdataItem.mapImage.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapImages.iterator(), (mapImage) => {\r\n\t\t\tmapImage.validatePosition();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapImages.template.copyFrom(source.mapImages.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImageSeries\"] = MapImageSeries;\r\nregistry.registeredClasses[\"MapImageSeriesDataItem\"] = MapImageSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImageSeries.ts","/**\r\n * Map arc series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart, MapLineType } from \"../types/MapChart\";\r\nimport { MapArc } from \"./MapArc\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { IMapDataObject, IMapPolygonDataObject, IMapLineDataObject } from \"../types/MapChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapArcSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapArcSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapArc]] element related to this data item.\r\n\t *\r\n\t * @type {MapArc}\r\n\t */\r\n\tpublic _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArcSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcSeriesAdapters extends IMapLineSeriesAdapters, IMapArcSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of arc elements. (curved lines)\r\n *\r\n * @see {@link IMapArcSeriesEvents} for a list of available Events\r\n * @see {@link IMapArcSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapArcSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IMapArcSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapArcSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IMapArcSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapArcSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IMapArcSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapArcSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapArcSeriesEvents}\r\n\t */\r\n\tpublic _events!: IMapArcSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {MapArcSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapArcSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @type {MapArc}\r\n\t */\r\n\tpublic _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapArcSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapArcSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return {MapArc} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapArc();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArcSeries\"] = MapArcSeries;\r\nregistry.registeredClasses[\"MapArcSeriesDataItem\"] = MapArcSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArcSeries.ts","export { Mercator } from \"./projections/Mercator\";\nexport { Miller } from \"./projections/Miller\";\nexport { Eckert6 } from \"./projections/Eckert6\";\nexport { Orthographic } from \"./projections/Orthographic\";\nexport { Projection } from \"./projections/Projection\";\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/projections.ts","/**\r\n * Functionality for Mercator projection\r\n * \r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\n\r\n/**\r\n * Mercator projection.\r\n */\r\nexport class Mercator extends Projection {\r\n\r\n\t/**\r\n\t * Converts screen coordinates to latitude/longitude in radians\r\n\t * @param  {number}     x  X\r\n\t * @param  {number}     y  Y\r\n\t * @return {IGeoPoint}     Geographical coordinates\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn {\r\n\t\t\tlongitude: x,\r\n\t\t\tlatitude: 2 * Math.atan(Math.exp(y)) - Math.PI / 2\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn {\r\n\t\t\tx: lambda,\r\n\t\t\ty: Math.log(Math.tan((Math.PI / 2 + phi) / 2))\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Mercator\"] = Mercator;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Mercator.ts","/**\n * Functionality for Miller projection\n *\n * The function(s) below are from D3.js library (https://d3js.org/)\n * \n * ```\n * Copyright 2017 Mike Bostock\n * \n * Redistribution and use in source and binary forms, with or without \n * modification, are permitted provided that the following conditions are met:\n * \n * 1. Redistributions of source code must retain the above copyright notice, \n *    this list of conditions and the following disclaimer.\n * \n * 2. Redistributions in binary form must reproduce the above copyright notice, \n *    this list of conditions and the following disclaimer in the documentation \n *    and/or other materials provided with the distribution.\n * \n * 3. Neither the name of the copyright holder nor the names of its \n *    contributors may be used to endorse or promote products derived from this \n *    software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \n * POSSIBILITY OF SUCH DAMAGE.\n * ```\n */\n\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { Projection } from \"./Projection\";\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\nimport { IPoint } from \"../../../core/defs/IPoint\";\nimport { registry } from \"../../../core/Registry\";\n\n/**\n * Miller projection.\n */\nexport class Miller extends Projection {\n\n\t/**\n\t * Converts screen coordinates to latitude/longitude.\n\t * \n\t * @param  {number}     x  X\n\t * @param  {number}     y  Y\n\t * @return {IGeoPoint}     Geographical coordinates in radians\n\t */\n\tpublic unproject(x: number, y: number): IGeoPoint {\n\t\treturn {\n\t\t\tlongitude: x,\n\t\t\tlatitude: 2.5 * Math.atan(Math.exp(0.8 * y)) - 0.625 * Math.PI\n\t\t};\n\t}\n\n\t/**\n\t * Converts geographical coordinates to screen coordinates.\n\t * \n\t * @param  {number}  lambda  Lambda parameter\n\t * @param  {number}  phi     Phi parameter\n\t * @return {IPoint}          Screen coordinates\n\t */\n\tpublic project(lambda: number, phi: number): IPoint {\n\t\treturn {\n\t\t\tx: lambda,\n\t\t\ty: 1.25 * Math.log(Math.tan(Math.PI / 4 + 0.4 * phi))\n\t\t};\n\t}\n\n}\n\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n * \n * @ignore\n */\nregistry.registeredClasses[\"Miller\"] = Miller;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Miller.ts","/**\r\n * Functionality for Eckert6 projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\n\r\n/**\r\n * Eckert6 projection.\r\n */\r\nexport class Eckert6 extends Projection {\r\n\r\n\t/**\r\n\t * Converts screen coordinates to latitude/longitude.\r\n\t * \r\n\t * @param  {number}     x  X\r\n\t * @param  {number}     y  Y\r\n\t * @return {IGeoPoint}     Geographical coordinates in radians\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\tlet j = 1 + Math.PI / 2,\r\n\t\t\tk = Math.sqrt(j / 2);\r\n\t\treturn {\r\n\t\t\tlongitude: x * 2 * k / (1 + Math.cos(y *= k)),\r\n\t\t\tlatitude: Math.asin((y + Math.sin(y)) / j)\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\tlet k = (1 + Math.PI / 2) * Math.sin(phi);\r\n\t\tfor (let i = 0, delta = Infinity; i < 10 && Math.abs(delta) > 0.00001; i++) {\r\n\t\t\tphi -= delta = (phi + Math.sin(phi) - k) / (1 + Math.cos(phi));\r\n\t\t}\r\n\t\tk = Math.sqrt(2 + Math.PI);\r\n\t\treturn {\r\n\t\t\tx: lambda * (1 + Math.cos(phi)) / k,\r\n\t\t\ty: 2 * phi / k\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Eckert6\"] = Eckert6;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Eckert6.ts","/**\r\n * Functionality for Mercator projection\r\n * \r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class Orthographic extends Projection {\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn { x: Math.cos(phi) * Math.sin(lambda), y: Math.sin(phi) };\r\n\t}\r\n\r\n\r\n\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: longitude - 180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: longitude - 180, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\tpublic getRect1(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t}\r\n\r\n\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\r\n\t\tlet delta: number;\r\n\r\n\t\tif (longitude > 0) {\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\r\n\t\treturn [{ longitude: smallNum + longitude - 180 + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude + 90 }, { longitude: smallNum + longitude - 180 + delta, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\r\n\tpublic getRect2(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet delta: number;\r\n\r\n\t\tif (longitude > 0) {\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180 + delta, east: longitude + delta };\r\n\t}\r\n\r\n\r\n\r\n\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tlet rect1 = this.getRect1();\r\n\t\tlet rect2 = this.getRect2();\r\n\r\n\t\tfor (let i = 0, len = geoArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.isInside(surfaceRect, rect1)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\r\n\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.isInside(surfaceRect, rect2)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\tclippedArea.push(area);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i = 0, len = clippedArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = clippedArea[i][0];\r\n\t\t\t//let hole: IGeoPoint[] = clippedArea[i][1];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet len = surface.length;\r\n\r\n\t\t\t\tlet prevPoint = surface[len - 1];\r\n\r\n\t\t\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\t\t\tlet point = surface[i];\r\n\r\n\t\t\t\t\tif ($math.round(point.longitude, 4) == $math.round(prevPoint.longitude, 4)) {\r\n\t\t\t\t\t\tlet stepCount = Math.abs((prevPoint.latitude - point.latitude) * 2);\r\n\t\t\t\t\t\tlet extraPoints: IGeoPoint[] = [];\r\n\r\n\t\t\t\t\t\tif (stepCount > 1) {\r\n\t\t\t\t\t\t\tfor (let s = 1; s < stepCount; s++) {\r\n\t\t\t\t\t\t\t\textraPoints.push({ longitude: prevPoint.longitude, latitude: prevPoint.latitude + (point.latitude - prevPoint.latitude) / stepCount * s })\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tsurface.splice(i, 0, ...extraPoints);\r\n\t\t\t\t\t\t\ti = i + extraPoints.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tprevPoint = point;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedArea;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Orthographic\"] = Orthographic;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Orthographic.ts","/**\r\n * This module contains funcitonality related to geographical projections\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\nimport * as $geo from \"../Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for a geographical projection.\r\n */\r\nexport class Projection {\r\n\r\n\tpublic deltaLongitude: number = 0;\r\n\r\n\tpublic deltaLatitude: number = 0;\r\n\r\n\tpublic deltaGama: number = 0;\r\n\r\n\tpublic centerPoint: IPoint = { x: 0, y: 0 };\r\n\r\n\tpublic scale: number = 1;\r\n\r\n\tpublic projectGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\r\n\t\tlet clippedGeoArea: IGeoPoint[][][] = this.clipGeoArea(geoArea);\r\n\t\tlet convertedPoints: IPoint[][][] = this.convertGeoArea(clippedGeoArea);\r\n\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\tpublic projectGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\treturn this.convertGeoLine(this.clipGeoLine(geoLine));\r\n\t}\r\n\r\n\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: -180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: -180, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\t//let latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: longitude + smallNum, latitude: -90 }, { longitude: 180, latitude: -90 }, { longitude: 180, latitude: 90 }, { longitude: longitude + smallNum, latitude: 90 }];\r\n\t}\r\n\r\n\tpublic getRect1(): IGeoRectangle {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t}\r\n\r\n\tpublic getRect2(): IGeoRectangle {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude, east: (longitude + 180) };\r\n\t}\r\n\r\n\r\n\r\n\tprotected clipGeoLine(geoLine: IGeoPoint[][]): IGeoPoint[][] {\r\n\t\tif (!geoLine) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedLine: IGeoPoint[][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tfor (let i = 0, len = geoLine.length; i < len; i++) {\r\n\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\r\n\t\t\tif (segment) {\r\n\t\t\t\tlet clippedSegments: IGeoPoint[][] = this.clipLine(segment, clipRectangle1);\r\n\t\t\t\tclippedLine = clippedLine.concat(clippedSegments);\r\n\r\n\t\t\t\tif (this.deltaLongitude != 0) {\r\n\t\t\t\t\tlet clippedSegments2: IGeoPoint[][] = this.clipLine(segment, clipRectangle2);\r\n\t\t\t\t\tclippedLine = clippedLine.concat(clippedSegments2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedLine;\r\n\t}\r\n\r\n\r\n\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tlet rect1 = this.getRect1();\r\n\t\tlet rect2 = this.getRect2();\r\n\r\n\t\tfor (let i = 0, len = geoArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\tclippedArea.push(area);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedArea;\r\n\t}\r\n\r\n\tprotected convertGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet convertedPoints: IPoint[][][] = [];\r\n\r\n\t\tfor (let i = 0, len = geoArea.length; i < len; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet convertedAreaPoints: IPoint[][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\t\t\t\tlet convertedSurface: IPoint[] = [];\r\n\r\n\t\t\t\tfor (let s = 0, slen = surface.length; s < slen; s++) {\r\n\t\t\t\t\tlet point: IPoint = this.convert(surface[s]);\r\n\r\n\t\t\t\t\tconvertedSurface.push(point);\r\n\t\t\t\t}\r\n\t\t\t\tconvertedAreaPoints.push(convertedSurface);\r\n\t\t\t}\r\n\r\n\t\t\tif (hole) {\r\n\t\t\t\tlet convertedHole: IPoint[] = [];\r\n\t\t\t\tfor (let s = 0, hlen = hole.length; s < hlen; s++) {\r\n\t\t\t\t\tlet point: IPoint = this.convert(hole[s]);\r\n\r\n\t\t\t\t\tconvertedHole.push(point);\r\n\t\t\t\t}\r\n\t\t\t\tconvertedAreaPoints.push(convertedHole);\r\n\t\t\t}\r\n\t\t\tconvertedPoints.push(convertedAreaPoints);\r\n\t\t}\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\tprotected convertGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\tif (!geoLine) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet convertedPoints: IPoint[][] = [];\r\n\r\n\t\tfor (let i = 0, len = geoLine.length; i < len; i++) {\r\n\r\n\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\r\n\t\t\tlet convertedSegmentPoints: IPoint[] = [];\r\n\r\n\t\t\tfor (let s = 0, slen = segment.length; s < slen; s++) {\r\n\t\t\t\tlet geoPoint: IGeoPoint = segment[s];\r\n\r\n\t\t\t\tlet point: IPoint = this.convert(geoPoint);\r\n\t\t\t\tconvertedSegmentPoints.push(point);\r\n\t\t\t}\r\n\r\n\t\t\tconvertedPoints.push(convertedSegmentPoints);\r\n\t\t}\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a geographical point (lat/long) to a screen point (x/y)\r\n\t * @param  {IGeoPoint} geoPoint Geo point (lat/long)\r\n\t * @return {IPoint}             Screen point (x/y)\r\n\t */\r\n\tpublic convert(geoPoint: IGeoPoint): IPoint {\r\n\t\tgeoPoint = $geo.normalizePoint(geoPoint);\r\n\t\tgeoPoint = this.rotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\t\tlet pointInRadians: IPoint = this.project(geoPoint.longitude * $math.RADIANS, geoPoint.latitude * $math.RADIANS);\r\n\t\treturn {\r\n\t\t\tx: $math.round(pointInRadians.x * $math.DEGREES - this.centerPoint.x, 4) * this.scale,\r\n\t\t\ty: $math.round(-pointInRadians.y * $math.DEGREES - this.centerPoint.y, 4) * this.scale\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a screen point (x/y) to a geographical point (lat/long)\r\n\t * @param  {IPoint}    point Screen point (x/y)\r\n\t * @return {IGeoPoint}       Geo point (lat/long)\r\n\t */\r\n\tpublic invert(point: IPoint): IGeoPoint {\r\n\t\tlet pointInRadians: IGeoPoint = this.unproject((point.x / this.scale + this.centerPoint.x) * $math.RADIANS, (-point.y / this.scale - this.centerPoint.y) * $math.RADIANS);\r\n\r\n\t\tlet geoPoint = { longitude: pointInRadians.longitude * $math.DEGREES, latitude: pointInRadians.latitude * $math.DEGREES };\r\n\r\n\t\tgeoPoint = this.unrotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\r\n\t\treturn geoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns X/Y coordinates.\r\n\t * Individual projections will override this method to apply their own \r\n\t * projection logic.\r\n\t * @param  {number} lambda [description]\r\n\t * @param  {number} phi    [description]\r\n\t * @return {IPoint}        X/Y coordinates\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn { x: lambda, y: phi };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns geographical coordinates (lat/long).\r\n\t * Individual projections will override this method to apply their own \r\n\t * projection logic.\r\n\t * @param  {number}    x X coordinate\r\n\t * @param  {number}    y Y coordinate\r\n\t * @return {IGeoPoint}   Geographical point\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn { longitude: x, latitude: y };\r\n\t}\r\n\r\n\r\n\trotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS + deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaPhi + x * sinDeltaPhi;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaGamma + y * sinDeltaGamma) };\r\n\t}\r\n\r\n\tunrotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS - deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaGamma - y * sinDeltaGamma;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaPhi - x * sinDeltaPhi) };\r\n\t}\r\n\r\n\r\n\r\n\tclipLine(subjectPolyline: IGeoPoint[], clipPolygon: IGeoPoint[]): IGeoPoint[][] {\r\n\r\n\t\tif (!subjectPolyline || subjectPolyline.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet cp1: IGeoPoint;\r\n\t\tlet cp2: IGeoPoint;\r\n\r\n\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t};\r\n\r\n\t\tlet s: IGeoPoint;\r\n\t\tlet e: IGeoPoint;\r\n\r\n\t\t//@todo: make a separate function\r\n\t\tvar intersection = function() {\r\n\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\r\n\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t};\r\n\r\n\t\tvar segment: IGeoPoint[] = subjectPolyline;\r\n\r\n\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\r\n\t\tfor (let j in clipPolygon) {\r\n\t\t\tcp2 = clipPolygon[j];\r\n\t\t\tlet inputList = segment;\r\n\t\t\tsegment = [];\r\n\t\t\ts = inputList[0];\r\n\t\t\tfor (let i = 0, len = inputList.length; i < len; i++) {\r\n\t\t\t\te = inputList[i];\r\n\r\n\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsegment.push(e);\r\n\t\t\t\t}\r\n\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t}\r\n\r\n\t\t\t\ts = e;\r\n\t\t\t}\r\n\t\t\tcp1 = cp2;\r\n\t\t}\r\n\r\n\t\treturn [segment];\r\n\t}\r\n\r\n\r\n\r\n\r\n\t//@todo add credits to roseta code\r\n\t//@todo: someday make it better\r\n\tclip(subjectPolygon: IGeoPoint[], clipPolygon: IGeoPoint[]) {\r\n\r\n\t\tif (!subjectPolygon || subjectPolygon.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet cp1: IGeoPoint;\r\n\t\tlet cp2: IGeoPoint;\r\n\r\n\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t};\r\n\r\n\t\tlet s: IGeoPoint;\r\n\t\tlet e: IGeoPoint;\r\n\t\t//@todo: make a separate function\r\n\t\tvar intersection = function() {\r\n\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\r\n\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t};\r\n\r\n\t\tvar outputList = subjectPolygon;\r\n\r\n\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\r\n\t\tfor (let j in clipPolygon) {\r\n\t\t\tcp2 = clipPolygon[j];\r\n\t\t\tlet inputList = outputList;\r\n\t\t\toutputList = [];\r\n\t\t\ts = inputList[inputList.length - 1]; //last on the input list\r\n\t\t\tfor (let i in inputList) {\r\n\t\t\t\te = inputList[i];\r\n\r\n\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t\t}\r\n\t\t\t\t\toutputList.push(e);\r\n\t\t\t\t}\r\n\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t}\r\n\t\t\t\ts = e;\r\n\t\t\t}\r\n\t\t\tcp1 = cp2;\r\n\t\t}\r\n\t\treturn outputList;\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic getExtremes(geoPoints: IGeoPoint[]): IGeoRectangle {\r\n\r\n\t\tlet west: number = geoPoints[0].longitude;\r\n\t\tlet east: number = geoPoints[0].longitude;\r\n\t\tlet north: number = geoPoints[0].latitude;\r\n\t\tlet south: number = geoPoints[0].latitude;\r\n\r\n\t\tfor (let s: number = 0; s < geoPoints.length; s++) {\r\n\t\t\tlet longitude: number = geoPoints[s].longitude;\r\n\t\t\tlet latitude: number = geoPoints[s].latitude;\r\n\r\n\t\t\tif ((west > longitude)) {\r\n\t\t\t\twest = longitude;\r\n\t\t\t}\r\n\t\t\tif ((east < longitude)) {\r\n\t\t\t\teast = longitude;\r\n\t\t\t}\r\n\r\n\t\t\tif ((north < latitude)) {\r\n\t\t\t\tnorth = latitude;\r\n\t\t\t}\r\n\t\t\tif ((south > latitude)) {\r\n\t\t\t\tsouth = latitude;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { north: north, east: east, south: south, west: west };\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic isInside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\tif (r1.north < r2.north && r1.south > r2.south && r1.west > r2.west && r1.east < r2.east) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic isOutside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\tif (r1.south > r2.north || r1.north < r2.south || r1.west > r2.east || r1.east < r2.west) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\t//@todo: move to some utils?\r\n\t//@todo: add credits to: https://www.movable-type.co.uk/scripts/latlong.html\r\n\tpublic intermediatePoint(pointA: IGeoPoint, pointB: IGeoPoint, position: number) {\r\n\t\tvar phi1 = pointA.latitude * $math.RADIANS;\r\n\t\tlet lambda1 = pointA.longitude * $math.RADIANS;\r\n\r\n\t\tlet phi2 = pointB.latitude * $math.RADIANS;\r\n\t\tlet lambda2 = pointB.longitude * $math.RADIANS;\r\n\r\n\t\tvar sinPhi1 = Math.sin(phi1);\r\n\t\tlet cosPhi1 = Math.cos(phi1);\r\n\t\tlet sinLambda1 = Math.sin(lambda1);\r\n\t\tlet cosLambda1 = Math.cos(lambda1);\r\n\t\tvar sinPhi2 = Math.sin(phi2);\r\n\t\tlet cosPhi2 = Math.cos(phi2);\r\n\t\tlet sinLambda2 = Math.sin(lambda2);\r\n\t\tlet cosLambda2 = Math.cos(lambda2);\r\n\r\n\t\t// distance between points\r\n\t\tvar deltaPhi = phi2 - phi1;\r\n\t\tvar deltaLambda = lambda2 - lambda1;\r\n\t\tvar a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) + Math.cos(phi1) * Math.cos(phi2) * Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);\r\n\t\tvar delta = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n\t\tvar A = Math.sin((1 - position) * delta) / Math.sin(delta);\r\n\t\tvar B = Math.sin(position * delta) / Math.sin(delta);\r\n\r\n\t\tvar x = A * cosPhi1 * cosLambda1 + B * cosPhi2 * cosLambda2;\r\n\t\tvar y = A * cosPhi1 * sinLambda1 + B * cosPhi2 * sinLambda2;\r\n\t\tvar z = A * sinPhi1 + B * sinPhi2;\r\n\r\n\t\tvar phi3 = Math.atan2(z, Math.sqrt(x * x + y * y));\r\n\t\tvar lambda3 = Math.atan2(y, x);\r\n\r\n\t\treturn { latitude: phi3 * $math.DEGREES, longitude: lambda3 * $math.DEGREES };\r\n\t};\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Projection\"] = Projection;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Projection.ts"],"sourceRoot":""}
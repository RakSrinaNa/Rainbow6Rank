{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/map/MapSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapObject.ts","webpack:///../../../../../src/.internal/charts/map/Geo.ts","webpack:///../../../../../src/.internal/charts/map/MapLine.ts","webpack:///../../../../../src/.internal/charts/map/MapUtils.ts","webpack:///../../../../../src/.internal/charts/map/MapImage.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygon.ts","webpack:///../../../../../src/.internal/charts/map/MapLineSeries.ts","webpack:///../../../../../src/.internal/charts/map/SmallMap.ts","webpack:///../../../../../src/.internal/charts/map/MapSpline.ts","webpack:///../../../../../src/.internal/charts/map/MapArc.ts","webpack:///../../../../../src/.internal/charts/map/ZoomControl.ts","webpack:///./maps.js","webpack:///../../src/maps.ts","webpack:///../../../../../src/.internal/charts/types/MapChart.ts","webpack:///../../../../../src/.internal/charts/map/MapLineObject.ts","webpack:///../../../../../src/.internal/charts/map/MapPolygonSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapSplineSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapImageSeries.ts","webpack:///../../../../../src/.internal/charts/map/MapArcSeries.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Mercator.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Miller.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Eckert6.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Orthographic.ts","webpack:///../../../../../../src/.internal/charts/map/projections/Projection.ts"],"names":["__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__","__webpack_require__","MapSeriesDataItem","_super","_this","call","this","className","values","value","applyTheme","__WEBPACK_IMPORTED_MODULE_0_tslib__","Object","defineProperty","prototype","setValue","updateExtremes","geoPoints","s","length","longitude","latitude","west","east","north","south","__WEBPACK_IMPORTED_MODULE_1__series_Series__","MapSeries","isMeasured","nonScalingStroke","dataFields","createDataItem","validateData","__WEBPACK_IMPORTED_MODULE_3__core_utils_Iterator__","dataItems","iterator","dataItem","chart","checkInclude","includes","excludes","id","indexOf","getPropertyValue","setPropertyValue","invalidateData","processIncExc","handleObjectAdded","event","mapObject","newValue","parent","series","_geodata","geodata","_dataUsers","x","_dataSources","getDataSource","removeDispose","component","events","on","loadData","setDataSourceEvents","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","registeredClasses","MapObject","layout","clickable","validate","readerTitle","itemReaderText","__WEBPACK_IMPORTED_MODULE_1__core_Container__","multiline","multiline_1","multiline_1_1","next","done","segment","segment_1","segment_1_1","point","normalizePoint","geoPoint","y","__WEBPACK_IMPORTED_MODULE_1__core_utils_Math__","wrapAngleTo180","Math","asin","sin","latitude180","abs","angle","__WEBPACK_IMPORTED_MODULE_11__Geo__","MapLine","line","__WEBPACK_IMPORTED_MODULE_5__core_elements_Polyline__","stroke","__WEBPACK_IMPORTED_MODULE_7__core_utils_Color__","strokeOpacity","interfaceColors","__WEBPACK_IMPORTED_MODULE_8__core_utils_InterfaceColorSet__","getFor","shortestDistance","positionToPoint","position","multiGeoLine","images","images_1","images_1_1","property","invalidate","imagesToConnect","_a","_b","image","push","newMultiGeoLine","i","geoLine","newGeoLine","p","geoPointA","geoPointB","stepCount","max","d","intermediatePoint","projection","previousPoint","segments","projectGeoLine","_arrow","validatePosition","__WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__","lineObjects","measureElement","_lineObjects","__WEBPACK_IMPORTED_MODULE_4__core_utils_List__","__WEBPACK_IMPORTED_MODULE_2__MapLineObject__","handleLineObjectAdded","_disposers","template","mapLineObject","mapLine","arrow","createChild","shouldClone","width","height","triangle","__WEBPACK_IMPORTED_MODULE_3__core_elements_Triangle__","fillOpacity","__WEBPACK_IMPORTED_MODULE_9__core_utils_Percent__","rotation","horizontalCenter","verticalCenter","copyFrom","source","clone","__WEBPACK_IMPORTED_MODULE_1__MapObject__","__WEBPACK_IMPORTED_MODULE_6__core_Registry__","multiPointToGeo","points","pointToGeo","multiPolygon","multiGeoArea","surface","hole","multiLine","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","MapImage","moveTo","convert","__WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__","MapPolygon","polygon","__WEBPACK_IMPORTED_MODULE_2__core_elements_Polygon__","fill","tooltipPosition","multiGeoPolygon","projectGeoArea","pixelWidth","pixelHeight","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Disposer__","MapLineSeriesDataItem","_mapLine","mapLine_1","mapLines","create","__WEBPACK_IMPORTED_MODULE_2__MapLine__","addSprite","removeValue","_line","__WEBPACK_IMPORTED_MODULE_5__MapUtils__","_multiLine","_geoLine","_multiGeoLine","updateLineExtremes","__WEBPACK_IMPORTED_MODULE_1__MapSeries__","MapLineSeries","data","clear","useGeodata","geoJSON","features","type","geometry","console","log","feature","id_1","this_1","include","exclude","coordinates","dataObject","__WEBPACK_IMPORTED_MODULE_6__core_utils_Array__","multiLineString","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","properties","__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__","moveValue","_mapLines","lineTemplate","createLine","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","SmallMap","_chart","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","align","valign","percentHeight","percentWidth","margin","__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__","background","moveToPosition","updateMapSize","seriesContainer","rectangle","__WEBPACK_IMPORTED_MODULE_2__core_elements_Rectangle__","strokeWidth","__WEBPACK_IMPORTED_MODULE_6__core_utils_Color__","_series","handleSeriesAdded","handleSeriesRemoved","contains","newSeries","dataUsers","interactionsEnabled","svgPoint","rectPoint","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","zoomLevel","scale","min","svgPointToGeo","zoomToGeoPoint","get","set","updateRectangle","ceil","pixelX","pixelY","scaleRatio","afterDraw","maskRectangle","processConfig","config","len","map","hasKey","getKey","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","MapSpline","__WEBPACK_IMPORTED_MODULE_2__core_elements_Polyspline__","tensionX","tensionY","__WEBPACK_IMPORTED_MODULE_1__MapLine__","MapArc","__WEBPACK_IMPORTED_MODULE_2__core_elements_Polyarc__","__WEBPACK_IMPORTED_MODULE_9__core_utils_InterfaceColorSet__","ZoomControl","padding","plusButton","__WEBPACK_IMPORTED_MODULE_2__core_elements_Button__","label","text","__WEBPACK_IMPORTED_MODULE_7__core_utils_Percent__","slider","handleBackgroundClick","updateThumbSize","thumb","draggable","handleThumbDrag","minusButton","role","readerLive","language","translate","fixLayout","undefined","marginTop","marginBottom","toFront","toBack","minX","maxX","minY","maxY","marginLeft","marginRight","sprite","target","spritePoint","maxPower","maxZoomLevel","LN2","minPower","minZoomLevel","power","pow","zoomGeoPoint","updateThumb","zoomOut","__WEBPACK_IMPORTED_MODULE_6__core_interaction_Interaction__","body","ev","topParent","hasFocused","__WEBPACK_IMPORTED_MODULE_5__core_utils_Keyboard__","isKey","isFocused","zoomIn","minHeight","visible","minWidth","isDown","step","createBackground","__WEBPACK_IMPORTED_MODULE_3__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_8__core_Registry__","window","am4maps","__WEBPACK_IMPORTED_MODULE_0__es2015_maps__","__WEBPACK_IMPORTED_MODULE_20__internal_charts_map_Geo__","__WEBPACK_IMPORTED_MODULE_15__map_Geo__","MapChartDataItem","__WEBPACK_IMPORTED_MODULE_1__SerialChart__","MapChart","zoomDuration","zoomEasing","__WEBPACK_IMPORTED_MODULE_12__core_utils_Ease__","_prevZoomGeoPoint","__WEBPACK_IMPORTED_MODULE_5__map_projections_Projection__","deltaLongitude","maxPanOut","homeZoomLevel","inert","resizable","handleMapTransform","handleDoubleHit","handleDrag","chartContainer","udpateScaleRatio","chartContainerBg","e","dragStart","interactions","downPointers","getIndex","dragStop","focusable","handleMapDown","__WEBPACK_IMPORTED_MODULE_8__core_interaction_Interaction__","_zoomControl","__WEBPACK_IMPORTED_MODULE_7__core_utils_Keyboard__","getEventKey","pan","mouseWheelBehavior","ww","seriesWidth","hh","seriesHeight","maxWidth","maxHeight","applyInternalDefaults","__WEBPACK_IMPORTED_MODULE_14__core_utils_Type__","_mapAnimation","stop","__WEBPACK_IMPORTED_MODULE_11__core_utils_Utils__","htmlContainer","handleWheel","shift","_mouseWheelDisposer","dispose","wheelable","__WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__","centerPoint","westPoint","eastPoint","northPoint","southPoint","vScale","innerWidth","hScale","innerHeight","Infinity","centerGeoPoint","goHome","updateTooltipBounds","dispatch","seriesPoint","seriesPointToGeo","geoPointToSVG","geoPointToSeries","invert","center","duration","__WEBPACK_IMPORTED_MODULE_10__core_utils_Math__","animate","to","pixelPaddingLeft","pixelPaddingTop","zoomToMapObject","__WEBPACK_IMPORTED_MODULE_3__map_MapImage__","__WEBPACK_IMPORTED_MODULE_4__map_MapPolygon__","zoomToRectangle","level","_prevZoomLevel","_smallMap","smallMap","__WEBPACK_IMPORTED_MODULE_6__map_SmallMap__","zoomControl","createSeries","__WEBPACK_IMPORTED_MODULE_2__map_MapSeries__","invalidateProjection","createClassInstance","configOrder","a","b","asIs","field","homeGeoPoint","__WEBPACK_IMPORTED_MODULE_9__core_Registry__","MapLineObject","adjustRotation","MapPolygonSeriesDataItem","_mapPolygon","mapPolygon_1","mapPolygons","_polygon","_multiPolygon","_geoPolygon","geoPolygon","_multiGeoPolygon","updateAreaExtremes","mapPolygon","MapPolygonSeries","parsingStepDuration","_parseDataFrom","_mapPolygons","polygonTemplate","__WEBPACK_IMPORTED_MODULE_2__MapPolygon__","getPolygonById","dataContext","MapSplineSeriesDataItem","__WEBPACK_IMPORTED_MODULE_2__MapSpline__","__WEBPACK_IMPORTED_MODULE_1__MapLineSeries__","MapSplineSeries","MapImageSeriesDataItem","_mapImage","mapImage_1","mapImages","_point","__WEBPACK_IMPORTED_MODULE_6__MapUtils__","_geoPoint","mapImage","MapImageSeries","multiPoint","multiGeoPoint","__WEBPACK_IMPORTED_MODULE_5__core_utils_Array__","_mapImages","__WEBPACK_IMPORTED_MODULE_2__MapImage__","validateDataElement","MapArcSeriesDataItem","__WEBPACK_IMPORTED_MODULE_2__MapArc__","MapArcSeries","Mercator","unproject","atan","exp","PI","project","lambda","phi","tan","__WEBPACK_IMPORTED_MODULE_1__Projection__","Miller","Eckert6","j","k","sqrt","cos","delta","__WEBPACK_IMPORTED_MODULE_3__core_utils_Math__","Orthographic","getClipRectangle1","deltaLatitude","getRect1","getClipRectangle2","getRect2","clipGeoArea","geoArea","clippedArea","clipRectangle1","clipRectangle2","rect1","rect2","clippedAreas","surfaceRect","getExtremes","isInside","isOutside","clippedSurface1","clip","clippedHole1","clippedSurface2","clippedHole2","clippedAreas_1","clippedAreas_1_1","area","prevPoint","i_1","extraPoints","splice","apply","__WEBPACK_IMPORTED_MODULE_3__Geo__","Projection","deltaGama","clippedGeoArea","convertGeoArea","convertGeoLine","clipGeoLine","clippedLine","clippedSegments","clipLine","concat","clippedSegments2","convertedPoints","convertedAreaPoints","convertedSurface","convertedHole","convertedSegmentPoints","rotate","pointInRadians","__WEBPACK_IMPORTED_MODULE_2__core_utils_Math__","unrotate","deltaGamma","deltaLambda","deltaPhi","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","cosPhi","z","atan2","subjectPolyline","clipPolygon","cp1","cp2","inside","intersection","dc","dp","n1","n2","n3","inputList","subjectPolygon","outputList","r1","r2","pointA","pointB","phi1","lambda1","phi2","lambda2","sinPhi1","cosPhi1","sinLambda1","cosLambda1","sinPhi2","cosPhi2","sinLambda2","cosLambda2","A","B","phi3","lambda3","__WEBPACK_IMPORTED_MODULE_1__core_Registry__"],"mappings":"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","file":"maps.js","sourcesContent":["/**\r\n * Map series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"../series/Series\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapObject } from \"./MapObject\";\r\nimport { IListEvents } from \"../../core/utils/List\";\r\nimport { IMapDataObject, IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { DataSource } from \"../../core/data/DataSource\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * Longitude of the East-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * Longitude of the West-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * Latitude of the South-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * Latitude of the North-most point of the element.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeriesDataItem\";\r\n\t\tthis.values.value = {};\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the data item.\r\n\t *\r\n\t * Value may be used in heat-map calculations.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateExtremes(geoPoints: IGeoPoint[]): void {\r\n\t\tfor (let s: number = 0; s < geoPoints.length; s++) {\r\n\t\t\tlet longitude: number = geoPoints[s].longitude;\r\n\t\t\tlet latitude: number = geoPoints[s].latitude;\r\n\r\n\t\t\tif ((this.west > longitude) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = longitude;\r\n\t\t\t}\r\n\t\t\tif ((this.east < longitude) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = longitude;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < latitude) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = latitude;\r\n\t\t\t}\r\n\t\t\tif ((this.south > latitude) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = latitude;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * [GEOJSONGeometry description]\r\n *\r\n * @type {string}\r\n * @todo Description\r\n */\r\nexport type GEOJSONGeometry = \"Point\" | \"LineString\" | \"Polygon\" | \"MultiPoint\" | \"MultiLineString\" | \"MultiPolygon\";\r\n\r\n/**\r\n * Defines data fields for [[MapSeries]].\r\n *\r\n * @todo Alllow any number of values?\r\n */\r\nexport interface IMapSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * A field number in data for a numeric value of the map object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * A flag telling if the series should get data from `geodata` or not\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tuseGeodata?: boolean;\r\n\r\n\t/**\r\n\t * A list of object ids to include from the series.\r\n\t *\r\n\t * @type {string[]}\r\n\t */\r\n\tinclude?: string[];\r\n\r\n\t/**\r\n\t * A list of object ids to exclude from the series.\r\n\t *\r\n\t * @type {string[]}\r\n\t */\r\n\texclude?: string[];\r\n}\r\n\r\n/**\r\n * Defines events for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSeriesAdapters extends ISeriesAdapters, IMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for series of map objects.\r\n *\r\n * @see {@link IMapSeriesEvents} for a list of available Events\r\n * @see {@link IMapSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSeriesDataItem;\r\n\r\n\t/**\r\n\t * The longitude of the East-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * The longitude of the West-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * The latitude of the South-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * The latitude of the North-most point in the series. (out of all elements)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * @see {@link http://geojson.org/} GeoJSON official specification\r\n\t * @type {Object}\r\n\t */\r\n\tprotected _geodata: Object;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeries\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.value = \"value\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tif ((this.west > dataItem.west) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = dataItem.west;\r\n\t\t\t}\r\n\t\t\tif ((this.east < dataItem.east) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = dataItem.east;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < dataItem.north) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = dataItem.north;\r\n\t\t\t}\r\n\t\t\tif ((this.south > dataItem.south) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = dataItem.south;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.chart.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether object should be included in series.\r\n\t *\r\n\t * @param  {string[]}  includes  A list of explicitly included ids\r\n\t * @param  {string[]}  excludes  A list of explicitly excluded ids\r\n\t * @param  {string}    id        Id of the object\r\n\t * @return {boolean}             Include?\r\n\t */\r\n\tprotected checkInclude(includes: string[], excludes: string[], id: string): boolean {\r\n\t\tif (includes) {\r\n\t\t\tif (includes.length == 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (includes.indexOf(id) == -1) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (excludes && excludes.length > 0) {\r\n\t\t\tif (excludes.indexOf(id) != -1) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Should the map extract all the data about element from the GeoJSON?\r\n\t *\r\n\t * This is especially relevant for [[MapPolygonSeries]]. If not set to `true`\r\n\t * polygon series will need to contain geographical data in itself in order\r\n\t * to be drawn.\r\n\t *\r\n\t * If this is set to `true`, series will try to extract data for its objects\r\n\t * from either chart-level `geodata` or from series' `geodata` which holds\r\n\t * map infor in GeoJSON format.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Use GeoJSON data?\r\n\t */\r\n\tpublic set useGeodata(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"useGeodata\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use GeoJSON data?\r\n\t */\r\n\tpublic get useGeodata(): boolean {\r\n\t\treturn this.getPropertyValue(\"useGeodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be explictly included in the series.\r\n\t *\r\n\t * If this is not set, the series will automatically include all of the\r\n\t * objects, available in the GeoJSON map. (minus the ones listed in\r\n\t * `exclude`)\r\n\t *\r\n\t * If you need to display only specific objects, use `include`. E.g.:\r\n\t *\r\n\t * `include = [\"FR\", \"ES\", \"DE\"];`\r\n\t *\r\n\t * The above will show only France, Spain, and Germany out of the whole map.\r\n\t *\r\n\t * @param {string[]}  value  Included objects\r\n\t */\r\n\tpublic set include(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"include\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc() {\r\n\t\t//this.data = [];\r\n\t\tthis.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string[]} Included objects\r\n\t */\r\n\tpublic get include(): string[] {\r\n\t\treturn this.getPropertyValue(\"include\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be excluded from the series.\r\n\t *\r\n\t * E.g. you want to include all of the areas from a GeoJSON map, except\r\n\t * Antarctica.\r\n\t *\r\n\t * You'd leave `include` empty, and set `exclude = [\"AQ\"]`.\r\n\t *\r\n\t * @param {string[]}  value  Excluded ids\r\n\t */\r\n\tpublic set exclude(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"exclude\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string[]} Excluded ids\r\n\t */\r\n\tpublic get exclude(): string[] {\r\n\t\treturn this.getPropertyValue(\"exclude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a newly added object.\r\n\t *\r\n\t * @param {IListEvents<MapObject>[\"inserted\"]} event [description]\r\n\t */\r\n\tprotected handleObjectAdded(event: IListEvents<MapObject>[\"inserted\"]) {\r\n\t\tlet mapObject: MapObject = event.newValue;\r\n\t\tmapObject.parent = this;\r\n\t\tmapObject.series = this;\r\n\t}\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * The series supports the following GeoJSON objects: `Point`, `LineString`,\r\n\t * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n\t *\r\n\t * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n\t * @param {Object} geoJSON GeoJSON data\r\n\t */\r\n\tpublic set geodata(geodata: Object) {\r\n\t\tif (geodata != this._geodata) {\r\n\t\t\tthis._geodata = geodata;\r\n\t\t\tthis.invalidateData();\r\n\r\n\t\t\t$iter.each(this._dataUsers.iterator(), (x) => {\r\n\t\t\t\tx.invalidateData();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Object} GeoJSON data\r\n\t */\r\n\tpublic get geodata(): Object {\r\n\t\treturn this._geodata;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @param {DataSource} value Data source\r\n\t */\r\n\tpublic set geodataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"geodata\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"geodata\"] = value;\r\n\t\tthis._dataSources[\"geodata\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"geodata\")\r\n\t\t}, this);\r\n\t\tthis.setDataSourceEvents(value, \"geodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[DataSource]] specifically for loading Component's data.\r\n\t *\r\n\t * @return {DataSource} Data source\r\n\t */\r\n\tpublic get geodataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.getDataSource(\"geodata\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"geodata\"];\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSeries\"] = MapSeries;\r\nregistry.registeredClasses[\"MapSeriesDataItem\"] = MapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSeries.ts","/**\r\n * Map object module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines propeties for [[MapObject]].\r\n */\r\nexport interface IMapObjectProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[MapObject]].\r\n */\r\nexport interface IMapObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapObjectAdapters extends IContainerAdapters, IMapObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all map objects: lines, images, etc.\r\n *\r\n * @see {@link IMapObjectEvents} for a list of available events\r\n * @see {@link IMapObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapObjectProperties}\r\n\t */\r\n\tpublic _properties!: IMapObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapObjectAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapObjectEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapObjectEvents;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapSeries}\r\n\t */\r\n\tpublic series: MapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapObject\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.clickable = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates this object, forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis.readerTitle = this.series.itemReaderText;\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapObject\"] = MapObject;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapObject.ts","/**\r\n * A collection of GeoJSON format-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * Normalizes a geo-point.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint}  geoPoint  Source geo-point\r\n * @return {IGeoPoint}            Normalized geo-point\r\n */\r\nexport function normalizePoint(geoPoint: IGeoPoint): IGeoPoint {\r\n\tlet longitude = wrapAngleTo180(geoPoint.longitude);\r\n\tlet latitude = Math.asin(Math.sin((geoPoint.latitude * $math.RADIANS))) * $math.DEGREES;\r\n\r\n\tlet latitude180 = wrapAngleTo180(geoPoint.latitude);\r\n\r\n\tif (Math.abs(latitude180) > 90) {\r\n\t\tlongitude = wrapAngleTo180(longitude + 180);\r\n\t}\r\n\r\n\tgeoPoint.longitude = longitude;\r\n\tgeoPoint.latitude = latitude;\r\n\r\n\treturn geoPoint;\r\n}\r\n\r\n/**\r\n * Normalizes all points of a geo-line.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint[][]}  multiline  Source geo-line\r\n * @return {IGeoPoint[]}               Normalized geo-line\r\n */\r\nexport function normalizeMultiline(multiline: IGeoPoint[][]): IGeoPoint[][] {\r\n\tfor (let segment of multiline) {\r\n\t\tfor (let point of segment) {\r\n\t\t\tpoint = normalizePoint(point);\r\n\t\t}\r\n\t}\r\n\treturn multiline;\r\n}\r\n\r\n/**\r\n * [wrapAngleTo180 description]\r\n *\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n * @param  {number}  angle  Angle\r\n * @return {number}         Angle\r\n */\r\nexport function wrapAngleTo180(angle: number): number {\r\n\tangle = angle % 360;\r\n\r\n\tif (angle > 180) {\r\n\t\tangle -= 360;\r\n\t}\r\n\tif (angle < -180) {\r\n\t\tangle += 360;\r\n\t}\r\n\r\n\treturn angle;\r\n}\r\n\r\n/**\r\n * Converts a geo point to a regular point object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IGeoPoint}  geoPoint  Source geo point\r\n * @return {IPoint}               Point\r\n */\r\nexport function geoToPoint(geoPoint: IGeoPoint): IPoint {\r\n\treturn { x: geoPoint.longitude, y: geoPoint.latitude };\r\n}\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/Geo.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapLineObject } from \"./MapLineObject\";\r\nimport { MapLineSeriesDataItem, MapLineSeries } from \"./MapLineSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $geo from \"./Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLine]].\r\n */\r\nexport interface IMapLineProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Lat/long coordinates of all line ends and intermediate elbows.\r\n\t */\r\n\tmultiGeoLine?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * If `true` it line will be arched in the way to simulate shortest path\r\n\t * over curvature of Earth's surface, based on currently used on projection.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tshortestDistance?: boolean;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t */\r\n\timagesToConnect?: MapImage[];\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLine]].\r\n */\r\nexport interface IMapLineEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLine]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineAdapters extends IMapObjectAdapters, IMapLineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a line on the map.\r\n *\r\n * @see {@link IMapLineEvents} for a list of available events\r\n * @see {@link IMapLineAdapters} for a list of available Adapters\r\n */\r\nexport class MapLine extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineProperties}\r\n\t */\r\n\tpublic _properties!: IMapLineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapLineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapLineEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapLineEvents;\r\n\r\n\t/**\r\n\t * A line visual element.\r\n\t *\r\n\t * @type {Polyline}\r\n\t */\r\n\tpublic line: Polyline;\r\n\r\n\t/**\r\n\t * [_lineObjects description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {ListTemplate<MapLineObject>}\r\n\t */\r\n\tprotected _lineObjects: ListTemplate<MapLineObject>;\r\n\r\n\t/**\r\n\t * [_arrow description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MapLineObject}\r\n\t */\r\n\tprotected _arrow: MapLineObject;\r\n\r\n\t/**\r\n\t * [_distance description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _distance: number;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapLineSeries}\r\n\t */\r\n\tpublic series: MapLineSeries;\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t * @ignore\r\n\t */\r\n\tprotected _imagesToConnect: MapImage[];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLine\";\r\n\r\n\t\t// Create a line and set its default properties\r\n\t\tthis.line = new Polyline();\r\n\t\tthis.line.stroke = color();\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.shortestDistance = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position within the line (0-1) to a physical point\r\n\t * coordinates.\r\n\t *\r\n\t * 0 indicates start of the line, 0.5 - middle, while 1 indicates the end.\r\n\t *\r\n\t * @param  {number}             position  Position (0-1)\r\n\t * @return {IOrientationPoint}            Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tif (this.line) {\r\n\t\t\treturn this.line.positionToPoint(position);\r\n\t\t}\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [multiGeoLine description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IGeoPoint[][]} multiGeoLine [description]\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoLine\", $geo.normalizeMultiline(multiGeoLine), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} [description]\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\treturn this.getPropertyValue(\"multiGeoLine\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Instead of setting longitudes/latitudes you can set an array of images which will be connected by the line\r\n\t *\r\n\t * @param {MapImages[]} images\r\n\t */\r\n\tpublic set imagesToConnect(images: MapImage[]) {\r\n\t\t//@todo dispose listeners if previous imagesToConnect exists\r\n\t\tfor (let image of images) {\r\n\t\t\timage.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\tif (event.property == \"longitude\" || event.property == \"latitude\") {\r\n\t\t\t\t\tthis.invalidate();\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"imagesToConnect\", images);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapImages[]}\r\n\t */\r\n\tpublic get imagesToConnect(): MapImage[] {\r\n\t\treturn this.getPropertyValue(\"imagesToConnect\");\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the line, effectively forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chart: MapChart = this.series.chart;\r\n\t\t//let multiPoints: IPoint[][] = [];\r\n\t\tlet multiGeoLine: IGeoPoint[][] = this.multiGeoLine;\r\n\r\n\t\tif (this.imagesToConnect) {\r\n\t\t\tlet segment: IGeoPoint[] = [];\r\n\t\t\tmultiGeoLine = [segment];\r\n\r\n\t\t\tfor (let image of this.imagesToConnect) {\r\n\t\t\t\tsegment.push({ longitude: image.longitude, latitude: image.latitude });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.shortestDistance) {\r\n\t\t\tlet newMultiGeoLine: IGeoPoint[][] = [];\r\n\r\n\t\t\tfor (let i = 0; i < multiGeoLine.length; i++) {\r\n\t\t\t\tlet geoLine: IGeoPoint[] = multiGeoLine[i];\r\n\t\t\t\tlet newGeoLine: IGeoPoint[] = [];\r\n\r\n\t\t\t\tfor (let p = 1; p < geoLine.length; p++) {\r\n\t\t\t\t\tlet geoPointA: IGeoPoint = geoLine[p - 1];\r\n\t\t\t\t\tlet geoPointB: IGeoPoint = geoLine[p];\r\n\r\n\t\t\t\t\tlet stepCount: number = Math.max(Math.abs(geoPointA.latitude - geoPointB.latitude), Math.abs(geoPointA.longitude - geoPointB.longitude));\r\n\t\t\t\t\t//let latitudeStep: number = (geoPointB.latitude - geoPointA.latitude) / stepCount;\r\n\t\t\t\t\t//let longitudeStep: number = (geoPointB.longitude - geoPointA.longitude) / stepCount;\r\n\r\n\t\t\t\t\tfor (let d = 0; d < stepCount; d++) {\r\n\t\t\t\t\t\tlet intermediatePoint = chart.projection.intermediatePoint(geoPointA, geoPointB, d / stepCount);\r\n\r\n\t\t\t\t\t\tif (newGeoLine.length > 0) {\r\n\t\t\t\t\t\t\tlet previousPoint = newGeoLine[newGeoLine.length - 1];\r\n\t\t\t\t\t\t\tif (Math.abs(previousPoint.longitude - intermediatePoint.longitude) > 359) {\r\n\t\t\t\t\t\t\t\tnewMultiGeoLine.push(newGeoLine);\r\n\t\t\t\t\t\t\t\tnewGeoLine = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnewGeoLine.push(intermediatePoint);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// add last point to avoid gap\r\n\t\t\t\t\tnewGeoLine.push(geoPointB);\r\n\t\t\t\t}\r\n\t\t\t\tnewMultiGeoLine.push(newGeoLine);\r\n\t\t\t}\r\n\t\t\tmultiGeoLine = newMultiGeoLine;\r\n\t\t}\r\n\r\n\t\tthis.line.segments = chart.projection.projectGeoLine(multiGeoLine);\r\n\r\n\t\tif (this._arrow) {\r\n\t\t\tthis._arrow.validatePosition();\r\n\t\t}\r\n\r\n\t\t$iter.each(this.lineObjects.iterator(), (x) => {\r\n\t\t\tx.validatePosition();\r\n\t\t});\r\n\r\n\t\tthis.line.parent = this;\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * The line should take the shortest path over the globe.\r\n\t *\r\n\t * Enabling this will make the line look differently in different\r\n\t * projections. Only `MapLine` supports this setting, `MapArc` and\r\n\t * `MapSplice` don't.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Real path?\r\n\t */\r\n\tpublic set shortestDistance(value: boolean) {\r\n\t\tthis.setPropertyValue(\"shortestDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Real path?\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn this.getPropertyValue(\"shortestDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * List of separate line objects, the line consists of.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @readonly\r\n\t * @return {ListTemplate<MapLineObject>} List of line objects\r\n\t */\r\n\tpublic get lineObjects(): ListTemplate<MapLineObject> {\r\n\t\tif (!this._lineObjects) {\r\n\t\t\tthis._lineObjects = new ListTemplate<MapLineObject>(new MapLineObject());\r\n\t\t\tthis._lineObjects.events.on(\"inserted\", this.handleLineObjectAdded, this);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._lineObjects));\r\n\t\t\tthis._disposers.push(this._lineObjects.template);\r\n\t\t}\r\n\r\n\t\treturn this._lineObjects;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorate a [[LineObject]] when it is added to the line.\r\n\t *\r\n\t * @param {IListEvents<MapLineObject>[\"inserted\"]}  event  Event\r\n\t */\r\n\tprotected handleLineObjectAdded(event: IListEvents<MapLineObject>[\"inserted\"]) {\r\n\t\tlet mapLineObject: MapLineObject = event.newValue;\r\n\t\tmapLineObject.mapLine = this;\r\n\t\tmapLineObject.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLineObject]] to use as an option arrowhead on the line.\r\n\t *\r\n\t * Just accessing this property will create a default arrowhead on the line\r\n\t * automatically.\r\n\t *\r\n\t * @param {MapLineObject}  arrow  Arrow element\r\n\t */\r\n\tpublic set arrow(arrow: MapLineObject) {\r\n\t\tthis._arrow = arrow;\r\n\t\tarrow.mapLine = this;\r\n\t\tarrow.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapLineObject} Arrow element\r\n\t */\r\n\tpublic get arrow(): MapLineObject {\r\n\t\tif (!this._arrow) {\r\n\t\t\tlet arrow: MapLineObject = this.createChild(MapLineObject);\r\n\t\t\tarrow.shouldClone = false;\r\n\t\t\tarrow.width = 8;\r\n\t\t\tarrow.height = 10;\r\n\t\t\tarrow.mapLine = this;\r\n\t\t\tarrow.position = 0.5;\r\n\r\n\t\t\tlet triangle = arrow.createChild(Triangle);\r\n\t\t\ttriangle.shouldClone = false;\r\n\t\t\ttriangle.fillOpacity = 1;\r\n\t\t\ttriangle.width = percent(100);\r\n\t\t\ttriangle.height = percent(100);\r\n\t\t\ttriangle.rotation = 90;\r\n\t\t\ttriangle.horizontalCenter = \"middle\";\r\n\t\t\ttriangle.verticalCenter = \"middle\";\r\n\t\t\tthis._arrow = arrow;\r\n\t\t}\r\n\t\treturn this._arrow;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies line properties and other attributes, like arrow, from another\r\n\t * instance of [[MapLine]].\r\n\t *\r\n\t * @param {MapLineObject}  source  Source map line\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.lineObjects.copyFrom(source.lineObjects);\r\n\t\tif (source._arrow) {\r\n\t\t\tthis.arrow = <MapLineObject>source.arrow.clone();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.north + (dataItem.south - dataItem.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the line center.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.east + (dataItem.west - dataItem.east) / 2;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLine\"] = MapLine;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLine.ts","/**\r\n * A collection of Map-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\n\r\n/**\r\n * Converts a multi-part polygon in X/Y coordinates to a geo-multipolygon in\r\n * geo-points (lat/long).\r\n * \r\n * @param  {number[][][][]}  multiPolygon  Source multi-polygon\r\n * @return {IGeoPoint[]}                   Geo-multipolygon\r\n */\r\n\r\nexport function multiPolygonToGeo(multiPolygon: number[][][][]): IGeoPoint[][][] {\r\n\tlet multiGeoArea: IGeoPoint[][][] = [];\r\n\r\n\tfor (let i: number = 0; i < multiPolygon.length; i++) {\r\n\r\n\t\tlet surface: number[][] = multiPolygon[i][0];\r\n\t\tlet hole: number[][] = multiPolygon[i][1];\r\n\r\n\t\t//let holePoints: IGeoPoint[] = [];\r\n\r\n\t\tmultiGeoArea[i] = [];\r\n\r\n\t\tif (surface) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(surface));\r\n\t\t}\r\n\r\n\t\tif (hole) {\r\n\t\t\tmultiGeoArea[i].push(multiPointToGeo(hole));\r\n\t\t}\r\n\t}\r\n\treturn multiGeoArea;\r\n}\r\n\r\n/**\r\n * Converts a multiline in X/Y coordinates to a geo-multiline in geo-points\r\n * (lat/long).\r\n * \r\n * @param  {number[][][]}  multiLine  Source multiline\r\n * @return {IGeoPoint[]}              Geo-multiline\r\n */\r\nexport function multiLineToGeo(multiLine: number[][][]): IGeoPoint[][] {\r\n\tlet multiGeoLine: IGeoPoint[][] = [];\r\n\r\n\tfor (let i = 0; i < multiLine.length; i++) {\r\n\t\tmultiGeoLine.push(multiPointToGeo(multiLine[i]));\r\n\t}\r\n\treturn multiGeoLine;\r\n}\r\n\r\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n * \r\n * @param  {number[][]}   points  Source points\r\n * @return {IGeoPoint[]}          Geo-points\r\n */\r\nexport function multiPointToGeo(points: number[][]): IGeoPoint[] {\r\n\tlet geoPoints: IGeoPoint[] = [];\r\n\tfor (let i = 0; i < points.length; i++) {\r\n\t\tgeoPoints.push(pointToGeo(points[i]));\r\n\t}\r\n\treturn geoPoints;\r\n}\r\n\r\n/**\r\n * Converts X/Y point into a lat/long geo-point.\r\n * \r\n * @param  {number[]}   point  Source point\r\n * @return {IGeoPoint}         Geo-point\r\n */\r\nexport function pointToGeo(point: number[]): IGeoPoint {\r\n\treturn { longitude: point[0], latitude: point[1] }\r\n}\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapUtils.ts","/**\r\n *\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapImageSeriesDataItem, MapImageSeries } from \"./MapImageSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapImage]].\r\n */\r\nexport interface IMapImageProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Latitude of the image location.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlatitude?: number;\r\n\r\n\t/**\r\n\t * Longitude of the mage location.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlongitude?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapImage]].\r\n */\r\nexport interface IMapImageEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImage]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageAdapters extends IMapObjectAdapters, IMapImageProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to place an image on the map.\r\n *\r\n * @see {@link IMapImageEvents} for a list of available events\r\n * @see {@link IMapImageAdapters} for a list of available Adapters\r\n */\r\nexport class MapImage extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapImageProperties}\r\n\t */\r\n\tpublic _properties!: IMapImageProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapImageAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapImageAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapImageEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapImageEvents;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapImageSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapImageSeries}\r\n\t */\r\n\tpublic series: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapImage\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude image is placed at.\r\n\t *\r\n\t * @param {number}  value  Latitude\r\n\t */\r\n\tpublic set latitude(value: number) {\r\n\t\tthis.setPropertyValue(\"latitude\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\treturn this.getPropertyValue(\"latitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude image is placed on.\r\n\t *\r\n\t * @param {number}  value  Longitude\r\n\t */\r\n\tpublic set longitude(value: number) {\r\n\t\tthis.setPropertyValue(\"longitude\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\treturn this.getPropertyValue(\"longitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions the image to it's current position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition(): void {\r\n\t\tif ($type.isNumber(this.latitude) && $type.isNumber(this.longitude)) {\r\n\t\t\tthis.moveTo(this.series.chart.projection.convert({ latitude: this.latitude, longitude: this.longitude }));\r\n\t\t}\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImage\"] = MapImage;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImage.ts","/**\r\n * Map polygon module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapPolygonSeriesDataItem, MapPolygonSeries } from \"./MapPolygonSeries\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { Polygon } from \"../../core/elements/Polygon\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================f================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapPolygon]].\r\n */\r\nexport interface IMapPolygonEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygon]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonAdapters extends IMapObjectAdapters, IMapPolygonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a polygon on the map.\r\n *\r\n * @see {@link IMapPolygonEvents} for a list of available events\r\n * @see {@link IMapPolygonAdapters} for a list of available Adapters\r\n */\r\nexport class MapPolygon extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapPolygonProperties}\r\n\t */\r\n\tpublic _properties!: IMapPolygonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapPolygonAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapPolygonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapPolygonEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapPolygonEvents;\r\n\r\n\t/**\r\n\t * A visual polygon element.\r\n\t *\r\n\t * @type {Polygon}\r\n\t */\r\n\tpublic polygon: Polygon;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapPolygonSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapPolygonSeries}\r\n\t */\r\n\tpublic series: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapPolygon\";\r\n\r\n\t\tthis.polygon = this.createChild(Polygon);\r\n\t\tthis.polygon.shouldClone = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"secondaryButton\");\r\n\t\tthis.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\t/*this.events.on(\"focus\", (event) => {\r\n\t\t\t//this.toFront();\r\n\t\t\t//this.isFocused = true;\r\n\t\t});*/\r\n\r\n\t\tthis.tooltipPosition = \"pointer\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Set of coordinates for the polygon.\r\n\t *\r\n\t * @param {IGeoPoint[][][]}  multiGeoPolygon  Polygon coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis.setPropertyValue(\"multiGeoPolygon\", multiGeoPolygon, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Polygon coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this.getPropertyValue(\"multiGeoPolygon\");\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the polygon, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series) {\r\n\t\t\tthis.polygon.points = this.series.chart.projection.projectGeoArea(this.multiGeoPolygon);\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t// Overriding, just to avoid extra measure\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center latitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Center latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.north + (dataItem.south - dataItem.north) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculated polygon center longitude.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Center longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet dataItem = this.dataItem;\r\n\t\treturn dataItem.east + (dataItem.west - dataItem.east) / 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Not 100% sure about this, as if we add something to MapPolygon this\r\n\t * won't be true, but otherwise we will get all 0 and the tooltip won't\r\n\t * be positioned properly\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Element's width in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get pixelWidth(): number {\r\n\t\treturn this.polygon.pixelWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's height in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get pixelHeight(): number {\r\n\t\treturn this.polygon.pixelHeight;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygon\"] = MapPolygon;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygon.ts","/**\r\n * Map line series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapLineDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapLineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapLineSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t *\r\n\t * @type {MapLine}\r\n\t */\r\n\tprotected _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line.\r\n\t *\r\n\t * @type {number[][]}\r\n\t */\r\n\tprotected _line: number[][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line.\r\n\t *\r\n\t * @type {number[][][]}\r\n\t */\r\n\tprotected _multiLine: number[][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line.\r\n\t *\r\n\t * @type {IGeoPoint[]}\r\n\t */\r\n\tprotected _geoLine: IGeoPoint[];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-segment line.\r\n\t *\r\n\t * @type {IGeoPoint[][]}\r\n\t */\r\n\tprotected _multiGeoLine: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {MapLineSeries}\r\n\t */\r\n\tpublic _component!: MapLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return {MapLine} Element\r\n\t */\r\n\tpublic get mapLine(): MapLine {\r\n\t\tif (!this._mapLine) {\r\n\t\t\tlet mapLine = this.component.mapLines.create(MapLine);\r\n\t\t\tthis._mapLine = mapLine;\r\n\t\t\tthis.addSprite(mapLine);\r\n\r\n\t\t\tthis._disposers.push(mapLine);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.mapLines.removeValue(mapLine);\r\n\t\t\t}));\t\t\t\t\t\t\r\n\t\t}\r\n\t\treturn this._mapLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [ 100, 150 ],\r\n\t *   [ 120, 200 ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][]}  line  Coordinates\r\n\t */\r\n\tpublic set line(line: number[][]) {\r\n\t\tthis._line = line;\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo([line]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get line(): number[][] {\r\n\t\treturn this._line;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ]\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 100 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][]}  multiLine  Coordinates\r\n\t */\r\n\tpublic set multiLine(multiLine: number[][][]) {\r\n\t\tthis._multiLine = multiLine;\r\n\t\tthis.multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get multiLine(): number[][][] {\r\n\t\treturn this._multiLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   { longitude: 3.121, latitude: 0.58 },\r\n\t *   { longitude: -5.199, latitude: 21.223 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.4} GeoJSON LineString reference\r\n\t * @param {IGeoPoint[][]}  geoLine  Coordinates\r\n\t */\r\n\tpublic set geoLine(geoLine: IGeoPoint[]) {\r\n\t\tthis._geoLine = geoLine;\r\n\t\tthis.multiGeoLine = [geoLine];\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get geoLine(): IGeoPoint[] {\r\n\t\treturn this._geoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     { longitude: 3.121, latitude: 0.58 },\r\n\t *     { longitude: -5.199, latitude: 21.223 }\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     { longitude: -5.199, latitude: 21.223 },\r\n\t *     { longitude: -12.9, latitude: 25.85 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n\t * @param {IGeoPoint[][]}  multiGeoLine  Coordinates\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: IGeoPoint[][]) {\r\n\t\tthis._multiGeoLine = multiGeoLine;\r\n\t\tthis.updateLineExtremes(multiGeoLine);\r\n\t\tthis.mapLine.multiGeoLine = this._multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get multiGeoLine(): IGeoPoint[][] {\r\n\t\treturn this._multiGeoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateLineExtremes(multiGeoLine: IGeoPoint[][]): void {\r\n\t\tfor (let i = 0; i < multiGeoLine.length; i++) {\r\n\t\t\tlet geoLine: IGeoPoint[] = multiGeoLine[i];\r\n\t\t\tthis.updateExtremes(geoLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds line data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tline?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds line data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoLine?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineSeriesAdapters extends IMapSeriesAdapters, IMapLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map line series.\r\n *\r\n * @see {@link IMapLineSeriesEvents} for a list of available Events\r\n * @see {@link IMapLineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapLineSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapLineSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapLine}\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A list of map lins in the series.\r\n\t *\r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapLines: ListTemplate<this[\"_mapLine\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiLine = \"multiLine\";\r\n\t\tthis.dataFields.line = \"line\";\r\n\r\n\t\tthis.dataFields.geoLine = \"geoLine\";\r\n\t\tthis.dataFields.multiGeoLine = \"multiGeoLine\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.mapLines.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0; i < features.length; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"LineString\" || type == \"MultiLineString\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"MultiLineString\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapLineDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiLineString: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiLineString) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiLineString = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.copyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t\t// important! this should go after super\r\n\t\t// if data is parsed in chunks, lines list is corrupted, fix it here\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapLines.moveValue(dataItem.mapLine);\r\n\t\t});\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * A list of lines in the series.\r\n\t *\r\n\t * @return {ListTemplate} Lines\r\n\t */\r\n\tpublic get mapLines(): ListTemplate<this[\"_mapLine\"]> {\r\n\r\n\t\tif (!this._mapLines) {\r\n\t\t\tlet lineTemplate: MapLine = this.createLine();\r\n\t\t\tlet mapLines = new ListTemplate<MapLine>(lineTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapLines));\r\n\t\t\tthis._disposers.push(mapLines.template);\r\n\t\t\tmapLines.events.on(\"inserted\", this.handleObjectAdded, this);\r\n\t\t\tthis._mapLines = mapLines;\r\n\t\t}\r\n\r\n\t\treturn this._mapLines;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return {MapLine} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapLine();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapLines.iterator(), (mapLine) => {\r\n\t\t\tmapLine.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapLines.template.copyFrom(source.mapLines.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineSeries\"] = MapLineSeries;\r\nregistry.registeredClasses[\"MapLineSeriesDataItem\"] = MapLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineSeries.ts","/**\r\n * A module for the mini-map control.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SmallMap]].\r\n */\r\nexport interface ISmallMapProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SmallMap]].\r\n */\r\nexport interface ISmallMapEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SmallMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISmallMapAdapters extends IContainerAdapters, ISmallMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SmallMap extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SmallMaPproperties}\r\n\t */\r\n\tpublic _properties!: ISmallMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ISmallMapAdapters}\r\n\t */\r\n\tpublic _adapter!: ISmallMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ISmallMapEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ISmallMapEvents;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A container that holds the visual elements for the mini-map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * The rectangle element which highlights current viewport.\r\n\t *\r\n\t * @type {Rectangle}\r\n\t */\r\n\tpublic rectangle: Rectangle;\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @type {List<MapSeries>}\r\n\t */\r\n\tprotected _series: List<MapSeries>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SmallMap\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.align = \"left\";\r\n\t\tthis.valign = \"bottom\";\r\n\t\tthis.percentHeight = 20;\r\n\t\tthis.percentWidth = 20;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set background defailts\r\n\t\tthis.background.fillOpacity = 0.9;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"hit\", this.moveToPosition, this);\r\n\t\tthis.events.on(\"maxsizechanged\", this.updateMapSize, this);\r\n\r\n\t\t// Create a container\r\n\t\tthis.seriesContainer = this.createChild(Container);\r\n\t\tthis.seriesContainer.shouldClone = false;\r\n\r\n\t\t// Create an outline rectangle\r\n\t\tlet rectangle: Rectangle = this.createChild(Rectangle);\r\n\t\trectangle.shouldClone = false;\r\n\t\trectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\trectangle.strokeWidth = 1;\r\n\t\trectangle.strokeOpacity = 0.5;\r\n\t\trectangle.fill = color(); //\"none\";\r\n\t\trectangle.verticalCenter = \"middle\";\r\n\t\trectangle.horizontalCenter = \"middle\";\r\n\t\trectangle.isMeasured = false;\r\n\t\tthis.rectangle = rectangle;\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<MapSeries>} Series\r\n\t */\r\n\tpublic get series(): List<MapSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<MapSeries>();\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<MapSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<MapSeries>[\"inserted\"]) {\r\n\t\tlet series: MapSeries = event.newValue;\r\n\t\tif (this.chart.series.contains(series)) {\r\n\t\t\tlet newSeries = series.clone();\r\n\t\t\tthis._series.removeValue(series);\r\n\t\t\tthis._series.push(newSeries);\r\n\t\t\tseries = newSeries;\r\n\r\n\t\t\tthis.chart.dataUsers.push(newSeries);\r\n\t\t}\r\n\t\tseries.chart = this.chart;\r\n\t\tseries.parent = this.seriesContainer;\r\n\t\tseries.interactionsEnabled = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<MapSeries>[\"removed\"]) {\r\n\t\t//let sourceSeries: MapSeries = event.oldValue;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Moves main map pan position after click on the small map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic moveToPosition(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tlet svgPoint: IPoint = event.svgPoint;\r\n\t\tlet rectPoint: IPoint = $utils.svgPointToSprite(svgPoint, this.rectangle);\r\n\r\n\t\tlet zoomLevel: number = this.chart.zoomLevel;\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\tlet x: number = (rectPoint.x + this.rectangle.pixelWidth / 2) / scale * zoomLevel;\r\n\t\tlet y: number = (rectPoint.y + this.rectangle.pixelHeight / 2) / scale * zoomLevel;\r\n\r\n\t\tlet geoPoint: IGeoPoint = this.chart.svgPointToGeo({ x: x, y: y });\r\n\r\n\t\tthis.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart/map that this control is meant for.\r\n\t *\r\n\t * @param {MapChart}  chart  Chart/map\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tif (this.chart != chart) {\r\n\t\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"mappositionchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"scaleratiochanged\", this.updateMapSize, this)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Chart/map\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the viewport recangle as per current map zoom/pan position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRectangle(): void {\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet zoomLevel: number = chart.zoomLevel;\r\n\t\tlet rectangle: Rectangle = this.rectangle;\r\n\r\n\t\trectangle.width = this.pixelWidth / zoomLevel;\r\n\t\trectangle.height = this.pixelHeight / zoomLevel;\r\n\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\r\n\t\tlet seriesContainer: Container = chart.seriesContainer;\r\n\r\n\t\tlet x: number = Math.ceil((zoomLevel * seriesContainer.pixelWidth / 2 - seriesContainer.pixelX) * scale / zoomLevel + rectangle.pixelWidth / 2);\r\n\t\tlet y: number = Math.ceil((zoomLevel * seriesContainer.pixelHeight / 2 - seriesContainer.pixelY) * scale / zoomLevel + rectangle.pixelHeight / 2);\r\n\r\n\t\trectangle.x = x;\r\n\t\trectangle.y = y;\r\n\t}\r\n\r\n\t/**\r\n\t * Update map size so that internal elements can redraw themselves after\r\n\t * the size of the small map changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateMapSize(): void {\r\n\t\tif (this.chart) {\r\n\t\t\tthis.seriesContainer.scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\t\tthis.afterDraw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update elements after drawing the small map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n\t\tthis.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\r\n\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/SmallMap.ts","/**\r\n * Map spline module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { MapSplineSeriesDataItem, MapSplineSeries } from \"./MapSplineSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapSpline]].\r\n */\r\nexport interface IMapSplineProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSpline]].\r\n */\r\nexport interface IMapSplineEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSpline]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineAdapters extends IMapLineAdapters, IMapSplineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a spline on the map.\r\n *\r\n * @see {@link IMapSplineEvents} for a list of available events\r\n * @see {@link IMapSplineAdapters} for a list of available Adapters\r\n */\r\nexport class MapSpline extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSplineProperties}\r\n\t */\r\n\tpublic _properties!: IMapSplineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSplineAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapSplineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapSplineEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapSplineEvents;\r\n\r\n\t/**\r\n\t * A visual element for the spline.\r\n\t *\r\n\t * @type {Polyspline}\r\n\t */\r\n\tpublic line: Polyspline;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapSplineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapSplineSeries}\r\n\t */\r\n\tpublic series: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSpline\";\r\n\r\n\t\t// Create a spline\r\n\t\tthis.line = new Polyspline();\r\n\t\tthis.line.tensionX = 0.8;\r\n\t\tthis.line.tensionY = 0.8;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ShortestDistance = true is not supported by MapSpline, only MapLine does support it\r\n\t * @default false\r\n\t * @param {boolean}  value\r\n\t * @todo: review description\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSpline\"] = MapSpline;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSpline.ts","/**\r\n * Map arched line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLine, IMapLineProperties, IMapLineAdapters, IMapLineEvents } from \"./MapLine\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Polyarc } from \"../../core/elements/Polyarc\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { MapArcSeries } from \"./MapArcSeries\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapArc]].\r\n */\r\nexport interface IMapArcProperties extends IMapLineProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArc]].\r\n */\r\nexport interface IMapArcEvents extends IMapLineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArc]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcAdapters extends IMapLineAdapters, IMapArcProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw an arched line on the map.\r\n *\r\n * @see {@link IMapArcEvents} for a list of available events\r\n * @see {@link IMapArcAdapters} for a list of available Adapters\r\n */\r\nexport class MapArc extends MapLine {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapArcProperties}\r\n\t */\r\n\tpublic _properties!: IMapArcProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapArcAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapArcAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapArcEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapArcEvents;\r\n\r\n\t/**\r\n\t * A visual element.\r\n\t *\r\n\t * @type {Polyarc}\r\n\t */\r\n\tpublic line: Polyarc;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t *\r\n\t * @type {MapArcSeries}\r\n\t */\r\n\tpublic series: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArc\";\r\n\r\n\t\t// Create a line\r\n\t\tthis.line = new Polyarc();\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ShortestDistance = true is not supported by MapArc, only MapLine does support it\r\n\t * @default false\r\n\t * @param {boolean}  value\r\n\t * @todo: review description\r\n\t */\r\n\tpublic get shortestDistance(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic set shortestDistance(value: boolean) {\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArc\"] = MapArc;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArc.ts","/**\r\n * Zoom control module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomControl]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomControlAdapters extends IContainerAdapters, IZoomControlProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ZoomControl extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IZoomControlProperties}\r\n\t */\r\n\tpublic _properties!: IZoomControlProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IZoomControlAdapters}\r\n\t */\r\n\tpublic _adapter!: IZoomControlAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IZoomControlEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IZoomControlEvents;\r\n\r\n\t/**\r\n\t * Zoom in button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic plusButton: Button;\r\n\r\n\t/**\r\n\t * Zoom out button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic minusButton: Button;\r\n\r\n\t/**\r\n\t * A zoom slider background element.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic slider: Container;\r\n\r\n\t/**\r\n\t * A zoom slider thumb element.\r\n\t * @type {Button}\r\n\t */\r\n\tpublic thumb: Button;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A type to use for the background element for zoom control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ZoomControl\";\r\n\r\n\t\tthis.align = \"right\";\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tthis.layout = \"vertical\";\r\n\t\tthis.padding(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet plusButton: Button = this.createChild(Button);\r\n\t\tplusButton.shouldClone = false;\r\n\t\tplusButton.label.text = \"+\";\r\n\t\tplusButton.width = percent(100);\r\n\t\tplusButton.padding(5, 5, 5, 5);\r\n\t\tthis.plusButton = plusButton;\r\n\r\n\t\tlet slider: Container = this.createChild(Container);\r\n\t\tslider.shouldClone = false;\r\n\t\tslider.width = percent(100);\r\n\t\tslider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tslider.background.fillOpacity = 0.05;\r\n\t\tslider.background.events.on(\"hit\", this.handleBackgroundClick, this);\r\n\t\tslider.events.on(\"sizechanged\", this.updateThumbSize, this);\r\n\t\tthis.slider = slider;\r\n\r\n\t\tlet thumb: Button = slider.createChild(Button);\r\n\t\tthumb.shouldClone = false;\r\n\t\tthumb.padding(0, 0, 0, 0);\r\n\t\tthumb.draggable = true;\r\n\t\tthumb.events.on(\"drag\", this.handleThumbDrag, this);\r\n\t\tthis.thumb = thumb;\r\n\r\n\t\tlet minusButton: Button = this.createChild(Button);\r\n\t\tminusButton.shouldClone = false;\r\n\t\tminusButton.label.text = \"-\";\r\n\t\tminusButton.padding(5, 5, 5, 5);\r\n\t\tthis.minusButton = minusButton;\r\n\r\n\t\t// Set roles\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\r\n\t\t// Set reader text\r\n\t\tthis.thumb.readerTitle = this.language.translate(\"Use arrow keys to zoom in and out\");\r\n\t\tthis.minusButton.readerTitle = this.language.translate(\"Press ENTER to zoom in\");\r\n\t\tthis.plusButton.readerTitle = this.language.translate(\"Press ENTER to zoom out\");\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property == \"layout\") {\r\n\t\t\t\tthis.fixLayout();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\tprotected fixLayout() {\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tthis.width = 40;\r\n\t\t\tthis.height = undefined;\r\n\t\t\tthis.minusButton.width = percent(100);\r\n\t\t\tthis.thumb.width = percent(100);\r\n\t\t\tthis.plusButton.width = percent(100);\r\n\t\t\tthis.slider.width = percent(100);\r\n\t\t\tthis.minusButton.marginTop = 1;\r\n\t\t\tthis.plusButton.marginBottom = 2;\r\n\t\t\tthis.slider.height = 0;\r\n\t\t\tthis.minusButton.toFront();\r\n\t\t\tthis.plusButton.toBack();\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.maxX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t}\r\n\t\telse if (this.layout == \"horizontal\") {\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t\tthis.thumb.maxY = 0;\r\n\t\t\tthis.height = 40;\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.minusButton.height = percent(100);\r\n\t\t\tthis.minusButton.width = 30;\r\n\t\t\tthis.thumb.height = percent(100);\r\n\t\t\tthis.thumb.width = undefined;\r\n\t\t\tthis.plusButton.height = percent(100);\r\n\t\t\tthis.plusButton.width = 30;\r\n\t\t\tthis.slider.height = percent(100);\r\n\t\t\tthis.slider.width = 0;\r\n\t\t\tthis.minusButton.marginLeft = 2;\r\n\t\t\tthis.plusButton.marginRight = 2;\r\n\t\t\tthis.minusButton.toBack();\r\n\t\t\tthis.plusButton.toFront();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles zoom operation after clicking on the slider background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic handleBackgroundClick(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\tlet sprite: Sprite = event.target;\r\n\t\tlet y: number = event.spritePoint.y;\r\n\t\tlet chart: MapChart = this.chart;\r\n\r\n\t\tlet maxPower: number = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n\t\tlet minPower: number = Math.log(chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tlet power: number = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n\t\tlet zoomLevel: number = Math.pow(2, power);\r\n\t\tchart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n\t}\r\n\r\n\t/**\r\n\t * A main chart/map that this zoom control is for.\r\n\t *\r\n\t * @param {MapChart}  chart  Map/chart\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\tchart.events.on(\"maxsizechanged\", this.updateThumbSize, this),\r\n\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateThumb, this),\r\n\t\t\tthis.minusButton.events.on(\"hit\", () => { chart.zoomOut(chart.zoomGeoPoint) }, chart),\r\n\t\t\tgetInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (this.topParent.hasFocused) {\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\t\tif (this.minusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomOut()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (this.plusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomIn()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"plus\")) {\r\n\t\t\t\t\t\tchart.zoomIn();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"minus\")) {\r\n\t\t\t\t\t\tchart.zoomOut();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, chart),\r\n\t\t\tthis.plusButton.events.on(\"hit\", () => { chart.zoomIn(chart.zoomGeoPoint) }, chart)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Map/chart\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the slider's thumb size based on the available zoom space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumbSize(): void {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet slider: Container = this.slider;\r\n\t\t\tlet thumb: Button = this.thumb;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n\r\n\t\t\t\tthumb.height = slider.pixelHeight / this.stepCount;\r\n\t\t\t\tthumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n\r\n\t\t\t\tif (thumb.pixelHeight <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n\t\t\t\tthumb.width = slider.pixelWidth / this.stepCount;\r\n\t\t\t\tthumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n\r\n\t\t\t\tif (thumb.pixelWidth <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates thumb according to current zoom position from map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumb(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\r\n\t\tif (!thumb.isDown) {\r\n\t\t\tlet step: number = (Math.log(chart.zoomLevel) - Math.log(this.chart.minZoomLevel)) / Math.LN2;\r\n\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * step / this.stepCount - thumb.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.x = slider.pixelWidth * step / this.stepCount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the actual map when slider position changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbDrag(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\t\tlet step: number;\r\n\r\n\t\tlet minStep = Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tstep = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstep = this.stepCount * thumb.pixelX / slider.pixelWidth;\r\n\t\t}\r\n\t\tstep = minStep + step;\r\n\r\n\t\tlet zoomLevel: number = Math.pow(2, step);\r\n\t\tchart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the step countfor the slider grid according to map's min and max\r\n\t * zoom level settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Step count\r\n\t */\r\n\tpublic get stepCount(): number {\r\n\t\treturn Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for slider control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {this} Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/ZoomControl.ts","import * as m from \"../es2015/maps\";\nwindow.am4maps = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./maps.js\n// module id = 539\n// module chunks = 4","/**\n * Duplicated\n */\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Maps\n */\nexport { MapChartDataItem, IMapPolygonDataObject, MapLineType, IMapLineDataObject, IMapImageDataObject, IMapDataObject, IMapChartDataFields, IMapChartProperties, IMapChartEvents, IMapChartAdapters, MapChart } from \"./.internal/charts/types/MapChart\";\nexport { MapSeriesDataItem, GEOJSONGeometry, IMapSeriesDataFields, IMapSeriesProperties, IMapSeriesEvents, IMapSeriesAdapters, MapSeries } from \"./.internal/charts/map/MapSeries\";\nexport { IMapObjectProperties, IMapObjectEvents, IMapObjectAdapters, MapObject } from \"./.internal/charts/map/MapObject\";\nexport { IMapPolygonProperties, IMapPolygonEvents, IMapPolygonAdapters, MapPolygon } from \"./.internal/charts/map/MapPolygon\";\nexport { IMapImageProperties, IMapImageEvents, IMapImageAdapters, MapImage } from \"./.internal/charts/map/MapImage\";\nexport { IMapLineProperties, IMapLineEvents, IMapLineAdapters, MapLine } from \"./.internal/charts/map/MapLine\";\nexport { IMapSplineProperties, IMapSplineEvents, IMapSplineAdapters, MapSpline } from \"./.internal/charts/map/MapSpline\";\nexport { IMapArcProperties, IMapArcEvents, IMapArcAdapters, MapArc } from \"./.internal/charts/map/MapArc\";\nexport { MapPolygonSeriesDataItem, IMapPolygonSeriesDataFields, IMapPolygonSeriesProperties, IMapPolygonSeriesEvents, IMapPolygonSeriesAdapters, MapPolygonSeries } from \"./.internal/charts/map/MapPolygonSeries\";\nexport { MapLineSeriesDataItem, IMapLineSeriesDataFields, IMapLineSeriesProperties, IMapLineSeriesEvents, IMapLineSeriesAdapters, MapLineSeries } from \"./.internal/charts/map/MapLineSeries\";\nexport { MapSplineSeriesDataItem, IMapSplineSeriesDataFields, IMapSplineSeriesProperties, IMapSplineSeriesEvents, IMapSplineSeriesAdapters, MapSplineSeries } from \"./.internal/charts/map/MapSplineSeries\";\nexport { MapImageSeriesDataItem, IMapImageSeriesDataFields, IMapImageSeriesProperties, IMapImageSeriesEvents, IMapImageSeriesAdapters, MapImageSeries } from \"./.internal/charts/map/MapImageSeries\";\nexport { MapArcSeriesDataItem, IMapArcSeriesDataFields, IMapArcSeriesProperties, IMapArcSeriesEvents, IMapArcSeriesAdapters, MapArcSeries } from \"./.internal/charts/map/MapArcSeries\";\nexport { multiPolygonToGeo, multiLineToGeo, multiPointToGeo, pointToGeo } from \"./.internal/charts/map/MapUtils\";\nexport { IZoomControlProperties, IZoomControlEvents, IZoomControlAdapters, ZoomControl } from \"./.internal/charts/map/ZoomControl\";\nexport { ISmallMapProperties, ISmallMapEvents, ISmallMapAdapters, SmallMap } from \"./.internal/charts/map/SmallMap\";\n\n/**\n * Elements: projections\n */\nexport { Projection } from \"./.internal/charts/map/projections/Projection\";\nimport * as projections from \"./.internal/charts/map/projections\";\nexport { projections };\nimport * as geo from \"./.internal/charts/map/Geo\";\nexport { geo };\n\n\n\n// WEBPACK FOOTER //\n// ../../src/maps.ts","/**\r\n * Map module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, MultiDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { MapSeries } from \"../map/MapSeries\";\r\nimport { MapObject } from \"../map/MapObject\";\r\nimport { MapImage } from \"../map/MapImage\";\r\nimport { MapPolygon } from \"../map/MapPolygon\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { DataSource } from \"../../core/data/DataSource\";\r\nimport { Projection } from \"../map/projections/Projection\";\r\nimport { ZoomControl } from \"../map/ZoomControl\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { SmallMap } from \"../map/SmallMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $geo from \"../map/Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic _component!: MapChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines interface for a map polygon object.\r\n */\r\nexport interface IMapPolygonDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single polygon information in X/Y coordinates.\r\n\t */\r\n\tpolygon?: number[][][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in X/Y coordinates.\r\n\t */\r\n\tmultiPolygon?: number[][][][];\r\n\r\n\t/**\r\n\t * Single polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPolygon?: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * Multi-part polygon information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPolygon?: IGeoPoint[][][];\r\n\r\n}\r\n\r\n/**\r\n * Defines types of map line.\r\n *\r\n * @type {string}\r\n */\r\nexport type MapLineType = \"line\" | \"arc\" | \"spline\" | \"realTrajectory\";\r\n\r\n/**\r\n * Defines interface for the map line object.\r\n */\r\nexport interface IMapLineDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Single line information in X/Y coordinates.\r\n\t */\r\n\tlineString?: number[][];\r\n\r\n\t/**\r\n\t * Multi-part line information in X/Y coordinates.\r\n\t */\r\n\tmultiLineString?: number[][][];\r\n\r\n\t/**\r\n\t * Single line information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoLineString?: IGeoPoint[];\r\n\r\n\t/**\r\n\t * Multi-part line information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoLineString?: IGeoPoint[][];\r\n\r\n}\r\n\r\n/**\r\n * Defines interface for a map image (market) object.\r\n */\r\nexport interface IMapImageDataObject {\r\n\r\n\t/**\r\n\t * A unique id of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tid?: string;\r\n\r\n\t/**\r\n\t * Numeric value for heat-map scenarios.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tvalue?: number;\r\n\r\n\t/**\r\n\t * Image position information in X/Y coordinates.\r\n\t */\r\n\tpoint?: number[];\r\n\r\n\t/**\r\n\t * Multi-image position information in X/Y coordinates.\r\n\t */\r\n\tmultiPoint?: number[][];\r\n\r\n\t/**\r\n\t * Image position information in lat/long geo-coordinates.\r\n\t */\r\n\tgeoPoint?: IGeoPoint;\r\n\r\n\t/**\r\n\t * Multi-image position information in lat/long geo-coordinates.\r\n\t */\r\n\tmultiGeoPoint?: IGeoPoint[];\r\n\r\n}\r\n\r\n/**\r\n * Defines type suitable for all map objects.\r\n *\r\n * @type {IMapPolygonDataObject | IMapLineDataObject}\r\n */\r\nexport type IMapDataObject = IMapPolygonDataObject | IMapLineDataObject;\r\n\r\n/**\r\n * Defines data fields for [[MapChart]].\r\n */\r\nexport interface IMapChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapChart]].\r\n */\r\nexport interface IMapChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Projection to be used when drawing the map.\r\n\t * \r\n\t * @type {Projection}\r\n\t */\r\n\tprojection?: Projection;\r\n\r\n\t/**\r\n\t * Degrees to shift map center by.\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdeltaLongitude?: number;\r\n\r\n\tmaxPanOut?: number;\r\n\r\n\thomeGeoPoint?: IGeoPoint;\r\n\r\n\thomeZoomLevel?: number;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t */\r\n\tmouseWheelBehavior?: \"zoom\" | \"none\";\t\r\n}\r\n\r\n/**\r\n * Defines events for [[MapChart]].\r\n */\r\nexport interface IMapChartEvents extends ISerialChartEvents {\r\n\r\n\t/**\r\n\t * Invoked when map is zoomed in or out.\r\n\t */\r\n\tzoomlevelchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when map is panned. (moved)\r\n\t */\r\n\tmappositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when scale ratio is changed, e.g when the whole map area is\r\n\t * resized and the map needs to be resized to fit it, without changing\r\n\t * zoom level.\r\n\t */\r\n\tscaleratiochanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapChartAdapters extends ISerialChartAdapters, IMapChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a map.\r\n *\r\n * @see {@link IMapChartEvents} for a list of available Events\r\n * @see {@link IMapChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/map/} for documentation\r\n */\r\nexport class MapChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapChartProperties}\r\n\t */\r\n\tpublic _properties!: IMapChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapChartEvents;\r\n\r\n\t/**\r\n\t * The East-most longitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic east: number;\r\n\r\n\t/**\r\n\t * The West-most longitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic west: number;\r\n\r\n\t/**\r\n\t * The South-most latitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic south: number;\r\n\r\n\t/**\r\n\t * The North-most latitude point of the map.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic north: number;\r\n\r\n\t/**\r\n\t * A ratio to be used when scaling the map shapes.\r\n\t *\r\n\t * @readonly\r\n\t * @type {number}\r\n\t */\r\n\tpublic scaleRatio: number = 1;\r\n\r\n\t/**\r\n\t * A screen point of the map's center.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic centerPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's left.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic westPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's right.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic eastPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's top.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic northPoint: IPoint;\r\n\r\n\t/**\r\n\t * A screen point of the map's bottom.\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic southPoint: IPoint;\r\n\r\n\t/**\r\n\t * Geo point of map center\r\n\t *\r\n\t * @readonly\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic centerGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Width of the actual map objects (px).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic seriesWidth: number;\r\n\r\n\t/**\r\n\t * Height of the actual map objects (px).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic seriesHeight: number;\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * @see {@link http://geojson.org/} GeoJSON official specification\r\n\t * @type {Object}\r\n\t */\r\n\tprotected _geodata: Object;\r\n\r\n\t/**\r\n\t * A reference to a [[ZoomControl]] instance.\r\n\t *\r\n\t * @type {ZoomControl}\r\n\t */\r\n\tprotected _zoomControl: ZoomControl;\r\n\r\n\t/**\r\n\t * A reference to a [[SmallMap]] control instance.\r\n\t *\r\n\t * @type {SmallMap}\r\n\t */\r\n\tprotected _smallMap: SmallMap;\r\n\r\n\t/**\r\n\t * [_zoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _zoomGeoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Default duration of zoom animations (ms).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic zoomDuration: number = 1000;\r\n\r\n\t/**\r\n\t * Default zooming animation easing function.\r\n\t *\r\n\t * @type {function}\r\n\t */\r\n\tpublic zoomEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Smallest available zoom level. The map will not allow to zoom out past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @defautl 1\r\n\t * @type {number}\r\n\t */\r\n\tpublic minZoomLevel: number = 1;\r\n\r\n\t/**\r\n\t * Biggest available zoom level. The map will not allow to zoom in past\r\n\t * this setting.\r\n\t *\r\n\t * NOTE: Should be power of 2.\r\n\t *\r\n\t * @default 32\r\n\t * @type {number}\r\n\t */\r\n\tpublic maxZoomLevel: number = 32;\r\n\r\n\t/**\r\n\t * [_prevZoomLevel description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _prevZoomLevel: number;\r\n\r\n\t/**\r\n\t * [_prevZoomGeoPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _prevZoomGeoPoint: IGeoPoint = { latitude: 0, longitude: 0 };\r\n\r\n\t/**\r\n\t * List of series of map objects. (lines, areas, etc.)\r\n\t *\r\n\t * @type {ListTemplate<MapSeries>}\r\n\t */\r\n\tpublic series: ListTemplate<MapSeries>;\r\n\r\n\t/**\r\n\t * A reference to currently playing animation, e.g. zooming.\r\n\t *\r\n\t * @type {Animation}\r\n\t */\r\n\tprotected _mapAnimation: Animation;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapChart\";\r\n\r\n\t\t// Set default projection\r\n\t\tthis.projection = new Projection();\r\n\r\n\t\tthis.deltaLongitude = 0;\r\n\t\tthis.maxPanOut = 0.7;\r\n\t\tthis.homeZoomLevel = 1;\r\n\r\n\t\t// Set padding\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\t// Create a container for map series\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.draggable = true;\r\n\t\tseriesContainer.inert = true;\r\n\t\tseriesContainer.resizable = true;\r\n\t\tseriesContainer.events.on(\"transformed\", this.handleMapTransform, this);\r\n\t\tseriesContainer.events.on(\"doublehit\", this.handleDoubleHit, this);\r\n\t\tseriesContainer.events.on(\"drag\", this.handleDrag, this);\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"datavalidated\", this.updateExtremes, this);\r\n\r\n\t\t// Set up main chart container, e.g. set backgrounds and events to monitor\r\n\t\t// size changes, etc.\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tseriesContainer.events.on(\"maxsizechanged\", this.udpateScaleRatio, this);\r\n\r\n\t\tlet chartContainerBg = chartContainer.background;\r\n\t\tchartContainerBg.fillOpacity = 0;\r\n\t\tchartContainerBg.events.on(\"down\", (e) => { this.seriesContainer.dragStart(e.target.interactions.downPointers.getIndex(0)); }, this);\r\n\t\tchartContainerBg.events.on(\"up\", (e) => { this.seriesContainer.dragStop() }, this);\r\n\t\tchartContainerBg.events.on(\"doublehit\", this.handleDoubleHit, this);\r\n\t\tchartContainerBg.focusable = true;\r\n\t\t\r\n\t\tchartContainer.events.on(\"down\", this.handleMapDown, this);\r\n\r\n\t\t// Add description to background\r\n\t\tthis.background.fillOpacity = 0;\r\n\t\tthis.background.readerTitle = this.language.translate(\"Use plus and minus keys on your keyboard to zoom in and out\");\r\n\r\n\t\t// Add keyboard events for panning\r\n\t\tthis._disposers.push(getInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\tif (this.topParent.hasFocused && (!this._zoomControl || !this._zoomControl.thumb.isFocused)) {\r\n\t\t\t\tswitch (keyboard.getEventKey(ev.event)) {\r\n\t\t\t\t\tcase \"up\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: 0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"down\":\r\n\t\t\t\t\t\tthis.pan({ x: 0, y: -0.1 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"left\":\r\n\t\t\t\t\t\tthis.pan({ x: 0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"right\":\r\n\t\t\t\t\t\tthis.pan({ x: -0.1, y: 0 });\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this));\r\n\r\n\t\tthis.mouseWheelBehavior = \"zoom\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Prevents map to be dragged out of the container area\r\n\t * @ignore \r\n\t */\r\n\tprotected handleDrag() {\r\n\t\t// not good doing it with adapters.\r\n\t\tlet ww = this.seriesWidth * this.zoomLevel * this.scaleRatio;\r\n\t\tlet hh = this.seriesHeight * this.zoomLevel * this.scaleRatio;\r\n\t\tlet x = this.seriesContainer.pixelX;\r\n\t\tlet y = this.seriesContainer.pixelY;\r\n\r\n\t\tlet maxPanOut = this.maxPanOut;\r\n\r\n\t\tlet minX = Math.min(this.maxWidth * (1 - maxPanOut) - ww / 2, -ww * (maxPanOut - 0.5));\r\n\t\tif (x < minX) {\r\n\t\t\tx = minX;\r\n\t\t}\r\n\r\n\t\tlet maxX = Math.max(this.maxWidth * maxPanOut + ww / 2, this.maxWidth + ww * (maxPanOut - 0.5));\r\n\t\tif (x > maxX) {\r\n\t\t\tx = maxX;\r\n\t\t}\r\n\r\n\r\n\t\tlet minY = Math.min(this.maxHeight * (1 - maxPanOut) - hh / 2, -hh * (maxPanOut - 0.5));\r\n\t\tif (y < minY) {\r\n\t\t\ty = minY;\r\n\t\t}\r\n\r\n\t\tlet maxY = Math.max(this.maxHeight * maxPanOut + hh / 2, this.maxHeight + hh * (maxPanOut - 0.5));\r\n\t\tif (y > maxY) {\r\n\t\t\ty = maxY;\r\n\t\t}\r\n\r\n\t\tthis.seriesContainer.moveTo({ x: x, y: y }, undefined, undefined, true);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Map\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles event when a pointer presses down on the map, e.g. user presses\r\n\t * down mouse or touches the map on a screen.\r\n\t *\r\n\t * Stops all animations currently going on.\r\n\t */\r\n\tprotected handleMapDown(): void {\r\n\t\tif (this._mapAnimation) {\r\n\t\t\tthis._mapAnimation.stop();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the event when user doubleclicks or dooubletaps the map: zooms\r\n\t * in on the reference point.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"doublehit\"]}  event  Original event\r\n\t */\r\n\tprotected handleDoubleHit(event: AMEvent<Sprite, ISpriteEvents>[\"doublehit\"]) {\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\t\tthis.zoomIn(geoPoint);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles mouse wheel event, e.g. user rotates mouse wheel while over the\r\n\t * map: zooms in or out depending on the direction of the wheel turn.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"wheel\"]}  event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.svgPointToGeo(svgPoint);\r\n\r\n\t\tif (event.shift.y < 0) {\r\n\t\t\tthis.zoomIn(geoPoint);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.zoomOut(geoPoint);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @param {\"zoom\" | \"none\"} mouse wheel behavior\r\n\t * @default zoomX\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoom\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.chartContainer.events.on(\"wheel\", this.handleWheel, this);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t\tthis.chartContainer.wheelable = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return { \"zoom\" | \"none\"}  mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior():  \"zoom\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\t\r\n\r\n\t/**\r\n\t * Projection to use for the map.\r\n\t *\r\n\t * Available projections:\r\n\t * * Eckert6\r\n\t * * Mercator\r\n\t * * Miller\r\n\t * * Orthographic\r\n\t *\r\n\t * ```TypeScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * map.projection = new am4maps.projections.Mercator();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"projection\": \"Mercator\"\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Projection}  projection  Projection\r\n\t */\r\n\tpublic set projection(projection: Projection) {\r\n\t\tprojection.deltaLongitude = this.deltaLongitude;\r\n\t\tthis.setPropertyValue(\"projection\", projection, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Projection} Projection\r\n\t */\r\n\tpublic get projection(): Projection {\r\n\t\treturn this.getPropertyValue(\"projection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the longitudes and latitudes of the most distant points from\r\n\t * the center in all four directions: West, East, North, and South.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateExtremes(): void {\r\n\r\n\t\tthis.west = null;\r\n\t\tthis.east = null;\r\n\t\tthis.north = null;\r\n\t\tthis.south = null;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif ((this.west > series.west) || !$type.isNumber(this.west)) {\r\n\t\t\t\tthis.west = series.west;\r\n\t\t\t}\r\n\t\t\tif ((this.east < series.east) || !$type.isNumber(this.east)) {\r\n\t\t\t\tthis.east = series.east;\r\n\t\t\t}\r\n\r\n\t\t\tif ((this.north < series.north) || !$type.isNumber(this.north)) {\r\n\t\t\t\tthis.north = series.north;\r\n\t\t\t}\r\n\t\t\tif ((this.south > series.south) || !$type.isNumber(this.south)) {\r\n\t\t\t\tthis.south = series.south;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// must reset\r\n\t\tthis.projection.centerPoint = { x: 0, y: 0 };\r\n\t\tthis.projection.scale = 1;\r\n\r\n\t\t// temporary setting deltaLongitude to 0 in order to measure w/h correctly\r\n\t\tlet deltaLongitude = this.projection.deltaLongitude;\r\n\t\tthis.projection.deltaLongitude = 0;\r\n\t\tlet westPoint: IPoint = this.projection.convert({ longitude: this.west, latitude: (this.south - this.north) / 2 });\r\n\t\tlet eastPoint: IPoint = this.projection.convert({ longitude: this.east, latitude: (this.south - this.north) / 2 });\r\n\r\n\t\tlet northPoint: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.north });\r\n\t\tlet southPoint: IPoint = this.projection.convert({ longitude: (this.east - this.west) / 2, latitude: this.south });\r\n\t\tthis.projection.deltaLongitude = deltaLongitude;\r\n\r\n\t\tthis.projection.centerPoint = { x: westPoint.x + (eastPoint.x - westPoint.x) / 2, y: northPoint.y + (southPoint.y - northPoint.y) / 2 };\r\n\r\n\t\tlet scaleRatio: number;\r\n\r\n\t\tlet seriesWidth = eastPoint.x - westPoint.x;\r\n\t\tlet seriesHeight = southPoint.y - northPoint.y;\r\n\r\n\t\tlet vScale: number = this.chartContainer.innerWidth / seriesWidth;\r\n\t\tlet hScale: number = this.chartContainer.innerHeight / seriesHeight;\r\n\r\n\t\tif (vScale > hScale) {\r\n\t\t\tscaleRatio = hScale;\r\n\t\t} else {\r\n\t\t\tscaleRatio = vScale;\r\n\t\t}\r\n\r\n\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\tscaleRatio = 1;\r\n\t\t}\r\n\r\n\t\tthis.projection.scale = scaleRatio;\r\n\t\tthis.seriesWidth = seriesWidth * scaleRatio;\r\n\t\tthis.seriesHeight = seriesHeight * scaleRatio;\r\n\r\n\t\tthis.udpateScaleRatio();\r\n\r\n\t\tlet seriesContainer: Container = this.seriesContainer;\r\n\t\tlet chartContainer: Container = this.chartContainer;\r\n\r\n\t\tseriesContainer.x = chartContainer.pixelWidth / 2;\r\n\t\tseriesContainer.y = chartContainer.pixelHeight / 2;\r\n\r\n\t\tthis.centerGeoPoint = this.svgPointToGeo({x:this.maxWidth / 2, y:this.maxHeight / 2});\r\n\r\n\t\tthis.goHome();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)calculates a ratio which should be used to scale the actual map so\r\n\t * that it fits perfectly into available space. Helps to avoid redrawing of all the map if container size changes\r\n\t * @ignore\r\n\t */\r\n\tprotected udpateScaleRatio(): void {\r\n\t\tlet scaleRatio: number;\r\n\r\n\t\tlet vScale: number = this.chartContainer.innerWidth / this.seriesWidth;\r\n\t\tlet hScale: number = this.chartContainer.innerHeight / this.seriesHeight;\r\n\r\n\t\tif (vScale > hScale) {\r\n\t\t\tscaleRatio = hScale;\r\n\t\t} else {\r\n\t\t\tscaleRatio = vScale;\r\n\t\t}\r\n\r\n\t\tif ($type.isNaN(scaleRatio) || scaleRatio == Infinity) {\r\n\t\t\tscaleRatio = 1;\r\n\t\t}\r\n\r\n\t\tif (scaleRatio != this.scaleRatio) {\r\n\t\t\tthis.scaleRatio = scaleRatio;\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.scale = this.scaleRatio;\r\n\t\t\t\tseries.updateTooltipBounds();\r\n\t\t\t});\r\n\r\n\t\t\tthis.dispatch(\"scaleratiochanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point within map container to geographical (lat/long)\r\n\t * coordinates.\r\n\t *\r\n\t * @param  {IPoint}     point  Source point\r\n\t * @return {IGeoPoint}         Geo-point\r\n\t */\r\n\tpublic svgPointToGeo(point: IPoint): IGeoPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = $utils.svgPointToSprite(point, series);\r\n\t\t\treturn this.seriesPointToGeo(seriesPoint);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within map's\r\n\t * container.\r\n\t *\r\n\t * @param  {IGeoPoint}  point  Source geo-point\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic geoPointToSVG(point: IGeoPoint): IPoint {\r\n\t\tlet series: MapSeries = <MapSeries>this.series.getIndex(0);\r\n\t\tif (series) {\r\n\t\t\tlet seriesPoint: IPoint = this.geoPointToSeries(point);\r\n\t\t\treturn $utils.spritePointToSvg(seriesPoint, series);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point (X/Y) within actual objects of the map to geographical\r\n\t * (lat/long) coordinates.\r\n\t *\r\n\t * @param  {IPoint}     point  Source point\r\n\t * @return {IGeoPoint}         Geo-point\r\n\t */\r\n\tpublic seriesPointToGeo(point: IPoint): IGeoPoint {\r\n\t\treturn this.projection.invert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical (lat/long) coordinates to an X/Y point within\r\n\t * actual elements/objects of the maps.\r\n\t *\r\n\t * @param  {IGeoPoint}  point  Source geo-point\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic geoPointToSeries(point: IGeoPoint): IPoint {\r\n\t\treturn this.projection.convert(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * The Map supports the following GeoJSON objects: `Point`, `LineString`,\r\n\t * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n\t *\r\n\t * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n\t * @param {Object} geoJSON GeoJSON data\r\n\t */\r\n\tpublic set geodata(geodata: Object) {\r\n\t\tif (geodata != this._geodata) {\r\n\t\t\tthis._geodata = geodata;\r\n\t\t\tthis.invalidateData();\r\n\r\n\t\t\t$iter.each(this._dataUsers.iterator(), (x) => {\r\n\t\t\t\tx.invalidateData();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Object} GeoJSON data\r\n\t */\r\n\tpublic get geodata(): Object {\r\n\t\treturn this._geodata;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to particular zoom level and centers on a latitude/longitude\r\n\t * coordinate.\r\n\t *\r\n\t * @param  {IGeoPoint}  point      Center coordinate\r\n\t * @param  {number}     zoomLevel  Zoom level\r\n\t * @param  {boolean}    center     Center on the given coordinate?\r\n\t * @param  {number}     duration   Duration for zoom animation (ms)\r\n\t * @return {Animation}             Zoom animation\r\n\t */\r\n\tpublic zoomToGeoPoint(point: IGeoPoint, zoomLevel: number, center?: boolean, duration?: number): Animation {\r\n\t\tif (!point) {\r\n\t\t\tpoint = this.zoomGeoPoint;\r\n\t\t}\r\n\t\tzoomLevel = $math.fitToRange(zoomLevel, this.minZoomLevel, this.maxZoomLevel);\r\n\r\n\t\tlet seriesPoint: IPoint = this.projection.convert(point);\r\n\r\n\t\tlet svgPoint: IPoint = this.geoPointToSVG(point);\r\n\t\tif (center) {\r\n\t\t\tsvgPoint = {\r\n\t\t\t\tx: this.maxWidth / 2,\r\n\t\t\t\ty: this.maxHeight / 2\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(duration)) {\r\n\t\t\tduration = this.zoomDuration;\r\n\t\t}\r\n\r\n\t\tthis._mapAnimation = this.seriesContainer.animate(\r\n\t\t\t[{\r\n\t\t\t\tproperty: \"scale\",\r\n\t\t\t\tto: zoomLevel\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"x\",\r\n\t\t\t\tto: svgPoint.x - seriesPoint.x * zoomLevel * this.scaleRatio - this.pixelPaddingLeft\r\n\t\t\t}, {\r\n\t\t\t\tproperty: \"y\",\r\n\t\t\t\tto: svgPoint.y - seriesPoint.y * zoomLevel * this.scaleRatio - this.pixelPaddingTop\r\n\t\t\t}], duration, this.zoomEasing);\r\n\r\n\t\treturn this._mapAnimation;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular map object.\r\n\t *\r\n\t * @param  {MapObject}  mapObject  Target map object\r\n\t * @param  {number}     zoomLevel  Zoom level\r\n\t * @param  {boolean}    center     Center on the given coordinate?\r\n\t * @param  {number}     duration   Duration for zoom animation (ms)\r\n\t * @return {Animation}             Zoom animation\r\n\t */\r\n\tpublic zoomToMapObject(mapObject: MapObject, zoomLevel?: number, center?: boolean, duration?: number): Animation {\r\n\r\n\t\tif (center == undefined) {\r\n\t\t\tcenter = true;\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapImage) {\r\n\t\t\tif ($type.isNaN(zoomLevel)) {\r\n\t\t\t\tzoomLevel = 5;\r\n\t\t\t}\r\n\t\t\treturn this.zoomToGeoPoint({ latitude: mapObject.latitude, longitude: mapObject.longitude }, zoomLevel, center, duration);\r\n\t\t}\r\n\r\n\t\tif (mapObject instanceof MapPolygon) {\r\n\t\t\tlet dataItem = mapObject.dataItem;\r\n\t\t\treturn this.zoomToRectangle(dataItem.north, dataItem.east, dataItem.south, dataItem.west, zoomLevel, center, duration);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the map to a particular viewport.\r\n\t *\r\n\t * The `north`, `east`, `south`, and `west` define boundaries of the\r\n\t * imaginary viewort we want to zoom the map to.\r\n\t *\r\n\t * `level` is not actual zoom level. The map will determine the zoom level\r\n\t * required to accommodated such zoom, and will adjust it by `level` if set.\r\n\t *\r\n\t * @param  {number}     north     Latitude of the North-most boundary\r\n\t * @param  {number}     east      Longitude of the East-most boundary\r\n\t * @param  {number}     south     Latitude of the South-most boundary\r\n\t * @param  {number}     west      Longitude of the West-most boundary\r\n\t * @param  {number}     level     Adjust zoom level\r\n\t * @param  {boolean}    center    Center on the given coordinate?\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomToRectangle(north: number, east: number, south: number, west: number, level?: number, center?: boolean, duration?: number): Animation {\r\n\t\tif ($type.isNaN(level)) {\r\n\t\t\tlevel = 1;\r\n\t\t}\r\n\r\n\t\tlet zoomLevel = level * Math.min((this.south - this.north) / (south - north), (this.west - this.east) / (west - east));\r\n\r\n\t\treturn this.zoomToGeoPoint({ latitude: north + (south - north) / 2, longitude: west + (east - west) / 2 }, zoomLevel, center, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms in the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param  {IGeoPoint}  geoPoint  Optional center point\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomIn(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel * 2, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out the map, optionally centering on particular latitude/longitude\r\n\t * point.\r\n\t *\r\n\t * @param  {IGeoPoint}  geoPoint  Optional center point\r\n\t * @param  {number}     duration  Duration for zoom animation (ms)\r\n\t * @return {Animation}            Zoom animation\r\n\t */\r\n\tpublic zoomOut(geoPoint?: IGeoPoint, duration?: number): Animation {\r\n\t\treturn this.zoomToGeoPoint(geoPoint, this.zoomLevel / 2, false, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Pans the maps using relative coordinates. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * {\r\n\t *   x: 0.1,\r\n\t *   y: -0.1\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will move the map by 10% to the right, and by 10% upwards.\r\n\t *\r\n\t * @param {IPoint}  shift     Vertical and horizontal shift\r\n\t * @param {number}  duration  Pan animation duration (ms)\r\n\t */\r\n\tpublic pan(shift: IPoint, duration?: number): void {\r\n\t\tlet point = this.geoPointToSVG(this.zoomGeoPoint);\r\n\t\tpoint.x += this.pixelWidth * shift.x;\r\n\t\tpoint.y += this.pixelHeight * shift.y;\r\n\t\tthis.zoomToGeoPoint(this.svgPointToGeo(point), this.zoomLevel, true, duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Current lat/long coordinates for the center of the viewport. (default\r\n\t * zoom reference point)\r\n\t *\r\n\t * @readonly\r\n\t * @return {IGeoPoint} Coordinates\r\n\t */\r\n\tpublic get zoomGeoPoint(): IGeoPoint {\r\n\t\treturn this.svgPointToGeo({\r\n\t\t\tx: this.pixelWidth / 2,\r\n\t\t\ty: this.pixelHeight / 2\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Current zoom level.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Zoom level\r\n\t */\r\n\tpublic get zoomLevel(): number {\r\n\t\treturn this.seriesContainer.scale;\r\n\t}\r\n\r\n\tpublic set zoomLevel(value: number) {\r\n\t\tthis.seriesContainer.scale = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches events after some map transformation, like pan or zoom.\r\n\t */\r\n\tprotected handleMapTransform(): void {\r\n\t\tif (this.zoomLevel != this._prevZoomLevel) {\r\n\t\t\tthis.dispatch(\"zoomlevelchanged\");\r\n\t\t\tthis._prevZoomLevel = this.zoomLevel;\r\n\t\t}\r\n\r\n\t\tif (this.zoomGeoPoint && (this._prevZoomGeoPoint.latitude != this.zoomGeoPoint.latitude || this._prevZoomGeoPoint.longitude != this.zoomGeoPoint.longitude)) {\r\n\t\t\tthis.dispatch(\"mappositionchanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[SmallMap]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a small map\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a small map\r\n\t * map.smallMap = new am4maps.SmallMap();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"smallMap\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {SmallMap}  smallMap  Small map\r\n\t */\r\n\tpublic set smallMap(smallMap: SmallMap) {\r\n\t\tif (this._smallMap) {\r\n\t\t\tthis.removeDispose(this._smallMap);\r\n\t\t}\r\n\t\tthis._smallMap = smallMap;\r\n\t\tthis._smallMap.chart = this;\r\n\t\tsmallMap.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {SmallMap} Small map\r\n\t */\r\n\tpublic get smallMap(): SmallMap {\r\n\t\tif (!this._smallMap) {\r\n\t\t\tlet smallMap: SmallMap = new SmallMap();\r\n\t\t\tthis.smallMap = smallMap;\r\n\t\t}\r\n\t\treturn this._smallMap;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[ZoomControl]] to be used on the map.\r\n\t *\r\n\t * Please note, that accessing this property will NOT create a zoom control\r\n\t * if it has not yet been created. (except in JSON)\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Create a zoom control\r\n\t * map.zoomControl = new am4maps.ZoomControl();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"zoomControl\": {}\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {ZoomControl}  zoomControl  Zoom control\r\n\t */\r\n\tpublic set zoomControl(zoomControl: ZoomControl) {\r\n\t\tif (this._zoomControl) {\r\n\t\t\tthis.removeDispose(this._zoomControl);\r\n\t\t}\r\n\t\tthis._zoomControl = zoomControl;\r\n\t\tzoomControl.chart = this;\r\n\t\tzoomControl.parent = this.chartContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ZoomControl} Zoom control\r\n\t */\r\n\tpublic get zoomControl(): ZoomControl {\r\n\t\treturn this._zoomControl;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a map series of appropriate type.\r\n\t *\r\n\t * @return {MapSeries} Map series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new MapSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Degrees to shift map center by.\r\n\t *\r\n\t * E.g. if set to -160, the longitude 20 will become a new center, creating\r\n\t * a Pacific-centered map.\r\n\t *\r\n\t * @param {number}  value  Map center shift\r\n\t */\r\n\tpublic set deltaLongitude(value: number) {\r\n\t\tif (this.setPropertyValue(\"deltaLongitude\", $geo.wrapAngleTo180(value))) {\r\n\t\t\tthis.invalidateProjection();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Map center shift\r\n\t */\r\n\tpublic get deltaLongitude(): number {\r\n\t\treturn this.getPropertyValue(\"deltaLongitude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Max pan out\r\n\t *\r\n\t * @param {number} Max pan out\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Max pan out\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * The geographical point to center map on when it is first loaded.\r\n\t *\r\n\t * The map will also be centered to this point when you call `goHome()`\r\n\t * method.\r\n\t * \r\n\t * @param {IGeoPoint}  value  Home geo point\r\n\t */\r\n\tpublic set homeGeoPoint(value: IGeoPoint) {\r\n\t\tthis.setPropertyValue(\"homeGeoPoint\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint} Home geo point\r\n\t */\r\n\tpublic get homeGeoPoint(): IGeoPoint {\r\n\t\treturn this.getPropertyValue(\"homeGeoPoint\");\r\n\t}\r\n\r\n\t/**\r\n\t * The zoom level to put the map in when it is first loaded.\r\n\t *\r\n\t * The map will also be set to this zoom level when you call `goHome()`\r\n\t * method.\r\n\t * \r\n\t * @param {number}  value  Home zoom level\r\n\t */\r\n\tpublic set homeZoomLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"homeZoomLevel\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Home zoom level\r\n\t */\r\n\tpublic get homeZoomLevel(): number {\r\n\t\treturn this.getPropertyValue(\"homeZoomLevel\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates projection, causing all series to be redrawn.\r\n\t */\r\n\tprotected invalidateProjection() {\r\n\t\t//\t\tthis.projection.deltaLatitude = this.deltaLatitude;\r\n\t\tthis.projection.deltaLongitude = this.deltaLongitude;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @param {DataSource} value Data source\r\n\t */\r\n\tpublic set geodataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"geodata\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"geodata\"] = value;\r\n\t\tthis._dataSources[\"geodata\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"geodata\")\r\n\t\t}, this);\r\n\t\tthis.setDataSourceEvents(value, \"geodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[DataSource]] specifically for loading Component's data.\r\n\t *\r\n\t * @return {DataSource} Data source\r\n\t */\r\n\tpublic get geodataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.getDataSource(\"geodata\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"geodata\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\t// Instantiate projection\r\n\t\tif ($type.hasValue(config[\"projection\"]) && $type.isString(config[\"projection\"])) {\r\n\t\t\tconfig[\"projection\"] = this.createClassInstance(config[\"projection\"]);\r\n\t\t}\r\n\r\n\t\t// Set up small map\r\n\t\tif ($type.hasValue(config.smallMap) && !$type.hasValue(config.smallMap.type)) {\r\n\t\t\tconfig.smallMap.type = \"SmallMap\";\r\n\t\t}\r\n\r\n\t\t// Set up zoom control\r\n\t\tif ($type.hasValue(config.zoomControl) && !$type.hasValue(config.zoomControl.type)) {\r\n\t\t\tconfig.zoomControl.type = \"ZoomControl\";\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n * This function is used to sort element's JSON config properties, so that\r\n * some properties that absolutely need to be processed last, can be put at\r\n * the end.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {string}  a  Element 1\r\n * @param  {string}  b  Element 2\r\n * @return {number}     Sorting number\r\n */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"smallMap\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"smallMap\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `projection` to \"as is\" fields.\r\n\t *\r\n\t * @param  {string}   field  Field name\r\n\t * @return {boolean}         Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"projection\" || super.asIs(field);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Resets the map to its original position and zoom level.\r\n\t */\r\n\tpublic goHome(duration?: number) {\r\n\t\tlet homeGeoPoint = this.homeGeoPoint;\r\n\t\tif (!homeGeoPoint) {\r\n\t\t\thomeGeoPoint = this.centerGeoPoint;\r\n\t\t}\r\n\t\tif(homeGeoPoint){\r\n\t\t\tthis.zoomToGeoPoint(homeGeoPoint, this.homeZoomLevel, true, duration);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapChart\"] = MapChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/MapChart.ts","/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * [number description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tposition?: number;\r\n\r\n\t/**\r\n\t * [boolean description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {boolean}\r\n\t */\r\n\tadjustRotation?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineObjectAdapters extends IContainerAdapters, IMapLineObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a line on the map.\r\n *\r\n * @see {@link IMapLineObjectEvents} for a list of available events\r\n * @see {@link IMapLineObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapLineObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineObjectProperties}\r\n\t */\r\n\tpublic _properties!: IMapLineObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapLineObjectAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapLineObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapLineObjectEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapLineObjectEvents;\r\n\r\n\t/**\r\n\t * [mapLine description]\r\n\t *\r\n\t * @todo Description\r\n\t * @todo Review if necessary (same as parent)\r\n\t * @type {MapLine}\r\n\t */\r\n\tpublic mapLine: MapLine;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.adjustRotation = true;\r\n\t\tthis.className = \"MapLineObject\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates element's position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition() {\r\n\t\tif (this.mapLine) {\r\n\t\t\tlet point: IOrientationPoint = this.mapLine.positionToPoint(this.position);\r\n\t\t\tthis.x = point.x;\r\n\t\t\tthis.y = point.y;\r\n\r\n\t\t\tif (this.adjustRotation) {\r\n\t\t\t\tthis.rotation = point.angle;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataItem = this.mapLine.dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet series = this.mapLine.dataItem.component;\r\n\t\t\t\tthis.scale = 1 / series.scale;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * [position description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\tpublic set position(value: number) {\r\n\t\tthis.setPropertyValue(\"position\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get position(): number {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * [adjustRotation description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {boolean} value [description]\r\n\t */\r\n\tpublic set adjustRotation(value: boolean) {\r\n\t\tthis.setPropertyValue(\"adjustRotation\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} [description]\r\n\t */\r\n\tpublic get adjustRotation(): boolean {\r\n\t\treturn this.getPropertyValue(\"adjustRotation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineObject\"] = MapLineObject;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapLineObject.ts","/**\r\n * Map polygon series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapPolygon } from \"./MapPolygon\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapPolygonSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapPolygonSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t *\r\n\t * @type {MapPolygon}\r\n\t */\r\n\tprotected _mapPolygon: MapPolygon;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon.\r\n\t *\r\n\t * @type {number[][][]}\r\n\t */\r\n\tprotected _polygon: number[][][];\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon.\r\n\t *\r\n\t * @type {number[][][][]}\r\n\t */\r\n\tprotected _multiPolygon: number[][][][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon.\r\n\t *\r\n\t * @type {IGeoPoint[][]}\r\n\t */\r\n\tprotected _geoPolygon: IGeoPoint[][];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon.\r\n\t *\r\n\t * @type {IGeoPoint[][][]}\r\n\t */\r\n\tprotected _multiGeoPolygon: IGeoPoint[][][];\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {MapPolygonSeries}\r\n\t */\r\n\tpublic _component!: MapPolygonSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapPolygonSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return {MapPolygon} Element\r\n\t */\r\n\tpublic get mapPolygon(): MapPolygon {\r\n\t\tif (!this._mapPolygon) {\r\n\t\t\tlet mapPolygon = this.component.mapPolygons.create();\r\n\t\t\tthis._mapPolygon = mapPolygon;\r\n\t\t\tthis.addSprite(mapPolygon);\r\n\r\n\t\t\tthis._disposers.push(mapPolygon);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.mapPolygons.removeValue(mapPolygon);\r\n\t\t\t}));\t\t\t\r\n\t\t}\r\n\t\treturn this._mapPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 200 ],\r\n\t *     [ 170, 240 ],\r\n\t *     [ 100, 150 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][][]}  polygon  Coordinates\r\n\t */\r\n\tpublic set polygon(polygon: number[][][]) {\r\n\t\tthis._polygon = polygon;\r\n\t\tthis.multiGeoPolygon = $mapUtils.multiPolygonToGeo([polygon]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get polygon(): number[][][] {\r\n\t\treturn this._polygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Part 1\r\n\t *   [\r\n\t *     [\r\n\t *       [ 100, 150 ],\r\n\t *       [ 120, 200 ],\r\n\t *       [ 150, 220 ],\r\n\t *       [ 170, 240 ],\r\n\t *       [ 100, 150 ]\r\n\t *     ]\r\n\t *   ],\r\n\t *\r\n\t *   // Part 2\r\n\t *   [\r\n\t *     [\r\n\t *       [ 300, 350 ],\r\n\t *       [ 320, 400 ],\r\n\t *       [ 350, 420 ],\r\n\t *       [ 370, 440 ],\r\n\t *       [ 300, 350 ]\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param {number[][][]}  multiPolygon  Coordinates\r\n\t */\r\n\tpublic set multiPolygon(multiPolygon: number[][][][]) {\r\n\t\tthis._multiPolygon = multiPolygon;\r\n\t\tthis.multiGeoPolygon = $mapUtils.multiPolygonToGeo(multiPolygon);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} Coordinates\r\n\t */\r\n\tpublic get multiPolygon(): number[][][][] {\r\n\t\treturn this._multiPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     { latitude: -10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: 10.0 },\r\n\t *     { latitude: -10.0, longitude: -10.0 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.6} GeoJSON Polygon reference\r\n\t * @param {IGeoPoint[][]}  geoPolygon  Coordinates\r\n\t */\r\n\tpublic set geoPolygon(geoPolygon: IGeoPoint[][]) {\r\n\t\tthis._geoPolygon = geoPolygon;\r\n\t\tthis.multiGeoPolygon = [geoPolygon];\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get geoPolygon(): IGeoPoint[][] {\r\n\t\treturn this._geoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: 180.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ],\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: -170.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.7} GeoJSON MultiPolygon reference\r\n\t * @param {IGeoPoint[][][]}  multiGeoPolygon  Coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: IGeoPoint[][][]) {\r\n\t\tthis._multiGeoPolygon = multiGeoPolygon;\r\n\t\tthis.updateAreaExtremes(multiGeoPolygon);\r\n\t\tthis.mapPolygon.multiGeoPolygon = this._multiGeoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint[]} Coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): IGeoPoint[][][] {\r\n\t\treturn this._multiGeoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n\t */\r\n\tpublic updateAreaExtremes(multiGeoPolygon: IGeoPoint[][][]): void {\r\n\t\tfor (let i = 0; i < multiGeoPolygon.length; i++) {\r\n\t\t\tlet geoPolygon: IGeoPoint[][] = multiGeoPolygon[i];\r\n\t\t\tlet surface: IGeoPoint[] = geoPolygon[0];\r\n\t\t\tthis.updateExtremes(surface);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds polygon pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-polygon pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds polygon data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds poly-polygon data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoPolygon?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygonSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonSeriesAdapters extends IMapSeriesAdapters, IMapPolygonSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map polygon elements.\r\n *\r\n * @see {@link IMapPolygonSeriesEvents} for a list of available Events\r\n * @see {@link IMapPolygonSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapPolygonSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapPolygonSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapPolygonSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapPolygonSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapPolygonSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapPolygonSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapPolygonSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapPolygonSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapPolygonSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapPolygonSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map polygons in the series.\r\n\t *\r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapPolygons: ListTemplate<MapPolygon>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.parsingStepDuration = 1000; // to avoid some extra redrawing\r\n\r\n\t\tthis.className = \"MapPolygonSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPolygon = \"multiPolygon\";\r\n\t\tthis.dataFields.polygon = \"polygon\";\r\n\r\n\t\tthis.dataFields.geoPolygon = \"geoPolygon\";\r\n\t\tthis.dataFields.multiGeoPolygon = \"multiGeoPolygon\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapPolygonSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapPolygonSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc(){\r\n\t\tthis.mapPolygons.clear();\r\n\t\tsuper.processIncExc();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0 && this._parseDataFrom == 0) {\r\n\t\t\tthis.mapPolygons.clear();\r\n\t\t}\r\n\r\n\t\tthis.west = null;\r\n\t\tthis.east = null;\r\n\t\tthis.north = null;\r\n\t\tthis.south = null;\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\r\n\t\t\tif(this.geodata){\r\n\t\t\t\tgeoJSON = this.geodata;\r\n\t\t\t}\r\n\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0; i < features.length; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\r\n\t\t\t\t\t\t\tif (type == \"Polygon\" || type == \"MultiPolygon\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"Polygon\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// find data object in user-provided data\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapPolygonDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\t\t\t\t// create one if not found\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPolygon: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// in case found\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t// if user-provided object doesn't have points data provided in any way:\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPolygon) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPolygon = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.copyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\t// if data is parsed in chunks, polygon list is corrupted, fix it here\r\n\t\t// !important this should go after super!\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapPolygons.moveValue(dataItem.mapPolygon);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tmapPolygon.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * List of polygon elements in the series.\r\n\t *\r\n\t * @return {ListTemplate<MapPolygon>} Polygon list\r\n\t */\r\n\tpublic get mapPolygons(): ListTemplate<MapPolygon> {\r\n\r\n\t\tif (!this._mapPolygons) {\r\n\t\t\tlet polygonTemplate: MapPolygon = new MapPolygon();\r\n\r\n\t\t\tlet mapPolygons: ListTemplate<MapPolygon> = new ListTemplate<MapPolygon>(polygonTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapPolygons));\r\n\t\t\tthis._disposers.push(mapPolygons.template);\r\n\t\t\tmapPolygons.template.focusable = true;\r\n\t\t\tmapPolygons.events.on(\"inserted\", this.handleObjectAdded, this);\r\n\t\t\tthis._mapPolygons = mapPolygons;\r\n\t\t}\r\n\r\n\t\treturn this._mapPolygons;\r\n\t}\r\n\r\n\t/**\r\n\t * returns MapPolygon by id in geoJSON file\r\n\t * @param {string} polygon id\r\n\t * @return {MapPolygon}\r\n\t */\r\n\tpublic getPolygonById(id: string): MapPolygon {\r\n\t\treturn $iter.find(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tlet dataContext: any = mapPolygon.dataItem.dataContext;\r\n\t\t\treturn dataContext.id == id;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapPolygons.template.copyFrom(source.mapPolygons.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygonSeries\"] = MapPolygonSeries;\r\nregistry.registeredClasses[\"MapPolygonSeriesDataItem\"] = MapPolygonSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapPolygonSeries.ts","/**\r\n * Map spline series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart, MapLineType } from \"../types/MapChart\";\r\nimport { MapSpline } from \"./MapSpline\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { IMapDataObject, IMapPolygonDataObject, IMapLineDataObject } from \"../types/MapChart\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSplineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapSplineSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapSpline]] element related to this data item.\r\n\t *\r\n\t * @type {MapSpline}\r\n\t */\r\n\tprotected _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapSplineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapSpline]] element related to this data item.\r\n\t *\r\n\t * @return {MapSpline} Element\r\n\t */\r\n\tpublic get mapLine(): MapSpline {\r\n\t\tif (!this._mapLine) {\r\n\t\t\tthis._mapLine = this.component.mapLines.create(MapSpline);\r\n\t\t\tthis.addSprite(this._mapLine);\r\n\t\t}\r\n\t\treturn this._mapLine;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapSplineSeries]].\r\n */\r\nexport interface IMapSplineSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapSplineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSplineSeriesAdapters extends IMapLineSeriesAdapters, IMapSplineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map spline elements.\r\n *\r\n * @see {@link IMapSplineSeriesEvents} for a list of available Events\r\n * @see {@link IMapSplineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSplineSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSplineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapSplineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSplineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapSplineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapSplineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapSplineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapSplineSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapSplineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapSplineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapSplineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapSpline}\r\n\t */\r\n\tpublic _mapLine: MapSpline;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSplineSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapSplineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSplineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return {MapSpline} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapSpline();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSplineSeries\"] = MapSplineSeries;\r\nregistry.registeredClasses[\"MapSplineSeriesDataItem\"] = MapSplineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapSplineSeries.ts","/**\r\n * Map image series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapImageDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapImageSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapImageSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t *\r\n\t * @type {MapImage}\r\n\t */\r\n\tprotected _mapImage: MapImage;\r\n\r\n\t/**\r\n\t * [_point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number[]}\r\n\t */\r\n\tprotected _point: number[];\r\n\r\n\t/**\r\n\t * Geographical coordinates image is placed at.\r\n\t *\r\n\t * @type {IGeoPoint}\r\n\t */\r\n\tprotected _geoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t *\r\n\t * @return {MapImage} Element\r\n\t */\r\n\tpublic get mapImage(): MapImage {\r\n\t\tif (!this._mapImage) {\r\n\t\t\tlet mapImage = this.component.mapImages.create();\r\n\t\t\tthis.addSprite(mapImage);\r\n\t\t\tthis._mapImage = mapImage;\r\n\t\t\tthis._disposers.push(mapImage);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.mapImages.removeValue(mapImage);\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._mapImage;\r\n\t}\r\n\r\n\t/**\r\n\t * [point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number[]} point [description]\r\n\t */\r\n\tpublic set point(point: number[]) {\r\n\t\tthis._point = point;\r\n\t\tthis.geoPoint = $mapUtils.pointToGeo(point);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number[]} [description]\r\n\t */\r\n\tpublic get point(): number[] {\r\n\t\treturn this._point;\r\n\t}\r\n\r\n\t/**\r\n\t * Geographical coordinates (lat/long) image is placed at.\r\n\t *\r\n\t * @param {IGeoPoint} geoPoint Image coordinates\r\n\t */\r\n\tpublic set geoPoint(geoPoint: IGeoPoint) {\r\n\t\tthis._geoPoint = geoPoint;\r\n\t\tthis.updateExtremes([this._geoPoint]);\r\n\t\tthis.mapImage.latitude = this._geoPoint.latitude;\r\n\t\tthis.mapImage.longitude = this._geoPoint.longitude;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {IGeoPoint} Image coordinates\r\n\t */\r\n\tpublic get geoPoint(): IGeoPoint {\r\n\t\treturn this._geoPoint;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds image point data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in pixels.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds image point data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tgeoPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in Geo coordinates.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tmultiGeoPoint?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImageSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageSeriesAdapters extends IMapSeriesAdapters, IMapImageSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map image (marker) elements.\r\n *\r\n * @see {@link IMapImageSeriesEvents} for a list of available Events\r\n * @see {@link IMapImageSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapImageSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapImageSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapImageSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapImageSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapImageSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapImageSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapImageSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapImageSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapImageSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapImageSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this image is drawn on.\r\n\t *\r\n\t * @type {MapChart}\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t *\r\n\t * @type {ListTemplate<MapImage>}\r\n\t */\r\n\tprotected _mapImages: ListTemplate<MapImage>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPoint = \"multiPoint\";\r\n\t\tthis.dataFields.point = \"point\";\r\n\r\n\t\tthis.dataFields.geoPoint = \"geoPoint\";\r\n\t\tthis.dataFields.multiGeoPoint = \"multiGeoPoint\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapImageSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapImageSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the data of the sries, effectively forcing it to redraw\r\n\t * all of its elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.mapImages.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata) {\r\n\t\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0; i < features.length; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"Point\" || type == \"MultiPoint\") {  // todo: we don't support multipoints at the moment actually\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPoint\r\n\t\t\t\t\t\t\t\t\tif (type == \"MultiPoint\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapImageDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPoint: coordinates, id: id };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPoint) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPoint = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.copyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t\t// important! this should go after super.validateData\r\n\t\t// if data is parsed in chunks, images list is corrupted, fix it here\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tthis.mapImages.moveValue(dataItem.mapImage);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t *\r\n\t * @return {ListTemplate<MapImage>} Map images\r\n\t */\r\n\tpublic get mapImages(): ListTemplate<MapImage> {\r\n\r\n\t\tif (!this._mapImages) {\r\n\t\t\tlet template: MapImage = new MapImage();\r\n\t\t\tlet mapImages = new ListTemplate<MapImage>(template);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapImages));\r\n\t\t\tthis._disposers.push(mapImages.template);\r\n\t\t\tmapImages.template.focusable = true;\r\n\t\t\tmapImages.events.on(\"inserted\", this.handleObjectAdded, this);\r\n\t\t\tthis._mapImages = mapImages;\r\n\t\t}\r\n\r\n\t\treturn this._mapImages;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data element, effectively triggering its redrawal.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]) {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tdataItem.mapImage.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapImages.iterator(), (mapImage) => {\r\n\t\t\tmapImage.validatePosition();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param {Series}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapImages.template.copyFrom(source.mapImages.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImageSeries\"] = MapImageSeries;\r\nregistry.registeredClasses[\"MapImageSeriesDataItem\"] = MapImageSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapImageSeries.ts","/**\r\n * Map arc series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MapChart, MapLineType } from \"../types/MapChart\";\r\nimport { MapArc } from \"./MapArc\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { IMapDataObject, IMapPolygonDataObject, IMapLineDataObject } from \"../types/MapChart\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapArcSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapArcSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapArc]] element related to this data item.\r\n\t *\r\n\t * @type {MapArc}\r\n\t */\r\n\tprotected _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {Component}\r\n\t */\r\n\tpublic _component!: MapArcSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapArc]] element related to this data item.\r\n\t *\r\n\t * @return {MapArc} Element\r\n\t */\r\n\tpublic get mapLine(): MapArc {\r\n\t\tif (!this._mapLine) {\r\n\t\t\tthis._mapLine = this.component.mapLines.create(MapArc);\r\n\t\t\tthis.addSprite(this._mapLine);\r\n\t\t}\r\n\t\treturn this._mapLine;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesProperties extends IMapLineSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapArcSeries]].\r\n */\r\nexport interface IMapArcSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapArcSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapArcSeriesAdapters extends IMapLineSeriesAdapters, IMapArcSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of arc elements. (curved lines)\r\n *\r\n * @see {@link IMapArcSeriesEvents} for a list of available Events\r\n * @see {@link IMapArcSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapArcSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapArcSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IMapArcSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapArcSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IMapArcSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IMapArcSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IMapArcSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IMapArcSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IMapArcSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapArcSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: MapArcSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {MapArc}\r\n\t */\r\n\tpublic _mapLine: MapArc;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapArcSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {MapArcSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapArcSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return {MapArc} New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapArc();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapArcSeries\"] = MapArcSeries;\r\nregistry.registeredClasses[\"MapArcSeriesDataItem\"] = MapArcSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/MapArcSeries.ts","/**\r\n * Functionality for Mercator projection\r\n * \r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\n\r\n/**\r\n * Mercator projection.\r\n */\r\nexport class Mercator extends Projection {\r\n\r\n\t/**\r\n\t * Converts screen coordinates to latitude/longitude in radians\r\n\t * @param  {number}     x  X\r\n\t * @param  {number}     y  Y\r\n\t * @return {IGeoPoint}     Geographical coordinates\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn {\r\n\t\t\tlongitude: x,\r\n\t\t\tlatitude: 2 * Math.atan(Math.exp(y)) - Math.PI / 2\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn {\r\n\t\t\tx: lambda,\r\n\t\t\ty: Math.log(Math.tan((Math.PI / 2 + phi) / 2))\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Mercator\"] = Mercator;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Mercator.ts","/**\n * Functionality for Miller projection\n *\n * The function(s) below are from D3.js library (https://d3js.org/)\n * \n * ```\n * Copyright 2017 Mike Bostock\n * \n * Redistribution and use in source and binary forms, with or without \n * modification, are permitted provided that the following conditions are met:\n * \n * 1. Redistributions of source code must retain the above copyright notice, \n *    this list of conditions and the following disclaimer.\n * \n * 2. Redistributions in binary form must reproduce the above copyright notice, \n *    this list of conditions and the following disclaimer in the documentation \n *    and/or other materials provided with the distribution.\n * \n * 3. Neither the name of the copyright holder nor the names of its \n *    contributors may be used to endorse or promote products derived from this \n *    software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \n * POSSIBILITY OF SUCH DAMAGE.\n * ```\n */\n\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { Projection } from \"./Projection\";\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\nimport { IPoint } from \"../../../core/defs/IPoint\";\nimport { registry } from \"../../../core/Registry\";\n\n/**\n * Miller projection.\n */\nexport class Miller extends Projection {\n\n\t/**\n\t * Converts screen coordinates to latitude/longitude.\n\t * \n\t * @param  {number}     x  X\n\t * @param  {number}     y  Y\n\t * @return {IGeoPoint}     Geographical coordinates in radians\n\t */\n\tpublic unproject(x: number, y: number): IGeoPoint {\n\t\treturn {\n\t\t\tlongitude: x,\n\t\t\tlatitude: 2.5 * Math.atan(Math.exp(0.8 * y)) - 0.625 * Math.PI\n\t\t};\n\t}\n\n\t/**\n\t * Converts geographical coordinates to screen coordinates.\n\t * \n\t * @param  {number}  lambda  Lambda parameter\n\t * @param  {number}  phi     Phi parameter\n\t * @return {IPoint}          Screen coordinates\n\t */\n\tpublic project(lambda: number, phi: number): IPoint {\n\t\treturn {\n\t\t\tx: lambda,\n\t\t\ty: 1.25 * Math.log(Math.tan(Math.PI / 4 + 0.4 * phi))\n\t\t};\n\t}\n\n}\n\n/**\n * Register class in system, so that it can be instantiated using its name from\n * anywhere.\n * \n * @ignore\n */\nregistry.registeredClasses[\"Miller\"] = Miller;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Miller.ts","/**\r\n * Functionality for Eckert6 projection\r\n *\r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\n\r\n/**\r\n * Eckert6 projection.\r\n */\r\nexport class Eckert6 extends Projection {\r\n\r\n\t/**\r\n\t * Converts screen coordinates to latitude/longitude.\r\n\t * \r\n\t * @param  {number}     x  X\r\n\t * @param  {number}     y  Y\r\n\t * @return {IGeoPoint}     Geographical coordinates in radians\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\tlet j = 1 + Math.PI / 2,\r\n\t\t\tk = Math.sqrt(j / 2);\r\n\t\treturn {\r\n\t\t\tlongitude: x * 2 * k / (1 + Math.cos(y *= k)),\r\n\t\t\tlatitude: Math.asin((y + Math.sin(y)) / j)\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\tlet k = (1 + Math.PI / 2) * Math.sin(phi);\r\n\t\tfor (let i = 0, delta = Infinity; i < 10 && Math.abs(delta) > 0.00001; i++) {\r\n\t\t\tphi -= delta = (phi + Math.sin(phi) - k) / (1 + Math.cos(phi));\r\n\t\t}\r\n\t\tk = Math.sqrt(2 + Math.PI);\r\n\t\treturn {\r\n\t\t\tx: lambda * (1 + Math.cos(phi)) / k,\r\n\t\t\ty: 2 * phi / k\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Eckert6\"] = Eckert6;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Eckert6.ts","/**\r\n * Functionality for Mercator projection\r\n * \r\n * The function(s) below are from D3.js library (https://d3js.org/)\r\n * \r\n * ```\r\n * Copyright 2017 Mike Bostock\r\n * \r\n * Redistribution and use in source and binary forms, with or without \r\n * modification, are permitted provided that the following conditions are met:\r\n * \r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n * \r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n * \r\n * 3. Neither the name of the copyright holder nor the names of its \r\n *    contributors may be used to endorse or promote products derived from this \r\n *    software without specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ```\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Projection } from \"./Projection\";\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\n\r\n/**\r\n * Orthographic projection.\r\n */\r\nexport class Orthographic extends Projection {\r\n\r\n\t/**\r\n\t * Converts geographical coordinates to screen coordinates.\r\n\t * \r\n\t * @param  {number}  lambda  Lambda parameter\r\n\t * @param  {number}  phi     Phi parameter\r\n\t * @return {IPoint}          Screen coordinates\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn { x: Math.cos(phi) * Math.sin(lambda), y: Math.sin(phi) };\r\n\t}\r\n\r\n\r\n\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: longitude - 180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: longitude - 180, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\tpublic getRect1(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t}\r\n\r\n\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\r\n\t\tlet delta: number;\r\n\r\n\t\tif (longitude > 0) {\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\r\n\t\treturn [{ longitude: smallNum + longitude - 180 + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude - 90 }, { longitude: longitude - smallNum + delta, latitude: latitude + 90 }, { longitude: smallNum + longitude - 180 + delta, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\r\n\r\n\tpublic getRect2(): IGeoRectangle {\r\n\t\tlet longitude = 90 - this.deltaLongitude;\r\n\t\tlet latitude = -this.deltaLatitude;\r\n\r\n\t\tlet delta: number;\r\n\r\n\t\tif (longitude > 0) {\r\n\t\t\tdelta = -360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelta = 360;\r\n\t\t}\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180 + delta, east: longitude + delta };\r\n\t}\r\n\r\n\r\n\r\n\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tlet rect1 = this.getRect1();\r\n\t\tlet rect2 = this.getRect2();\r\n\r\n\t\tfor (let i: number = 0; i < geoArea.length; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.isInside(surfaceRect, rect1)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\r\n\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.isInside(surfaceRect, rect2)) {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\tclippedArea.push(area);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i: number = 0; i < clippedArea.length; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = clippedArea[i][0];\r\n\t\t\t//let hole: IGeoPoint[] = clippedArea[i][1];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet prevPoint = surface[surface.length - 1];\r\n\r\n\t\t\t\tfor (let i = 0; i < surface.length; i++) {\r\n\t\t\t\t\tlet point = surface[i];\r\n\r\n\t\t\t\t\tif ($math.round(point.longitude, 4) == $math.round(prevPoint.longitude, 4)) {\r\n\t\t\t\t\t\tlet stepCount = Math.abs((prevPoint.latitude - point.latitude) * 2);\r\n\t\t\t\t\t\tlet extraPoints: IGeoPoint[] = [];\r\n\r\n\t\t\t\t\t\tif (stepCount > 1) {\r\n\t\t\t\t\t\t\tfor (let s = 1; s < stepCount; s++) {\r\n\t\t\t\t\t\t\t\textraPoints.push({ longitude: prevPoint.longitude, latitude: prevPoint.latitude + (point.latitude - prevPoint.latitude) / stepCount * s })\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tsurface.splice(i, 0, ...extraPoints);\r\n\t\t\t\t\t\t\ti = i + extraPoints.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tprevPoint = point;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedArea;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Orthographic\"] = Orthographic;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Orthographic.ts","/**\r\n * This module contains funcitonality related to geographical projections\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../../core/defs/IGeoPoint\";\r\nimport { IGeoRectangle } from \"../../../core/defs/IGeoRectangle\";\r\nimport { IPoint } from \"../../../core/defs/IPoint\";\r\nimport { registry } from \"../../../core/Registry\";\r\nimport * as $math from \"../../../core/utils/Math\";\r\nimport * as $geo from \"../Geo\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for a geographical projection.\r\n */\r\nexport class Projection {\r\n\r\n\tpublic deltaLongitude: number = 0;\r\n\r\n\tpublic deltaLatitude: number = 0;\r\n\r\n\tpublic deltaGama: number = 0;\r\n\r\n\tpublic centerPoint: IPoint = { x: 0, y: 0 };\r\n\r\n\tpublic scale: number = 1;\r\n\r\n\tpublic projectGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\r\n\t\tlet clippedGeoArea: IGeoPoint[][][] = this.clipGeoArea(geoArea);\r\n\t\tlet convertedPoints: IPoint[][][] = this.convertGeoArea(clippedGeoArea);\r\n\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\tpublic projectGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\treturn this.convertGeoLine(this.clipGeoLine(geoLine));\r\n\t}\r\n\r\n\tpublic getClipRectangle1(): IGeoPoint[] {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: -180, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude - 90 }, { longitude: longitude - smallNum, latitude: latitude + 90 }, { longitude: -180, latitude: latitude + 90 }];\r\n\t}\r\n\r\n\tpublic getClipRectangle2(): IGeoPoint[] {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\t//let latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\tlet smallNum = 0.00001;\r\n\t\treturn [{ longitude: longitude + smallNum, latitude: -90 }, { longitude: 180, latitude: -90 }, { longitude: 180, latitude: 90 }, { longitude: longitude + smallNum, latitude: 90 }];\r\n\t}\r\n\r\n\tpublic getRect1(): IGeoRectangle {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude - 180, east: longitude };\r\n\t}\r\n\r\n\tpublic getRect2(): IGeoRectangle {\r\n\t\tlet longitude = $geo.wrapAngleTo180(180 - this.deltaLongitude);\r\n\t\tlet latitude = $geo.wrapAngleTo180(this.deltaLatitude);\r\n\r\n\t\treturn { north: latitude + 90, south: latitude - 90, west: longitude, east: (longitude + 180) };\r\n\t}\r\n\r\n\r\n\r\n\tprotected clipGeoLine(geoLine: IGeoPoint[][]): IGeoPoint[][] {\r\n\t\tif (!geoLine) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedLine: IGeoPoint[][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tfor (let i: number = 0; i < geoLine.length; i++) {\r\n\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\r\n\t\t\tif (segment) {\r\n\t\t\t\tlet clippedSegments: IGeoPoint[][] = this.clipLine(segment, clipRectangle1);\r\n\t\t\t\tclippedLine = clippedLine.concat(clippedSegments);\r\n\r\n\t\t\t\tif (this.deltaLongitude != 0) {\r\n\t\t\t\t\tlet clippedSegments2: IGeoPoint[][] = this.clipLine(segment, clipRectangle2);\r\n\t\t\t\t\tclippedLine = clippedLine.concat(clippedSegments2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedLine;\r\n\t}\r\n\r\n\r\n\tprotected clipGeoArea(geoArea: IGeoPoint[][][]): IGeoPoint[][][] {\r\n\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet clippedArea: IGeoPoint[][][] = [];\r\n\r\n\t\tlet clipRectangle1 = this.getClipRectangle1();\r\n\t\tlet clipRectangle2 = this.getClipRectangle2();\r\n\r\n\t\tlet rect1 = this.getRect1();\r\n\t\tlet rect2 = this.getRect2();\r\n\r\n\t\tfor (let i: number = 0; i < geoArea.length; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet clippedAreas: IGeoPoint[][][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\r\n\t\t\t\tlet surfaceRect = this.getExtremes(surface);\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect1) && !this.isOutside(surfaceRect, rect1)) {\r\n\t\t\t\t\tlet clippedSurface1: IGeoPoint[] = this.clip(surface, clipRectangle1);\r\n\t\t\t\t\tlet clippedHole1: IGeoPoint[] = this.clip(hole, clipRectangle1);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface1, clippedHole1]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclippedAreas.push([surface, hole]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.isInside(surfaceRect, rect2) && !this.isOutside(surfaceRect, rect2)) {\r\n\t\t\t\t\tlet clippedSurface2: IGeoPoint[] = this.clip(surface, clipRectangle2);\r\n\t\t\t\t\tlet clippedHole2: IGeoPoint[] = this.clip(hole, clipRectangle2);\r\n\t\t\t\t\tclippedAreas.push([clippedSurface2, clippedHole2]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let area of clippedAreas) {\r\n\t\t\t\tclippedArea.push(area);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clippedArea;\r\n\t}\r\n\r\n\tprotected convertGeoArea(geoArea: IGeoPoint[][][]): IPoint[][][] {\r\n\r\n\t\tif (!geoArea) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet convertedPoints: IPoint[][][] = [];\r\n\r\n\t\tfor (let i: number = 0; i < geoArea.length; i++) {\r\n\r\n\t\t\tlet surface: IGeoPoint[] = geoArea[i][0];\r\n\t\t\tlet hole: IGeoPoint[] = geoArea[i][1];\r\n\r\n\t\t\tlet convertedAreaPoints: IPoint[][] = [];\r\n\r\n\t\t\tif (surface) {\r\n\t\t\t\tlet convertedSurface: IPoint[] = [];\r\n\r\n\t\t\t\tfor (let s: number = 0; s < surface.length; s++) {\r\n\t\t\t\t\tlet point: IPoint = this.convert(surface[s]);\r\n\r\n\t\t\t\t\tconvertedSurface.push(point);\r\n\t\t\t\t}\r\n\t\t\t\tconvertedAreaPoints.push(convertedSurface);\r\n\t\t\t}\r\n\r\n\t\t\tif (hole) {\r\n\t\t\t\tlet convertedHole: IPoint[] = [];\r\n\t\t\t\tfor (let s: number = 0; s < hole.length; s++) {\r\n\t\t\t\t\tlet point: IPoint = this.convert(hole[s]);\r\n\r\n\t\t\t\t\tconvertedHole.push(point);\r\n\t\t\t\t}\r\n\t\t\t\tconvertedAreaPoints.push(convertedHole);\r\n\t\t\t}\r\n\t\t\tconvertedPoints.push(convertedAreaPoints);\r\n\t\t}\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\tprotected convertGeoLine(geoLine: IGeoPoint[][]): IPoint[][] {\r\n\t\tif (!geoLine) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet convertedPoints: IPoint[][] = [];\r\n\r\n\t\tfor (let i: number = 0; i < geoLine.length; i++) {\r\n\r\n\t\t\tlet segment: IGeoPoint[] = geoLine[i];\r\n\r\n\t\t\tlet convertedSegmentPoints: IPoint[] = [];\r\n\r\n\t\t\tfor (let s: number = 0; s < segment.length; s++) {\r\n\t\t\t\tlet geoPoint: IGeoPoint = segment[s];\r\n\r\n\t\t\t\tlet point: IPoint = this.convert(geoPoint);\r\n\t\t\t\tconvertedSegmentPoints.push(point);\r\n\t\t\t}\r\n\r\n\t\t\tconvertedPoints.push(convertedSegmentPoints);\r\n\t\t}\r\n\t\treturn convertedPoints;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a geographical point (lat/long) to a screen point (x/y)\r\n\t * @param  {IGeoPoint} geoPoint Geo point (lat/long)\r\n\t * @return {IPoint}             Screen point (x/y)\r\n\t */\r\n\tpublic convert(geoPoint: IGeoPoint): IPoint {\r\n\t\tgeoPoint = $geo.normalizePoint(geoPoint);\r\n\t\tgeoPoint = this.rotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\t\tlet pointInRadians: IPoint = this.project(geoPoint.longitude * $math.RADIANS, geoPoint.latitude * $math.RADIANS);\r\n\t\treturn {\r\n\t\t\tx: $math.round(pointInRadians.x * $math.DEGREES - this.centerPoint.x, 4) * this.scale,\r\n\t\t\ty: $math.round(-pointInRadians.y * $math.DEGREES - this.centerPoint.y, 4) * this.scale\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a screen point (x/y) to a geographical point (lat/long)\r\n\t * @param  {IPoint}    point Screen point (x/y)\r\n\t * @return {IGeoPoint}       Geo point (lat/long)\r\n\t */\r\n\tpublic invert(point: IPoint): IGeoPoint {\r\n\t\tlet pointInRadians: IGeoPoint = this.unproject((point.x / this.scale + this.centerPoint.x) * $math.RADIANS, (-point.y / this.scale - this.centerPoint.y) * $math.RADIANS);\r\n\r\n\t\tlet geoPoint = { longitude: pointInRadians.longitude * $math.DEGREES, latitude: pointInRadians.latitude * $math.DEGREES };\r\n\r\n\t\tgeoPoint = this.unrotate(geoPoint, this.deltaLongitude, this.deltaLatitude, this.deltaGama);\r\n\r\n\t\treturn geoPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns X/Y coordinates.\r\n\t * Individual projections will override this method to apply their own \r\n\t * projection logic.\r\n\t * @param  {number} lambda [description]\r\n\t * @param  {number} phi    [description]\r\n\t * @return {IPoint}        X/Y coordinates\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic project(lambda: number, phi: number): IPoint {\r\n\t\treturn { x: lambda, y: phi };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns geographical coordinates (lat/long).\r\n\t * Individual projections will override this method to apply their own \r\n\t * projection logic.\r\n\t * @param  {number}    x X coordinate\r\n\t * @param  {number}    y Y coordinate\r\n\t * @return {IGeoPoint}   Geographical point\r\n\t * @todo Needs description\r\n\t */\r\n\tpublic unproject(x: number, y: number): IGeoPoint {\r\n\t\treturn { longitude: x, latitude: y };\r\n\t}\r\n\r\n\r\n\trotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS + deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaPhi + x * sinDeltaPhi;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaGamma + y * sinDeltaGamma) };\r\n\t}\r\n\r\n\tunrotate(geoPoint: IGeoPoint, deltaLongitude: number, deltaLatitude: number, deltaGamma?: number): IGeoPoint {\r\n\r\n\t\tlet deltaLambda = deltaLongitude * $math.RADIANS;\r\n\t\tlet deltaPhi = deltaLatitude * $math.RADIANS;\r\n\t\tdeltaGamma = deltaGamma * $math.RADIANS;\r\n\r\n\t\tlet lambda = geoPoint.longitude * $math.RADIANS - deltaLambda;\r\n\t\tlet phi = geoPoint.latitude * $math.RADIANS;\r\n\r\n\t\tlet cosDeltaPhi = Math.cos(deltaPhi);\r\n\t\tlet sinDeltaPhi = Math.sin(deltaPhi);\r\n\t\tlet cosDeltaGamma = Math.cos(deltaGamma);\r\n\t\tlet sinDeltaGamma = Math.sin(deltaGamma);\r\n\r\n\t\tlet cosPhi = Math.cos(phi);\r\n\r\n\t\tlet x = Math.cos(lambda) * cosPhi;\r\n\t\tlet y = Math.sin(lambda) * cosPhi;\r\n\t\tlet z = Math.sin(phi);\r\n\t\tlet k = z * cosDeltaGamma - y * sinDeltaGamma;\r\n\r\n\t\treturn { longitude: $math.DEGREES * Math.atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), latitude: $math.DEGREES * Math.asin(k * cosDeltaPhi - x * sinDeltaPhi) };\r\n\t}\r\n\r\n\r\n\r\n\tclipLine(subjectPolyline: IGeoPoint[], clipPolygon: IGeoPoint[]): IGeoPoint[][] {\r\n\r\n\t\tif (!subjectPolyline || subjectPolyline.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet cp1: IGeoPoint;\r\n\t\tlet cp2: IGeoPoint;\r\n\r\n\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t};\r\n\r\n\t\tlet s: IGeoPoint;\r\n\t\tlet e: IGeoPoint;\r\n\r\n\t\t//@todo: make a separate function\r\n\t\tvar intersection = function() {\r\n\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\r\n\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t};\r\n\r\n\t\tvar segment: IGeoPoint[] = subjectPolyline;\r\n\r\n\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\r\n\t\tfor (let j in clipPolygon) {\r\n\t\t\tcp2 = clipPolygon[j];\r\n\t\t\tlet inputList = segment;\r\n\t\t\tsegment = [];\r\n\t\t\ts = inputList[0];\r\n\t\t\tfor (let i = 0; i < inputList.length; i++) {\r\n\t\t\t\te = inputList[i];\r\n\r\n\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsegment.push(e);\r\n\t\t\t\t}\r\n\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\tsegment.push(intersection());\r\n\t\t\t\t}\r\n\r\n\t\t\t\ts = e;\r\n\t\t\t}\r\n\t\t\tcp1 = cp2;\r\n\t\t}\r\n\r\n\t\treturn [segment];\r\n\t}\r\n\r\n\r\n\r\n\r\n\t//@todo add credits to roseta code\r\n\t//@todo: someday make it better\r\n\tclip(subjectPolygon: IGeoPoint[], clipPolygon: IGeoPoint[]) {\r\n\r\n\t\tif (!subjectPolygon || subjectPolygon.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet cp1: IGeoPoint;\r\n\t\tlet cp2: IGeoPoint;\r\n\r\n\t\tvar inside = function(p: IGeoPoint) {\r\n\t\t\treturn (cp2.longitude - cp1.longitude) * (p.latitude - cp1.latitude) > (cp2.latitude - cp1.latitude) * (p.longitude - cp1.longitude);\r\n\t\t};\r\n\r\n\t\tlet s: IGeoPoint;\r\n\t\tlet e: IGeoPoint;\r\n\t\t//@todo: make a separate function\r\n\t\tvar intersection = function() {\r\n\t\t\tlet dc = { longitude: cp1.longitude - cp2.longitude, latitude: cp1.latitude - cp2.latitude };\r\n\t\t\tlet dp = { longitude: s.longitude - e.longitude, latitude: s.latitude - e.latitude };\r\n\t\t\tlet n1 = cp1.longitude * cp2.latitude - cp1.latitude * cp2.longitude;\r\n\t\t\tlet n2 = s.longitude * e.latitude - s.latitude * e.longitude;\r\n\t\t\tlet n3 = 1.0 / (dc.longitude * dp.latitude - dc.latitude * dp.longitude);\r\n\r\n\t\t\treturn { longitude: (n1 * dp.longitude - n2 * dc.longitude) * n3, latitude: (n1 * dp.latitude - n2 * dc.latitude) * n3 };\r\n\t\t};\r\n\r\n\t\tvar outputList = subjectPolygon;\r\n\r\n\t\tcp1 = clipPolygon[clipPolygon.length - 1];\r\n\r\n\t\tfor (let j in clipPolygon) {\r\n\t\t\tcp2 = clipPolygon[j];\r\n\t\t\tlet inputList = outputList;\r\n\t\t\toutputList = [];\r\n\t\t\ts = inputList[inputList.length - 1]; //last on the input list\r\n\t\t\tfor (let i in inputList) {\r\n\t\t\t\te = inputList[i];\r\n\r\n\t\t\t\tif (inside(e)) {\r\n\t\t\t\t\tif (!inside(s)) {\r\n\t\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t\t}\r\n\t\t\t\t\toutputList.push(e);\r\n\t\t\t\t}\r\n\t\t\t\telse if (inside(s)) {\r\n\t\t\t\t\toutputList.push(intersection());\r\n\t\t\t\t}\r\n\t\t\t\ts = e;\r\n\t\t\t}\r\n\t\t\tcp1 = cp2;\r\n\t\t}\r\n\t\treturn outputList;\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic getExtremes(geoPoints: IGeoPoint[]): IGeoRectangle {\r\n\r\n\t\tlet west: number = geoPoints[0].longitude;\r\n\t\tlet east: number = geoPoints[0].longitude;\r\n\t\tlet north: number = geoPoints[0].latitude;\r\n\t\tlet south: number = geoPoints[0].latitude;\r\n\r\n\t\tfor (let s: number = 0; s < geoPoints.length; s++) {\r\n\t\t\tlet longitude: number = geoPoints[s].longitude;\r\n\t\t\tlet latitude: number = geoPoints[s].latitude;\r\n\r\n\t\t\tif ((west > longitude)) {\r\n\t\t\t\twest = longitude;\r\n\t\t\t}\r\n\t\t\tif ((east < longitude)) {\r\n\t\t\t\teast = longitude;\r\n\t\t\t}\r\n\r\n\t\t\tif ((north < latitude)) {\r\n\t\t\t\tnorth = latitude;\r\n\t\t\t}\r\n\t\t\tif ((south > latitude)) {\r\n\t\t\t\tsouth = latitude;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { north: north, east: east, south: south, west: west };\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic isInside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\tif (r1.north < r2.north && r1.south > r2.south && r1.west > r2.west && r1.east < r2.east) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t//@todo: move to some utils?\r\n\tpublic isOutside(r1: IGeoRectangle, r2: IGeoRectangle) {\r\n\t\tif (r1.south > r2.north || r1.north < r2.south || r1.west > r2.east || r1.east < r2.west) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\t//@todo: move to some utils?\r\n\t//@todo: add credits to: https://www.movable-type.co.uk/scripts/latlong.html\r\n\tpublic intermediatePoint(pointA: IGeoPoint, pointB: IGeoPoint, position: number) {\r\n\t\tvar phi1 = pointA.latitude * $math.RADIANS;\r\n\t\tlet lambda1 = pointA.longitude * $math.RADIANS;\r\n\r\n\t\tlet phi2 = pointB.latitude * $math.RADIANS;\r\n\t\tlet lambda2 = pointB.longitude * $math.RADIANS;\r\n\r\n\t\tvar sinPhi1 = Math.sin(phi1);\r\n\t\tlet cosPhi1 = Math.cos(phi1);\r\n\t\tlet sinLambda1 = Math.sin(lambda1);\r\n\t\tlet cosLambda1 = Math.cos(lambda1);\r\n\t\tvar sinPhi2 = Math.sin(phi2);\r\n\t\tlet cosPhi2 = Math.cos(phi2);\r\n\t\tlet sinLambda2 = Math.sin(lambda2);\r\n\t\tlet cosLambda2 = Math.cos(lambda2);\r\n\r\n\t\t// distance between points\r\n\t\tvar deltaPhi = phi2 - phi1;\r\n\t\tvar deltaLambda = lambda2 - lambda1;\r\n\t\tvar a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) + Math.cos(phi1) * Math.cos(phi2) * Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);\r\n\t\tvar delta = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n\t\tvar A = Math.sin((1 - position) * delta) / Math.sin(delta);\r\n\t\tvar B = Math.sin(position * delta) / Math.sin(delta);\r\n\r\n\t\tvar x = A * cosPhi1 * cosLambda1 + B * cosPhi2 * cosLambda2;\r\n\t\tvar y = A * cosPhi1 * sinLambda1 + B * cosPhi2 * sinLambda2;\r\n\t\tvar z = A * sinPhi1 + B * sinPhi2;\r\n\r\n\t\tvar phi3 = Math.atan2(z, Math.sqrt(x * x + y * y));\r\n\t\tvar lambda3 = Math.atan2(y, x);\r\n\r\n\t\treturn { latitude: phi3 * $math.DEGREES, longitude: lambda3 * $math.DEGREES };\r\n\t};\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n * \r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Projection\"] = Projection;\n\n\n// WEBPACK FOOTER //\n// ../../../../../../src/.internal/charts/map/projections/Projection.ts"],"sourceRoot":""}
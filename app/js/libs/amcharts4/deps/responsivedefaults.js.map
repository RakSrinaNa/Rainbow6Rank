{
  "version": 3,
  "sources": [
    "webpack:///../../../../../src/.internal/charts/axes/AxisLabelCircular.ts",
    "webpack:///../../../../../src/.internal/core/responsive/ResponsiveDefaults.ts",
    "webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts",
    "webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts",
    "webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts",
    "webpack:///../../../../../src/.internal/charts/map/SmallMap.ts",
    "webpack:///../../../../../src/.internal/charts/map/ZoomControl.ts"
  ],
  "names": [
    "__webpack_require__",
    "d",
    "__webpack_exports__",
    "AxisLabelCircular",
    "__WEBPACK_IMPORTED_MODULE_0_tslib__",
    "__WEBPACK_IMPORTED_MODULE_1__AxisLabel__",
    "__WEBPACK_IMPORTED_MODULE_2__core_Registry__",
    "__WEBPACK_IMPORTED_MODULE_3__core_utils_Math__",
    "__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__",
    "_super",
    "_this",
    "call",
    "this",
    "className",
    "padding",
    "location",
    "radius",
    "isMeasured",
    "applyTheme",
    "Object",
    "defineProperty",
    "prototype",
    "getPropertyValue",
    "value",
    "setPropertyValue",
    "fixPoint",
    "point",
    "axisRadius",
    "angle",
    "Math",
    "atan2",
    "y",
    "x",
    "invalid",
    "validate",
    "sign",
    "inside",
    "relativeRotation",
    "dy",
    "_measuredHeight",
    "dx",
    "_measuredWidth",
    "labelRadius",
    "pixelWidth",
    "bbox",
    "width",
    "pixelHeight",
    "height",
    "rotation",
    "dH",
    "dW",
    "pixelPaddingBottom",
    "pixelPaddingTop",
    "pixelPaddingLeft",
    "pixelPaddingRight",
    "registeredClasses",
    "__WEBPACK_IMPORTED_MODULE_0__charts_axes_AxisRenderer__",
    "__WEBPACK_IMPORTED_MODULE_1__charts_axes_AxisRendererX__",
    "__WEBPACK_IMPORTED_MODULE_2__charts_axes_AxisRendererY__",
    "__WEBPACK_IMPORTED_MODULE_3__charts_axes_AxisRendererCircular__",
    "__WEBPACK_IMPORTED_MODULE_4__charts_Chart__",
    "__WEBPACK_IMPORTED_MODULE_5__charts_Legend__",
    "__WEBPACK_IMPORTED_MODULE_6__charts_map_SmallMap__",
    "__WEBPACK_IMPORTED_MODULE_7__charts_map_ZoomControl__",
    "relevant",
    "container",
    "state",
    "object",
    "stateId",
    "states",
    "create",
    "properties",
    "minLabelPosition",
    "maxLabelPosition",
    "disabled",
    "layout",
    "marginLeft",
    "marginRight",
    "position",
    "marginTop",
    "marginBottom",
    "AxisRendererCircular",
    "__WEBPACK_IMPORTED_MODULE_1__AxisRenderer__",
    "__WEBPACK_IMPORTED_MODULE_2__AxisFillCircular__",
    "__WEBPACK_IMPORTED_MODULE_3__GridCircular__",
    "__WEBPACK_IMPORTED_MODULE_4__AxisLabelCircular__",
    "__WEBPACK_IMPORTED_MODULE_5__core_Registry__",
    "__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__",
    "__WEBPACK_IMPORTED_MODULE_7__core_utils_Math__",
    "__WEBPACK_IMPORTED_MODULE_8__core_rendering_Path__",
    "__WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__",
    "__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__",
    "pixelRadiusReal",
    "startAngle",
    "endAngle",
    "useChartAngles",
    "grid",
    "template",
    "labels",
    "ticks",
    "pixelPerfect",
    "tooltipLocation",
    "line",
    "strokeOpacity",
    "setAxis",
    "axis",
    "tooltip",
    "adapter",
    "add",
    "target",
    "pixelX",
    "pixelY",
    "pixelRadius",
    "cos",
    "sin",
    "chart",
    "PI",
    "invalidate",
    "innerRadius",
    "positionToPoint",
    "coordinate",
    "positionToCoordinate",
    "axisLength",
    "positionToAngle",
    "arc",
    "end",
    "start",
    "renderer",
    "inversed",
    "updateAxisLine",
    "path",
    "updateGridElement",
    "endPosition",
    "element",
    "gridInnerRadius",
    "zIndex",
    "toggleVisibility",
    "updateTickElement",
    "tick",
    "tickLength",
    "length",
    "updateLabelElement",
    "label",
    "positionItem",
    "fitsToBounds",
    "getPositionRangePath",
    "startPosition",
    "cornerRadius",
    "pixelInnerRadius",
    "createGrid",
    "createFill",
    "createLabel",
    "AxisFillCircular",
    "paper",
    "__WEBPACK_IMPORTED_MODULE_2__core_utils_Percent__",
    "draw",
    "fillPath",
    "__WEBPACK_IMPORTED_MODULE_1__AxisFill__",
    "__WEBPACK_IMPORTED_MODULE_3__core_Registry__",
    "GridCircular",
    "__WEBPACK_IMPORTED_MODULE_1__Grid__",
    "SmallMap",
    "__WEBPACK_IMPORTED_MODULE_1__core_Container__",
    "__WEBPACK_IMPORTED_MODULE_2__core_elements_Rectangle__",
    "__WEBPACK_IMPORTED_MODULE_3__core_utils_List__",
    "__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__",
    "__WEBPACK_IMPORTED_MODULE_6__core_utils_Color__",
    "__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__",
    "__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__",
    "__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__",
    "_chart",
    "align",
    "valign",
    "percentHeight",
    "percentWidth",
    "margin",
    "interfaceColors",
    "background",
    "fillOpacity",
    "fill",
    "getFor",
    "events",
    "on",
    "moveToPosition",
    "updateMapSize",
    "seriesContainer",
    "createChild",
    "shouldClone",
    "rectangle",
    "stroke",
    "strokeWidth",
    "verticalCenter",
    "horizontalCenter",
    "_disposers",
    "push",
    "_series",
    "handleSeriesAdded",
    "handleSeriesRemoved",
    "event",
    "series",
    "newValue",
    "contains",
    "newSeries",
    "clone",
    "removeValue",
    "dataUsers",
    "parent",
    "interactionsEnabled",
    "svgPoint",
    "rectPoint",
    "zoomLevel",
    "scale",
    "min",
    "geoPoint",
    "svgPointToGeo",
    "zoomToGeoPoint",
    "get",
    "set",
    "updateRectangle",
    "ceil",
    "scaleRatio",
    "afterDraw",
    "moveTo",
    "maskRectangle",
    "processConfig",
    "config",
    "i",
    "len",
    "map",
    "hasKey",
    "getKey",
    "ZoomControl",
    "__WEBPACK_IMPORTED_MODULE_2__core_elements_Button__",
    "__WEBPACK_IMPORTED_MODULE_3__core_elements_RoundedRectangle__",
    "__WEBPACK_IMPORTED_MODULE_5__core_utils_Keyboard__",
    "__WEBPACK_IMPORTED_MODULE_6__core_interaction_Interaction__",
    "__WEBPACK_IMPORTED_MODULE_7__core_utils_Percent__",
    "__WEBPACK_IMPORTED_MODULE_8__core_Registry__",
    "__WEBPACK_IMPORTED_MODULE_9__core_utils_InterfaceColorSet__",
    "plusButton",
    "text",
    "fontFamily",
    "slider",
    "handleBackgroundClick",
    "updateThumbSize",
    "thumb",
    "draggable",
    "handleThumbDrag",
    "minusButton",
    "role",
    "readerLive",
    "readerTitle",
    "language",
    "translate",
    "property",
    "fixLayout",
    "undefined",
    "toFront",
    "toBack",
    "minX",
    "maxX",
    "minY",
    "maxY",
    "sprite",
    "spritePoint",
    "maxPower",
    "log",
    "maxZoomLevel",
    "LN2",
    "minPower",
    "minZoomLevel",
    "power",
    "pow",
    "zoomGeoPoint",
    "updateThumb",
    "zoomOut",
    "body",
    "ev",
    "topParent",
    "hasFocused",
    "isKey",
    "isFocused",
    "zoomIn",
    "minHeight",
    "stepCount",
    "visible",
    "minWidth",
    "isDown",
    "step",
    "createBackground"
  ],
  "mappings": "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",
  "file": "deps/responsivedefaults.js",
  "sourcesContent": [
    "/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisLabelCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisLabelCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisLabelCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisLabelCircularEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positione along the circle.\r\n\t *\r\n\t * @param {number} value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels.\r\n\t *\r\n\t * @param {number} value Distance (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\t// No percent here, as it would be quite complicated to calculate radius\r\n\t\t// of a chart together with axis label radius\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Distance (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {IPoint}  point       Label affixation point\r\n\t * @param  {number}  axisRadius  Distance from point (px)\r\n\t * @return {IPoint}              [description]\r\n\t */\r\n\tpublic fixPoint(point: IPoint, axisRadius: number): IPoint {\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t// @todo with this math doesn't work well with inside = true\r\n\t\tthis.dy = -this._measuredHeight * (1 - (point.y + axisRadius) / (2 * axisRadius));\r\n\t\t// simmilar with dx\r\n\t\tthis.dx = -this._measuredWidth * (1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\tlet labelRadius: number = this.radius * sign;\r\n\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tlet pixelWidth = this.bbox.width;\r\n\t\t\tlet pixelHeight = this.bbox.height;\r\n\r\n\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\trelativeRotation = 90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t\tif (relativeRotation == 90) {\r\n\t\t\t\t\trelativeRotation = -90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\tpoint.y += $math.sin(angle) * labelRadius;\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisLabelCircular.ts",
    "/**\r\n * Defines default Responsive rules\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters } from \"../Sprite\";\r\nimport { SpriteState } from \"../SpriteState\";\r\nimport { Container } from \"../Container\";\r\nimport { Optional } from \"../utils/Type\";\r\nimport { AxisRenderer } from \"../../charts/axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../../charts/axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../../charts/axes/AxisRendererY\";\r\nimport { AxisRendererCircular } from \"../../charts/axes/AxisRendererCircular\";\r\nimport { Chart } from \"../../charts/Chart\";\r\nimport { Legend } from \"../../charts/Legend\";\r\nimport { SmallMap } from \"../../charts/map/SmallMap\";\r\nimport { ZoomControl } from \"../../charts/map/ZoomControl\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * RULES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Default rules.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Do not create states for objects that do not have any overrides\r\n */\r\nexport default [\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Microcharts and sparklines\r\n\t * W<=100 || H<=100\r\n\t * @todo\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelWidth <= 100) || (container.pixelHeight <= 100)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Put vertical axis labels inside\r\n\t\t\tif (object instanceof AxisRenderer) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.minLabelPosition = 1;\r\n\t\t\t\tstate.properties.maxLabelPosition = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Narrow\r\n\t * W<=200\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelWidth <= 200)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Put vertical axis labels inside\r\n\t\t\tif (object instanceof AxisRendererY) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof AxisRendererCircular) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof SmallMap) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\t/*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.height = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}*/\r\n\r\n\t\t\tif (object instanceof ZoomControl) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.layout = \"vertical\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Chart) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.marginLeft = 0;\r\n\t\t\t\tstate.properties.marginRight = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Legend && (object.position == \"left\" || object.position == \"right\")) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.position = \"bottom\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Short\r\n\t * H<=200\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelHeight <= 200)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Put vertical axis labels inside\r\n\t\t\tif (object instanceof AxisRendererX) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof AxisRendererCircular) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof SmallMap) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\t/*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.width = 100;\r\n\t\t\t\treturn state;\r\n\t\t\t}*/\r\n\r\n\t\t\tif (object instanceof ZoomControl) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.layout = \"horizontal\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Chart) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.marginTop = 0;\r\n\t\t\t\tstate.properties.marginBottom = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Legend && (object.position == \"bottom\" || object.position == \"top\")) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.position = \"right\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Super-small\r\n\t * W<=200 && H<=200\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelWidth <= 200) && (container.pixelHeight <= 200)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Hide legend\r\n\t\t\tif (object instanceof Legend) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof ZoomControl) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n];\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/responsive/ResponsiveDefaults.ts",
    "/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t *\r\n\t * @type {GridCircular}\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t *\r\n\t * @type {AxisFillCircular}\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPropertyValue(\"radius\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPropertyValue(\"innerRadius\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick         Tick element\r\n\t * @param {number}    position     Starting position\r\n\t * @param {number}    endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?:number) {\r\n\r\n\t\tif(!$type.hasValue(location)){\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.fixPoint(point, this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {GridCircular} Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisFillCircular} Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts",
    "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisFillCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisFillCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisFillCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @type {string}\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param {number}  value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts",
    "/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { Axis, AxisItemLocation } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IGridCircularProperties}\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IGridCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGridCircularEvents}\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts",
    "/**\r\n * A module for the mini-map control.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SmallMap]].\r\n */\r\nexport interface ISmallMapProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SmallMap]].\r\n */\r\nexport interface ISmallMapEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SmallMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISmallMapAdapters extends IContainerAdapters, ISmallMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SmallMap extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {SmallMaPproperties}\r\n\t */\r\n\tpublic _properties!: ISmallMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ISmallMapAdapters}\r\n\t */\r\n\tpublic _adapter!: ISmallMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ISmallMapEvents}\r\n\t */\r\n\tpublic _events!: ISmallMapEvents;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A container that holds the visual elements for the mini-map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * The rectangle element which highlights current viewport.\r\n\t *\r\n\t * @type {Rectangle}\r\n\t */\r\n\tpublic rectangle: Rectangle;\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @type {List<MapSeries>}\r\n\t */\r\n\tprotected _series: List<MapSeries>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SmallMap\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.align = \"left\";\r\n\t\tthis.valign = \"bottom\";\r\n\t\tthis.percentHeight = 20;\r\n\t\tthis.percentWidth = 20;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set background defailts\r\n\t\tthis.background.fillOpacity = 0.9;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"hit\", this.moveToPosition, this);\r\n\t\tthis.events.on(\"maxsizechanged\", this.updateMapSize, this);\r\n\r\n\t\t// Create a container\r\n\t\tthis.seriesContainer = this.createChild(Container);\r\n\t\tthis.seriesContainer.shouldClone = false;\r\n\r\n\t\t// Create an outline rectangle\r\n\t\tlet rectangle: Rectangle = this.createChild(Rectangle);\r\n\t\trectangle.shouldClone = false;\r\n\t\trectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\trectangle.strokeWidth = 1;\r\n\t\trectangle.strokeOpacity = 0.5;\r\n\t\trectangle.fill = color(); //\"none\";\r\n\t\trectangle.verticalCenter = \"middle\";\r\n\t\trectangle.horizontalCenter = \"middle\";\r\n\t\trectangle.isMeasured = false;\r\n\t\tthis.rectangle = rectangle;\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<MapSeries>} Series\r\n\t */\r\n\tpublic get series(): List<MapSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<MapSeries>();\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<MapSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<MapSeries>[\"inserted\"]) {\r\n\t\tlet series: MapSeries = event.newValue;\r\n\t\tif (this.chart.series.contains(series)) {\r\n\t\t\tlet newSeries = series.clone();\r\n\t\t\tthis._series.removeValue(series);\r\n\t\t\tthis._series.push(newSeries);\r\n\t\t\tseries = newSeries;\r\n\r\n\t\t\tthis.chart.dataUsers.push(newSeries);\r\n\t\t}\r\n\t\tseries.chart = this.chart;\r\n\t\tseries.parent = this.seriesContainer;\r\n\t\tseries.interactionsEnabled = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<MapSeries>[\"removed\"]) {\r\n\t\t//let sourceSeries: MapSeries = event.oldValue;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Moves main map pan position after click on the small map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic moveToPosition(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tlet svgPoint: IPoint = event.svgPoint;\r\n\t\tlet rectPoint: IPoint = $utils.svgPointToSprite(svgPoint, this.rectangle);\r\n\r\n\t\tlet zoomLevel: number = this.chart.zoomLevel;\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\tlet x: number = (rectPoint.x + this.rectangle.pixelWidth / 2) / scale * zoomLevel;\r\n\t\tlet y: number = (rectPoint.y + this.rectangle.pixelHeight / 2) / scale * zoomLevel;\r\n\r\n\t\tlet geoPoint: IGeoPoint = this.chart.svgPointToGeo({ x: x, y: y });\r\n\r\n\t\tthis.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart/map that this control is meant for.\r\n\t *\r\n\t * @param {MapChart}  chart  Chart/map\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tif (this.chart != chart) {\r\n\t\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"mappositionchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"scaleratiochanged\", this.updateMapSize, this)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Chart/map\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the viewport recangle as per current map zoom/pan position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRectangle(): void {\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet zoomLevel: number = chart.zoomLevel;\r\n\t\tlet rectangle: Rectangle = this.rectangle;\r\n\r\n\t\trectangle.width = this.pixelWidth / zoomLevel;\r\n\t\trectangle.height = this.pixelHeight / zoomLevel;\r\n\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\r\n\t\tlet seriesContainer: Container = chart.seriesContainer;\r\n\r\n\t\tlet x: number = Math.ceil((zoomLevel * seriesContainer.pixelWidth / 2 - seriesContainer.pixelX) * scale / zoomLevel + rectangle.pixelWidth / 2);\r\n\t\tlet y: number = Math.ceil((zoomLevel * seriesContainer.pixelHeight / 2 - seriesContainer.pixelY) * scale / zoomLevel + rectangle.pixelHeight / 2);\r\n\r\n\t\trectangle.x = x;\r\n\t\trectangle.y = y;\r\n\t}\r\n\r\n\t/**\r\n\t * Update map size so that internal elements can redraw themselves after\r\n\t * the size of the small map changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateMapSize(): void {\r\n\t\tif (this.chart) {\r\n\t\t\tthis.seriesContainer.scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\t\tthis.afterDraw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update elements after drawing the small map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n\t\tthis.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\r\n\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/SmallMap.ts",
    "/**\r\n * Zoom control module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomControl]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomControlAdapters extends IContainerAdapters, IZoomControlProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ZoomControl extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IZoomControlProperties}\r\n\t */\r\n\tpublic _properties!: IZoomControlProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IZoomControlAdapters}\r\n\t */\r\n\tpublic _adapter!: IZoomControlAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IZoomControlEvents}\r\n\t */\r\n\tpublic _events!: IZoomControlEvents;\r\n\r\n\t/**\r\n\t * Zoom in button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic plusButton: Button;\r\n\r\n\t/**\r\n\t * Zoom out button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic minusButton: Button;\r\n\r\n\t/**\r\n\t * A zoom slider background element.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic slider: Container;\r\n\r\n\t/**\r\n\t * A zoom slider thumb element.\r\n\t * @type {Button}\r\n\t */\r\n\tpublic thumb: Button;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A type to use for the background element for zoom control.\r\n\t *\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ZoomControl\";\r\n\r\n\t\tthis.align = \"right\";\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tthis.layout = \"vertical\";\r\n\t\tthis.padding(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet plusButton: Button = this.createChild(Button);\r\n\t\tplusButton.shouldClone = false;\r\n\t\tplusButton.label.text = \"+\";\r\n\t\tplusButton.width = percent(100);\r\n\t\tplusButton.padding(5, 5, 5, 5);\r\n\t\tplusButton.fontFamily = \"Verdana\";\r\n\t\tthis.plusButton = plusButton;\r\n\r\n\t\tlet slider: Container = this.createChild(Container);\r\n\t\tslider.shouldClone = false;\r\n\t\tslider.width = percent(100);\r\n\t\tslider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tslider.background.fillOpacity = 0.05;\r\n\t\tslider.background.events.on(\"hit\", this.handleBackgroundClick, this);\r\n\t\tslider.events.on(\"sizechanged\", this.updateThumbSize, this);\r\n\t\tthis.slider = slider;\r\n\r\n\t\tlet thumb: Button = slider.createChild(Button);\r\n\t\tthumb.shouldClone = false;\r\n\t\tthumb.padding(0, 0, 0, 0);\r\n\t\tthumb.draggable = true;\r\n\t\tthumb.events.on(\"drag\", this.handleThumbDrag, this);\r\n\t\tthis.thumb = thumb;\r\n\r\n\t\tlet minusButton: Button = this.createChild(Button);\r\n\t\tminusButton.shouldClone = false;\r\n\t\tminusButton.label.text = \"-\";\r\n\t\tminusButton.padding(5, 5, 5, 5);\r\n\t\tminusButton.fontFamily = \"Verdana\";\r\n\t\tthis.minusButton = minusButton;\r\n\r\n\t\t// Set roles\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\r\n\t\t// Set reader text\r\n\t\tthis.thumb.readerTitle = this.language.translate(\"Use arrow keys to zoom in and out\");\r\n\t\tthis.minusButton.readerTitle = this.language.translate(\"Press ENTER to zoom in\");\r\n\t\tthis.plusButton.readerTitle = this.language.translate(\"Press ENTER to zoom out\");\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property == \"layout\") {\r\n\t\t\t\tthis.fixLayout();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\tprotected fixLayout() {\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tthis.width = 40;\r\n\t\t\tthis.height = undefined;\r\n\t\t\tthis.minusButton.width = percent(100);\r\n\t\t\tthis.thumb.width = percent(100);\r\n\t\t\tthis.plusButton.width = percent(100);\r\n\t\t\tthis.slider.width = percent(100);\r\n\t\t\tthis.minusButton.marginTop = 1;\r\n\t\t\tthis.plusButton.marginBottom = 2;\r\n\t\t\tthis.slider.height = 0;\r\n\t\t\tthis.minusButton.toFront();\r\n\t\t\tthis.plusButton.toBack();\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.maxX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t}\r\n\t\telse if (this.layout == \"horizontal\") {\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t\tthis.thumb.maxY = 0;\r\n\t\t\tthis.height = 40;\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.minusButton.height = percent(100);\r\n\t\t\tthis.minusButton.width = 30;\r\n\t\t\tthis.thumb.height = percent(100);\r\n\t\t\tthis.thumb.width = undefined;\r\n\t\t\tthis.plusButton.height = percent(100);\r\n\t\t\tthis.plusButton.width = 30;\r\n\t\t\tthis.slider.height = percent(100);\r\n\t\t\tthis.slider.width = 0;\r\n\t\t\tthis.minusButton.marginLeft = 2;\r\n\t\t\tthis.plusButton.marginRight = 2;\r\n\t\t\tthis.minusButton.toBack();\r\n\t\t\tthis.plusButton.toFront();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles zoom operation after clicking on the slider background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic handleBackgroundClick(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\tlet sprite: Sprite = event.target;\r\n\t\tlet y: number = event.spritePoint.y;\r\n\t\tlet chart: MapChart = this.chart;\r\n\r\n\t\tlet maxPower: number = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n\t\tlet minPower: number = Math.log(chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tlet power: number = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n\t\tlet zoomLevel: number = Math.pow(2, power);\r\n\t\tchart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n\t}\r\n\r\n\t/**\r\n\t * A main chart/map that this zoom control is for.\r\n\t *\r\n\t * @param {MapChart}  chart  Map/chart\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\tchart.events.on(\"maxsizechanged\", this.updateThumbSize, this),\r\n\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateThumb, this),\r\n\t\t\tthis.minusButton.events.on(\"hit\", () => { chart.zoomOut(chart.zoomGeoPoint) }, chart),\r\n\t\t\tgetInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (this.topParent.hasFocused) {\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\t\tif (this.minusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomOut()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (this.plusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomIn()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"plus\")) {\r\n\t\t\t\t\t\tchart.zoomIn();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"minus\")) {\r\n\t\t\t\t\t\tchart.zoomOut();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, chart),\r\n\t\t\tthis.plusButton.events.on(\"hit\", () => { chart.zoomIn(chart.zoomGeoPoint) }, chart)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Map/chart\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the slider's thumb size based on the available zoom space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumbSize(): void {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet slider: Container = this.slider;\r\n\t\t\tlet thumb: Button = this.thumb;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n\r\n\t\t\t\tthumb.height = slider.pixelHeight / this.stepCount;\r\n\t\t\t\tthumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n\r\n\t\t\t\tif (thumb.pixelHeight <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n\t\t\t\tthumb.width = slider.pixelWidth / this.stepCount;\r\n\t\t\t\tthumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n\r\n\t\t\t\tif (thumb.pixelWidth <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates thumb according to current zoom position from map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumb(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\r\n\t\tif (!thumb.isDown) {\r\n\t\t\tlet step: number = (Math.log(chart.zoomLevel) - Math.log(this.chart.minZoomLevel)) / Math.LN2;\r\n\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * step / this.stepCount - thumb.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.x = slider.pixelWidth * step / this.stepCount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the actual map when slider position changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbDrag(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\t\tlet step: number;\r\n\r\n\t\tlet minStep = Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tstep = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstep = this.stepCount * thumb.pixelX / slider.pixelWidth;\r\n\t\t}\r\n\t\tstep = minStep + step;\r\n\r\n\t\tlet zoomLevel: number = Math.pow(2, step);\r\n\t\tchart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the step countfor the slider grid according to map's min and max\r\n\t * zoom level settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Step count\r\n\t */\r\n\tpublic get stepCount(): number {\r\n\t\treturn Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for slider control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {this} Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/ZoomControl.ts"
  ],
  "sourceRoot": ""
}
{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","webpack:///../../../../../src/.internal/core/responsive/ResponsiveDefaults.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/map/SmallMap.ts","webpack:///../../../../../src/.internal/charts/map/ZoomControl.ts"],"names":["__webpack_require__","d","__webpack_exports__","AxisLabelCircular","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_1__AxisLabel__","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__","_super","_this","call","this","fdx","fdy","className","padding","location","radius","isMeasured","applyTheme","Object","defineProperty","prototype","getPropertyValue","value","setPropertyValue","pixelRadius","axisRadius","sign","inside","fixPoint","point","angle","Math","atan2","y","x","invalid","validate","relativeRotation","dy","_measuredHeight","dx","_measuredWidth","labelRadius","pixelWidth","bbox","width","pixelHeight","height","rotation","dH","dW","pixelPaddingBottom","pixelPaddingTop","pixelPaddingLeft","pixelPaddingRight","registeredClasses","__WEBPACK_IMPORTED_MODULE_0__charts_axes_AxisRenderer__","__WEBPACK_IMPORTED_MODULE_1__charts_axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_2__charts_axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_3__charts_axes_AxisRendererCircular__","__WEBPACK_IMPORTED_MODULE_4__charts_Chart__","__WEBPACK_IMPORTED_MODULE_5__charts_Legend__","__WEBPACK_IMPORTED_MODULE_6__charts_map_SmallMap__","__WEBPACK_IMPORTED_MODULE_7__charts_map_ZoomControl__","relevant","container","state","object","stateId","states","create","properties","minLabelPosition","maxLabelPosition","disabled","layout","marginLeft","marginRight","position","marginTop","marginBottom","AxisRendererCircular","__WEBPACK_IMPORTED_MODULE_1__AxisRenderer__","__WEBPACK_IMPORTED_MODULE_2__AxisFillCircular__","__WEBPACK_IMPORTED_MODULE_3__GridCircular__","__WEBPACK_IMPORTED_MODULE_4__AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_8__core_rendering_Path__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__","pixelRadiusReal","startAngle","endAngle","useChartAngles","grid","template","labels","ticks","pixelPerfect","tooltipLocation","line","strokeOpacity","setAxis","axis","tooltip","adapter","add","target","pixelX","pixelY","cos","sin","chart","PI","invalidate","innerRadius","positionToPoint","coordinate","positionToCoordinate","axisLength","positionToAngle","arc","end","start","renderer","inversed","updateAxisLine","path","updateGridElement","endPosition","element","gridInnerRadius","zIndex","toggleVisibility","updateTickElement","tick","tickLength","length","updateLabelElement","label","positionItem","fitsToBounds","getPositionRangePath","startPosition","cornerRadius","pixelInnerRadius","createGrid","createFill","createLabel","AxisFillCircular","paper","__WEBPACK_IMPORTED_MODULE_2__core_utils_Percent__","draw","fillPath","__WEBPACK_IMPORTED_MODULE_1__AxisFill__","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","GridCircular","__WEBPACK_IMPORTED_MODULE_1__Grid__","SmallMap","__WEBPACK_IMPORTED_MODULE_1__core_Container__","__WEBPACK_IMPORTED_MODULE_2__core_elements_Rectangle__","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Color__","__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","_chart","align","valign","percentHeight","percentWidth","margin","interfaceColors","background","fillOpacity","fill","getFor","events","on","moveToPosition","updateMapSize","seriesContainer","createChild","shouldClone","rectangle","stroke","strokeWidth","verticalCenter","horizontalCenter","_disposers","push","_series","handleSeriesAdded","handleSeriesRemoved","event","series","newValue","contains","newSeries","clone","removeValue","dataUsers","parent","interactionsEnabled","svgPoint","rectPoint","zoomLevel","scale","min","geoPoint","svgPointToGeo","zoomToGeoPoint","get","set","updateRectangle","ceil","scaleRatio","afterDraw","moveTo","maskRectangle","processConfig","config","i","len","map","hasKey","getKey","ZoomControl","__WEBPACK_IMPORTED_MODULE_2__core_elements_Button__","__WEBPACK_IMPORTED_MODULE_3__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Keyboard__","__WEBPACK_IMPORTED_MODULE_6__core_interaction_Interaction__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_8__core_Registry__","__WEBPACK_IMPORTED_MODULE_9__core_utils_InterfaceColorSet__","plusButton","text","fontFamily","slider","handleBackgroundClick","updateThumbSize","thumb","draggable","handleThumbDrag","minusButton","role","readerLive","readerTitle","language","translate","property","fixLayout","undefined","toFront","toBack","minX","maxX","minY","maxY","sprite","spritePoint","maxPower","log","maxZoomLevel","LN2","minPower","minZoomLevel","power","pow","zoomGeoPoint","updateThumb","zoomOut","body","ev","topParent","hasFocused","isKey","isFocused","zoomIn","minHeight","stepCount","visible","minWidth","isDown","step","createBackground"],"mappings":"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","file":"deps/responsivedefaults.js","sourcesContent":["/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisLabelCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisLabelCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisLabelCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisLabelCircularEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t *\r\n\t * @type {number}\r\n\t * @ignore\r\n\t */\r\n\tpublic fdx:number = 0;\r\n\r\n\t/**\r\n\t *\r\n\t * @type {number}\r\n\t * @ignore\r\n\t */\r\n\tpublic fdy:number = 0;\t\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positione along the circle.\r\n\t *\r\n\t * @param {number} value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels or percent.\r\n\t *\r\n\t * @param {number} value Distance (px or percent)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Distance (px)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * returns label radius in pixels\r\n\t */\r\n\tpublic pixelRadius(axisRadius: number): number {\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeToValue(this.radius, axisRadius) * sign;\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {IPoint}  point       Label affixation point\r\n\t * @param  {number}  axisRadius  Distance from point (px)\r\n\t * @return {IPoint}              [description]\r\n\t */\r\n\tpublic fixPoint(point: IPoint, axisRadius: number): IPoint {\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t// @todo with this math doesn't work well with inside = true\r\n\t\tthis.dy = -this._measuredHeight * (1 - (point.y + axisRadius) / (2 * axisRadius));\r\n\t\t// simmilar with dx\r\n\t\tthis.dx = -this._measuredWidth * (1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\tlet labelRadius = this.pixelRadius(axisRadius);\r\n\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tlet pixelWidth = this.bbox.width;\r\n\t\t\tlet pixelHeight = this.bbox.height;\r\n\r\n\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\trelativeRotation = 90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t\tif (relativeRotation == 90) {\r\n\t\t\t\t\trelativeRotation = -90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.fdx = this.dx;\t\t\t\r\n\t\tthis.fdy = this.dy;\t\t\r\n\r\n\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\tpoint.y += $math.sin(angle) * labelRadius;\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","/**\r\n * Defines default Responsive rules\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters } from \"../Sprite\";\r\nimport { SpriteState } from \"../SpriteState\";\r\nimport { Container } from \"../Container\";\r\nimport { Optional } from \"../utils/Type\";\r\nimport { AxisRenderer } from \"../../charts/axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../../charts/axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../../charts/axes/AxisRendererY\";\r\nimport { AxisRendererCircular } from \"../../charts/axes/AxisRendererCircular\";\r\nimport { Chart } from \"../../charts/Chart\";\r\nimport { Legend } from \"../../charts/Legend\";\r\nimport { SmallMap } from \"../../charts/map/SmallMap\";\r\nimport { ZoomControl } from \"../../charts/map/ZoomControl\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * RULES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Default rules.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Do not create states for objects that do not have any overrides\r\n */\r\nexport default [\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Microcharts and sparklines\r\n\t * W<=100 || H<=100\r\n\t * @todo\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelWidth <= 100) || (container.pixelHeight <= 100)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Put vertical axis labels inside\r\n\t\t\tif (object instanceof AxisRenderer) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.minLabelPosition = 1;\r\n\t\t\t\tstate.properties.maxLabelPosition = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Narrow\r\n\t * W<=200\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelWidth <= 200)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Put vertical axis labels inside\r\n\t\t\tif (object instanceof AxisRendererY) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof AxisRendererCircular) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof SmallMap) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\t/*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.height = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}*/\r\n\r\n\t\t\tif (object instanceof ZoomControl) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.layout = \"vertical\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Chart) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.marginLeft = 0;\r\n\t\t\t\tstate.properties.marginRight = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Legend && (object.position == \"left\" || object.position == \"right\")) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.position = \"bottom\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Short\r\n\t * H<=200\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelHeight <= 200)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Put vertical axis labels inside\r\n\t\t\tif (object instanceof AxisRendererX) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof AxisRendererCircular) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof SmallMap) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\t/*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.width = 100;\r\n\t\t\t\treturn state;\r\n\t\t\t}*/\r\n\r\n\t\t\tif (object instanceof ZoomControl) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.layout = \"horizontal\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Chart) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.marginTop = 0;\r\n\t\t\t\tstate.properties.marginBottom = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Legend && (object.position == \"bottom\" || object.position == \"top\")) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.position = \"right\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Super-small\r\n\t * W<=200 && H<=200\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelWidth <= 200) && (container.pixelHeight <= 200)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Hide legend\r\n\t\t\tif (object instanceof Legend) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof ZoomControl) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n];\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/responsive/ResponsiveDefaults.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t *\r\n\t * @type {GridCircular}\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t *\r\n\t * @type {AxisFillCircular}\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPropertyValue(\"radius\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPropertyValue(\"innerRadius\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick         Tick element\r\n\t * @param {number}    position     Starting position\r\n\t * @param {number}    endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?:number) {\r\n\r\n\t\tif(!$type.hasValue(location)){\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.fixPoint(point, this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {GridCircular} Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisFillCircular} Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisFillCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisFillCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisFillCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @type {string}\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param {number}  value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { Axis, AxisItemLocation } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IGridCircularProperties}\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IGridCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGridCircularEvents}\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * A module for the mini-map control.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SmallMap]].\r\n */\r\nexport interface ISmallMapProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SmallMap]].\r\n */\r\nexport interface ISmallMapEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SmallMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISmallMapAdapters extends IContainerAdapters, ISmallMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SmallMap extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {SmallMaPproperties}\r\n\t */\r\n\tpublic _properties!: ISmallMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ISmallMapAdapters}\r\n\t */\r\n\tpublic _adapter!: ISmallMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ISmallMapEvents}\r\n\t */\r\n\tpublic _events!: ISmallMapEvents;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A container that holds the visual elements for the mini-map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * The rectangle element which highlights current viewport.\r\n\t *\r\n\t * @type {Rectangle}\r\n\t */\r\n\tpublic rectangle: Rectangle;\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @type {List<MapSeries>}\r\n\t */\r\n\tprotected _series: List<MapSeries>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SmallMap\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.align = \"left\";\r\n\t\tthis.valign = \"bottom\";\r\n\t\tthis.percentHeight = 20;\r\n\t\tthis.percentWidth = 20;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set background defailts\r\n\t\tthis.background.fillOpacity = 0.9;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"hit\", this.moveToPosition, this, false);\r\n\t\tthis.events.on(\"maxsizechanged\", this.updateMapSize, this, false);\r\n\r\n\t\t// Create a container\r\n\t\tthis.seriesContainer = this.createChild(Container);\r\n\t\tthis.seriesContainer.shouldClone = false;\r\n\r\n\t\t// Create an outline rectangle\r\n\t\tlet rectangle: Rectangle = this.createChild(Rectangle);\r\n\t\trectangle.shouldClone = false;\r\n\t\trectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\trectangle.strokeWidth = 1;\r\n\t\trectangle.strokeOpacity = 0.5;\r\n\t\trectangle.fill = color(); //\"none\";\r\n\t\trectangle.verticalCenter = \"middle\";\r\n\t\trectangle.horizontalCenter = \"middle\";\r\n\t\trectangle.isMeasured = false;\r\n\t\tthis.rectangle = rectangle;\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<MapSeries>} Series\r\n\t */\r\n\tpublic get series(): List<MapSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<MapSeries>();\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<MapSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<MapSeries>[\"inserted\"]) {\r\n\t\tlet series: MapSeries = event.newValue;\r\n\t\tif (this.chart.series.contains(series)) {\r\n\t\t\tlet newSeries = series.clone();\r\n\t\t\tthis._series.removeValue(series);\r\n\t\t\tthis._series.push(newSeries);\r\n\t\t\tseries = newSeries;\r\n\r\n\t\t\tthis.chart.dataUsers.push(newSeries);\r\n\t\t}\r\n\t\tseries.chart = this.chart;\r\n\t\tseries.parent = this.seriesContainer;\r\n\t\tseries.interactionsEnabled = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<MapSeries>[\"removed\"]) {\r\n\t\t//let sourceSeries: MapSeries = event.oldValue;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Moves main map pan position after click on the small map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic moveToPosition(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tlet svgPoint: IPoint = event.svgPoint;\r\n\t\tlet rectPoint: IPoint = $utils.svgPointToSprite(svgPoint, this.rectangle);\r\n\r\n\t\tlet zoomLevel: number = this.chart.zoomLevel;\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\tlet x: number = (rectPoint.x + this.rectangle.pixelWidth / 2) / scale * zoomLevel;\r\n\t\tlet y: number = (rectPoint.y + this.rectangle.pixelHeight / 2) / scale * zoomLevel;\r\n\r\n\t\tlet geoPoint: IGeoPoint = this.chart.svgPointToGeo({ x: x, y: y });\r\n\r\n\t\tthis.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart/map that this control is meant for.\r\n\t *\r\n\t * @param {MapChart}  chart  Chart/map\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tif (this.chart != chart) {\r\n\t\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\t\t//chart.events.on(\"zoomlevelchanged\", this.updateRectangle, this, false),\r\n\t\t\t\tchart.events.on(\"mappositionchanged\", this.updateRectangle, this, false),\r\n\t\t\t\tchart.events.on(\"scaleratiochanged\", this.updateMapSize, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Chart/map\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the viewport recangle as per current map zoom/pan position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRectangle(): void {\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet zoomLevel: number = chart.zoomLevel;\r\n\t\tlet rectangle: Rectangle = this.rectangle;\r\n\r\n\t\trectangle.width = this.pixelWidth / zoomLevel;\r\n\t\trectangle.height = this.pixelHeight / zoomLevel;\r\n\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\r\n\t\tlet seriesContainer: Container = chart.seriesContainer;\r\n\r\n\t\trectangle.x = Math.ceil((zoomLevel * seriesContainer.pixelWidth / 2 - seriesContainer.pixelX) * scale / zoomLevel + rectangle.pixelWidth / 2);\r\n\t\trectangle.y = Math.ceil((zoomLevel * seriesContainer.pixelHeight / 2 - seriesContainer.pixelY) * scale / zoomLevel + rectangle.pixelHeight / 2);\r\n\r\n\t\trectangle.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Update map size so that internal elements can redraw themselves after\r\n\t * the size of the small map changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateMapSize(): void {\r\n\t\tif (this.chart) {\r\n\t\t\tthis.seriesContainer.scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\t\tthis.updateRectangle();\r\n\t\t\tthis.afterDraw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update elements after drawing the small map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n\t\tthis.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\r\n\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/SmallMap.ts","/**\r\n * Zoom control module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomControl]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomControlAdapters extends IContainerAdapters, IZoomControlProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ZoomControl extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IZoomControlProperties}\r\n\t */\r\n\tpublic _properties!: IZoomControlProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IZoomControlAdapters}\r\n\t */\r\n\tpublic _adapter!: IZoomControlAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IZoomControlEvents}\r\n\t */\r\n\tpublic _events!: IZoomControlEvents;\r\n\r\n\t/**\r\n\t * Zoom in button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic plusButton: Button;\r\n\r\n\t/**\r\n\t * Zoom out button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic minusButton: Button;\r\n\r\n\t/**\r\n\t * A zoom slider background element.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic slider: Container;\r\n\r\n\t/**\r\n\t * A zoom slider thumb element.\r\n\t * @type {Button}\r\n\t */\r\n\tpublic thumb: Button;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A type to use for the background element for zoom control.\r\n\t *\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ZoomControl\";\r\n\r\n\t\tthis.align = \"right\";\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tthis.layout = \"vertical\";\r\n\t\tthis.padding(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet plusButton: Button = this.createChild(Button);\r\n\t\tplusButton.shouldClone = false;\r\n\t\tplusButton.label.text = \"+\";\r\n\t\tplusButton.width = percent(100);\r\n\t\tplusButton.padding(5, 5, 5, 5);\r\n\t\tplusButton.fontFamily = \"Verdana\";\r\n\t\tthis.plusButton = plusButton;\r\n\r\n\t\tlet slider: Container = this.createChild(Container);\r\n\t\tslider.shouldClone = false;\r\n\t\tslider.width = percent(100);\r\n\t\tslider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tslider.background.fillOpacity = 0.05;\r\n\t\tslider.background.events.on(\"hit\", this.handleBackgroundClick, this, false);\r\n\t\tslider.events.on(\"sizechanged\", this.updateThumbSize, this, false);\r\n\t\tthis.slider = slider;\r\n\r\n\t\tlet thumb: Button = slider.createChild(Button);\r\n\t\tthumb.shouldClone = false;\r\n\t\tthumb.padding(0, 0, 0, 0);\r\n\t\tthumb.draggable = true;\r\n\t\tthumb.events.on(\"drag\", this.handleThumbDrag, this, false);\r\n\t\tthis.thumb = thumb;\r\n\r\n\t\tlet minusButton: Button = this.createChild(Button);\r\n\t\tminusButton.shouldClone = false;\r\n\t\tminusButton.label.text = \"-\";\r\n\t\tminusButton.padding(5, 5, 5, 5);\r\n\t\tminusButton.fontFamily = \"Verdana\";\r\n\t\tthis.minusButton = minusButton;\r\n\r\n\t\t// Set roles\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\r\n\t\t// Set reader text\r\n\t\tthis.thumb.readerTitle = this.language.translate(\"Use arrow keys to zoom in and out\");\r\n\t\tthis.minusButton.readerTitle = this.language.translate(\"Press ENTER to zoom in\");\r\n\t\tthis.plusButton.readerTitle = this.language.translate(\"Press ENTER to zoom out\");\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property == \"layout\") {\r\n\t\t\t\tthis.fixLayout();\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\tprotected fixLayout() {\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tthis.width = 40;\r\n\t\t\tthis.height = undefined;\r\n\t\t\tthis.minusButton.width = percent(100);\r\n\t\t\tthis.thumb.width = percent(100);\r\n\t\t\tthis.plusButton.width = percent(100);\r\n\t\t\tthis.slider.width = percent(100);\r\n\t\t\tthis.minusButton.marginTop = 1;\r\n\t\t\tthis.plusButton.marginBottom = 2;\r\n\t\t\tthis.slider.height = 0;\r\n\t\t\tthis.minusButton.toFront();\r\n\t\t\tthis.plusButton.toBack();\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.maxX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t}\r\n\t\telse if (this.layout == \"horizontal\") {\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t\tthis.thumb.maxY = 0;\r\n\t\t\tthis.height = 40;\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.minusButton.height = percent(100);\r\n\t\t\tthis.minusButton.width = 30;\r\n\t\t\tthis.thumb.height = percent(100);\r\n\t\t\tthis.thumb.width = undefined;\r\n\t\t\tthis.plusButton.height = percent(100);\r\n\t\t\tthis.plusButton.width = 30;\r\n\t\t\tthis.slider.height = percent(100);\r\n\t\t\tthis.slider.width = 0;\r\n\t\t\tthis.minusButton.marginLeft = 2;\r\n\t\t\tthis.plusButton.marginRight = 2;\r\n\t\t\tthis.minusButton.toBack();\r\n\t\t\tthis.plusButton.toFront();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles zoom operation after clicking on the slider background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic handleBackgroundClick(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\tlet sprite: Sprite = event.target;\r\n\t\tlet y: number = event.spritePoint.y;\r\n\t\tlet chart: MapChart = this.chart;\r\n\r\n\t\tlet maxPower: number = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n\t\tlet minPower: number = Math.log(chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tlet power: number = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n\t\tlet zoomLevel: number = Math.pow(2, power);\r\n\t\tchart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n\t}\r\n\r\n\t/**\r\n\t * A main chart/map that this zoom control is for.\r\n\t *\r\n\t * @param {MapChart}  chart  Map/chart\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\tchart.events.on(\"maxsizechanged\", this.updateThumbSize, this, false),\r\n\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateThumb, this, false),\r\n\t\t\t\r\n\t\t\tthis.minusButton.events.on(\"hit\", () => { chart.zoomOut(chart.zoomGeoPoint) }, chart, false),\r\n\r\n\t\t\tgetInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (this.topParent.hasFocused) {\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\t\tif (this.minusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomOut()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (this.plusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomIn()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"plus\")) {\r\n\t\t\t\t\t\tchart.zoomIn();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"minus\")) {\r\n\t\t\t\t\t\tchart.zoomOut();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, chart),\r\n\t\t\tthis.plusButton.events.on(\"hit\", () => { chart.zoomIn(chart.zoomGeoPoint) }, chart, false)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Map/chart\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the slider's thumb size based on the available zoom space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumbSize(): void {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet slider: Container = this.slider;\r\n\t\t\tlet thumb: Button = this.thumb;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n\r\n\t\t\t\tthumb.height = slider.pixelHeight / this.stepCount;\r\n\t\t\t\tthumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n\r\n\t\t\t\tif (thumb.pixelHeight <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n\t\t\t\tthumb.width = slider.pixelWidth / this.stepCount;\r\n\t\t\t\tthumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n\r\n\t\t\t\tif (thumb.pixelWidth <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates thumb according to current zoom position from map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumb(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\r\n\t\tif (!thumb.isDown) {\r\n\t\t\tlet step: number = (Math.log(chart.zoomLevel) - Math.log(this.chart.minZoomLevel)) / Math.LN2;\r\n\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * step / this.stepCount - thumb.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.x = slider.pixelWidth * step / this.stepCount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the actual map when slider position changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbDrag(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\t\tlet step: number;\r\n\r\n\t\tlet minStep = Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tstep = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstep = this.stepCount * thumb.pixelX / slider.pixelWidth;\r\n\t\t}\r\n\t\tstep = minStep + step;\r\n\r\n\t\tlet zoomLevel: number = Math.pow(2, step);\r\n\t\tchart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the step countfor the slider grid according to map's min and max\r\n\t * zoom level settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Step count\r\n\t */\r\n\tpublic get stepCount(): number {\r\n\t\treturn Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for slider control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {this} Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/ZoomControl.ts"],"sourceRoot":""}
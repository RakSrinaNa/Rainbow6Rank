{"version":3,"sources":["webpack:///../../../../../src/.internal/plugins/sliceGrouper/SliceGrouper.ts","webpack:///./plugins/sliceGrouper.js"],"names":["SliceGrouper_SliceGrouper","_super","SliceGrouper","_this","call","this","smallSlices","List","bigSlices","groupName","_threshold","_clickDisposers","_clickBehavior","_ignoreDataUpdate","tslib_es6","prototype","init","processSeries","series","target","chart","baseSprite","dataProvider","data","length","_disposers","push","events","on","ev","groupSlice","undefined","clear","groupSliceItem","groupValue","dataItems","each","item","value","values","percent","dataContext","sliceGrouperOther","threshold","hiddenInLegend","hide","hidden","slice","dataFields","validateRawData","groupData","category","addData","slices","dataItem","initSlices","clickBehavior","has","toggleGroupOn","once","toggleGroupOff","show","zoomOutButton","disableType","enableType","Object","defineProperty","_zoomOutButton","tooltipContainer","createChild","ZoomOutButton","shouldClone","align","valign","zIndex","Number","MAX_SAFE_INTEGER","marginTop","marginRight","dispose","disposeClickEvents","a","shift","Plugin","Registry","registeredClasses","window","am4plugins_sliceGrouper","sliceGrouper_namespaceObject"],"mappings":"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","file":"./plugins/sliceGrouper.js","sourcesContent":["/**\r\n * Plugin for automatically grouping small chart slices into single group.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Plugin } from \"../../core/utils/Plugin\";\r\nimport { PercentSeries } from \"../../charts/series/PercentSeries\";\r\nimport { FunnelSlice } from \"../../charts/elements/FunnelSlice\";\r\nimport { PercentChart } from \"../../charts/types/PercentChart\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A plugin which automatically groups [[PercenSeries]] slices that are smaller\r\n * than certain percent into one \"Other\" slice.\r\n *\r\n * By pushing an instance of [[SliceGrouper]] into `plugin` list of\r\n * any [[PercentSeries]], it automatically applies the functionality.\r\n *\r\n * Example:\r\n *\r\n * ```TypeScript\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.valueY = \"value\";\r\n * series.dataFields.dateX = \"date\";\r\n *\r\n * let grouper = series.plugins.push(new am4plugins_sliceGrouper.SliceGrouper());\r\n * ```\r\n * ```JavaScript\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.valueY = \"value\";\r\n * series.dataFields.dateX = \"date\";\r\n *\r\n * var grouper = series.plugins.push(new am4plugins_sliceGrouper.SliceGrouper());\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"series\": [{\r\n *     // ...\r\n *   }, {\r\n *     \"type\": \"PieSeries\",\r\n *     \"dataFields\": {\r\n *       \"valueY\": \"value\",\r\n *       \"dateX\": \"date\"\r\n *     },\r\n *     \"plugins\": [{\r\n *       \"type\": \"SliceGrouper\"\r\n *     }]\r\n *   }]\r\n * }\r\n * ```\r\n *\r\n * @since 4.3.11\r\n */\r\nexport class SliceGrouper extends Plugin {\r\n\r\n\t/**\r\n\t * A series object that will need its slices grouped.\r\n\t */\r\n\tpublic target: Optional<PercentSeries>;\r\n\r\n\t/**\r\n\t * A reference to \"Other\" slice.\r\n\t */\r\n\tpublic groupSlice: Sprite | Slice | FunnelSlice;\r\n\r\n\t/**\r\n\t * A list of small slices that do not satisfy `threshold`.\r\n\t */\r\n\tpublic smallSlices: List<Sprite | Slice | FunnelSlice> = new List();\r\n\r\n\t/**\r\n\t * A list of big slices that do not satisfy `threshold`.\r\n\t */\r\n\tpublic bigSlices: List<Sprite | Slice | FunnelSlice> = new List();\r\n\r\n\t/**\r\n\t * A name to use for the \"Other\" slice.\r\n\t *\r\n\t * @default \"Other\"\r\n\t */\r\n\tpublic groupName: string = \"Other\";\r\n\r\n\t/**\r\n\t * Threshold percent.\r\n\t */\r\n\tprotected _threshold: number = 5;\r\n\r\n\t/**\r\n\t * Zoom out button. Shown when \"Other\" slice is broken down to zoom back\r\n\t * out to \"Other\".\r\n\t */\r\n\tprotected _zoomOutButton: ZoomOutButton;\r\n\r\n\t/**\r\n\t * Disposer for click events.\r\n\t */\r\n\tprotected _clickDisposers: Array<IDisposer> = [];\r\n\r\n\t/**\r\n\t * What happens when \"Other\" slice is cicked.\r\n\t */\r\n\tprotected _clickBehavior: \"none\" | \"break\" | \"zoom\" = \"none\";\r\n\r\n\tprotected _ignoreDataUpdate: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\t// Nothing to do here\r\n\t\tsuper();\r\n\t}\r\n\r\n\tpublic init() {\r\n\t\tsuper.init();\r\n\t\tthis.processSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates series with required events and adapters used to hijack its\r\n\t * data.\r\n\t */\r\n\tprivate processSeries(): void {\r\n\r\n\t\tconst series = this.target;\r\n\t\tconst chart = <PercentChart>series.baseSprite;\r\n\t\tconst dataProvider = series.data && series.data.length ? series : chart;\r\n\r\n\t\t// Invalidate calculated data whenever data updates\r\n\t\tthis._disposers.push(dataProvider.events.on(\"datavalidated\", (ev) => {\r\n\r\n\t\t\tif (this._ignoreDataUpdate) {\r\n\t\t\t\tthis._ignoreDataUpdate = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.groupSlice = undefined;\r\n\t\t\tthis.smallSlices.clear();\r\n\t\t\tthis.bigSlices.clear();\r\n\r\n\t\t\t// Collect and prepare small slices\r\n\t\t\tlet groupValue = 0;\r\n\t\t\tlet groupSliceItem;\r\n\t\t\tseries.dataItems.each((item) => {\r\n\t\t\t\tlet value = item.values.value.percent;\r\n\t\t\t\tif ((<any>item.dataContext).sliceGrouperOther) {\r\n\t\t\t\t\tgroupSliceItem = item.dataContext;\r\n\t\t\t\t}\r\n\t\t\t\telse if (value <= this.threshold) {\r\n\t\t\t\t\tgroupValue += item.value;\r\n\t\t\t\t\titem.hiddenInLegend = true;\r\n\t\t\t\t\titem.hide();\r\n\t\t\t\t\titem.hidden = true;\r\n\t\t\t\t\tthis.smallSlices.push(item.slice);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.bigSlices.push(item.slice);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// Create \"Other\" slice\r\n\t\t\tif (groupValue > 0) {\r\n\t\t\t\tif (groupSliceItem) {\r\n\t\t\t\t\t(<any>groupSliceItem)[series.dataFields.value] = groupValue;\r\n\t\t\t\t\tthis._ignoreDataUpdate = true;\r\n\t\t\t\t\tdataProvider.validateRawData();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet groupData: any = {\r\n\t\t\t\t\t\tsliceGrouperOther: true\r\n\t\t\t\t\t};\r\n\t\t\t\t\tgroupData[series.dataFields.category] = this.groupName;\r\n\t\t\t\t\tgroupData[series.dataFields.value] = groupValue;\r\n\t\t\t\t\tthis._ignoreDataUpdate = true;\r\n\t\t\t\t\tdataProvider.addData(groupData);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}));\r\n\r\n\t\tthis._disposers.push(series.events.on(\"validated\", (ev) => {\r\n\t\t\tseries.slices.each((slice) => {\r\n\t\t\t\tif ((<any>slice.dataItem.dataContext).sliceGrouperOther) {\r\n\t\t\t\t\tif (!this.groupSlice) {\r\n\t\t\t\t\t\tthis.groupSlice = slice;\r\n\t\t\t\t\t\tthis.initSlices();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes group slice.\r\n\t */\r\n\tprivate initSlices(): void {\r\n\r\n\t\tif (!this.groupSlice) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Set up click\r\n\t\tif (this.clickBehavior != \"none\") {\r\n\r\n\t\t\tif (!this.groupSlice.events.has(\"hit\")) {\r\n\t\t\t\tthis._clickDisposers.push(this.groupSlice.events.on(\"hit\", (ev) => {\r\n\t\t\t\t\tthis.toggleGroupOn();\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles group on.\r\n\t */\r\n\tprivate toggleGroupOn(): void {\r\n\r\n\t\tif (this.clickBehavior == \"none\") {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Hide \"Other\" slice\r\n\t\tthis.groupSlice.dataItem.hide();\r\n\r\n\t\tthis._clickDisposers.push(this.groupSlice.events.once(\"shown\", (ev) => {\r\n\t\t\tthis.toggleGroupOff();\r\n\t\t}));\r\n\r\n\t\t// Unhide hidden slices\r\n\t\tthis.smallSlices.each((slice) => {\r\n\t\t\tslice.dataItem.hidden = false;\r\n\t\t\tslice.dataItem.show();\r\n\t\t});\r\n\r\n\t\t// Maybe hide big slices\r\n\t\tif (this.clickBehavior == \"zoom\") {\r\n\t\t\tthis.bigSlices.each((slice) => {\r\n\t\t\t\tslice.dataItem.hide();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Show zoomout button\r\n\t\tthis.zoomOutButton.show();\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles group off.\r\n\t */\r\n\tprivate toggleGroupOff(): void {\r\n\r\n\t\tif (this.clickBehavior == \"none\") {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Toggle \"Other\" slice back on\r\n\t\tthis.groupSlice.events.disableType(\"shown\")\r\n\t\tthis.groupSlice.dataItem.show();\r\n\t\tthis.groupSlice.events.enableType(\"shown\")\r\n\r\n\r\n\t\t// Maybe unhide big slices\r\n\t\tif (this.clickBehavior == \"zoom\") {\r\n\t\t\tthis.bigSlices.each((slice) => {\r\n\t\t\t\tslice.dataItem.hidden = false;\r\n\t\t\t\tslice.dataItem.show();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Hide small slices\r\n\t\tthis.smallSlices.each((slice) => {\r\n\t\t\tslice.dataItem.hide();\r\n\t\t});\r\n\r\n\t\t// Hide zoomout button\r\n\t\tthis.zoomOutButton.hide();\r\n\t}\r\n\r\n\t/**\r\n\t * Percent threshold which slices to group. If a slice is less than\r\n\t * `threshold` percent, it will be moved into \"Other\" group.\r\n\t *\r\n\t * @default 5\r\n\t * @param  value  Threshold\r\n\t */\r\n\tpublic set threshold(value: number) {\r\n\t\tif (this._threshold != value) {\r\n\t\t\tthis._threshold = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Threshold\r\n\t */\r\n\tpublic get threshold(): number {\r\n\t\treturn this._threshold;\r\n\t}\r\n\r\n\t/**\r\n\t * An instance of [[ZoomOutButton]] that is shown when \"Other\" slice is\r\n\t * broken down, to get back to grouped state.\r\n\t * \r\n\t * @param  value  Button\r\n\t */\r\n\tpublic set zoomOutButton(value: ZoomOutButton) {\r\n\t\tthis._zoomOutButton = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Button\r\n\t */\r\n\tpublic get zoomOutButton(): ZoomOutButton {\r\n\t\tif (!this._zoomOutButton) {\r\n\t\t\tconst chart = <PercentChart>this.target.baseSprite;\r\n\t\t\tlet zoomOutButton = chart.tooltipContainer.createChild(ZoomOutButton);\r\n\t\t\tzoomOutButton.shouldClone = false;\r\n\t\t\tzoomOutButton.align = \"right\";\r\n\t\t\tzoomOutButton.valign = \"top\";\r\n\t\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\t\tzoomOutButton.marginTop = 5;\r\n\t\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\t\tzoomOutButton.hide(0);\r\n\t\t\tthis.zoomOutButton = zoomOutButton;\r\n\t\t\tthis._disposers.push(this._zoomOutButton);\r\n\r\n\t\t\tzoomOutButton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.toggleGroupOff();\r\n\t\t\t}, this);\r\n\t\t}\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\t/**\r\n\t * What happens when \"Other\" slice is clicked/tapped:\r\n\t *\r\n\t * * \"none\": nothing (default)\r\n\t * * \"break\": the slice is broken down into actual slices it consists of\r\n\t * * \"zoom\": actual small slices are shown and the rest of the slices are hidden\r\n\t * \r\n\t * @param  value  Click behavior\r\n\t */\r\n\tpublic set clickBehavior(value: \"none\" | \"break\" | \"zoom\") {\r\n\t\tif (this._clickBehavior != value) {\r\n\t\t\tthis._clickBehavior = value;\r\n\t\t\tthis.initSlices();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Click behavior\r\n\t */\r\n\tpublic get clickBehavior(): \"none\" | \"break\" | \"zoom\" {\r\n\t\treturn this._clickBehavior;\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes the element\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tthis.disposeClickEvents();\r\n\t\tthis.groupSlice = undefined;\r\n\t\tthis.smallSlices.clear();\r\n\t\tthis.bigSlices.clear();\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\tprivate disposeClickEvents(): void {\r\n\t\tconst a = this._clickDisposers;\r\n\t\tthis._clickDisposers = <any>null;\r\n\t\twhile (a.length !== 0) {\r\n\t\t\tconst disposer = a.shift();\r\n\t\t\tdisposer.dispose();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SliceGrouper\"] = SliceGrouper;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/plugins/sliceGrouper/SliceGrouper.ts","import * as m from \"../../es2015/plugins/sliceGrouper\";\nwindow.am4plugins_sliceGrouper = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./plugins/sliceGrouper.js\n// module id = null\n// module chunks = "],"sourceRoot":""}
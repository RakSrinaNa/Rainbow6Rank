{
  "version": 3,
  "sources": [
    "webpack:///../../../../../src/.internal/charts/types/XYChart.ts",
    "webpack:///../../../../../src/.internal/charts/axes/CategoryAxis.ts",
    "webpack:///../../../../../src/.internal/charts/axes/AxisLabelCircular.ts",
    "webpack:///../../../../../src/.internal/charts/series/XYSeries.ts",
    "webpack:///../../../../../src/.internal/charts/axes/DateAxis.ts",
    "webpack:///../../../../../src/.internal/charts/cursors/XYCursor.ts",
    "webpack:///../../../../../src/.internal/charts/series/LineSeries.ts",
    "webpack:///../../../../../src/.internal/charts/series/LineSeriesSegment.ts",
    "webpack:///../../../../../src/.internal/charts/series/PieSeries.ts",
    "webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts",
    "webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts",
    "webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts",
    "webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts",
    "webpack:///../../../../../src/.internal/charts/types/RadarChart.ts",
    "webpack:///../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts",
    "webpack:///../../../../../src/.internal/charts/axes/DateAxisBreak.ts",
    "webpack:///../../../../../src/.internal/charts/cursors/Cursor.ts",
    "webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts",
    "webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts",
    "webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts",
    "webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts",
    "webpack:///../../../../../src/.internal/charts/types/PieChart.ts",
    "webpack:///../../../../../src/.internal/charts/types/PercentChart.ts",
    "webpack:///../../../../../src/.internal/charts/elements/PieTick.ts",
    "webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts",
    "webpack:///../../../../../src/.internal/charts/elements/ChordNode.ts",
    "webpack:///../../../../../src/.internal/charts/elements/ChordLink.ts",
    "webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts",
    "webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts",
    "webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts",
    "webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts",
    "webpack:///../../../../../src/.internal/charts/elements/Column3D.ts",
    "webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts",
    "webpack:///../../../../../src/.internal/charts/elements/OHLC.ts",
    "webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts",
    "webpack:///../../../../../src/.internal/charts/series/PyramidSeries.ts",
    "webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts",
    "webpack:///../../../../../src/.internal/charts/elements/CurvedColumn.ts",
    "webpack:///./charts.js",
    "webpack:///../../src/charts.ts",
    "webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts",
    "webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts",
    "webpack:///../../../../../src/.internal/charts/types/SlicedChart.ts",
    "webpack:///../../../../../src/.internal/charts/types/ChordDiagram.ts",
    "webpack:///../../../../../src/.internal/core/elements/QuadraticCurve.ts",
    "webpack:///../../../../../src/.internal/charts/types/TreeMap.ts",
    "webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts",
    "webpack:///../../../../../src/.internal/charts/series/OHLCSeries.ts",
    "webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts",
    "webpack:///../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts",
    "webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts",
    "webpack:///../../../../../src/.internal/charts/series/PictorialStackedSeries.ts",
    "webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts",
    "webpack:///../../../../../src/.internal/charts/series/CurvedColumnSeries.ts",
    "webpack:///../../../../../src/.internal/charts/axes/DurationAxis.ts",
    "webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts",
    "webpack:///../../../../../src/.internal/charts/elements/XYChartScrollbar.ts",
    "webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts",
    "webpack:///../../../../../src/.internal/charts/series/ColumnSeries.ts",
    "webpack:///../../../../../src/.internal/charts/elements/Column.ts"
  ],
  "names": [
    "__webpack_require__",
    "d",
    "__webpack_exports__",
    "XYChartDataItem",
    "XYChart",
    "__WEBPACK_IMPORTED_MODULE_0_tslib__",
    "__WEBPACK_IMPORTED_MODULE_1__SerialChart__",
    "__WEBPACK_IMPORTED_MODULE_2__core_Container__",
    "__WEBPACK_IMPORTED_MODULE_3__core_utils_List__",
    "__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererX__",
    "__WEBPACK_IMPORTED_MODULE_5__axes_AxisRendererY__",
    "__WEBPACK_IMPORTED_MODULE_6__axes_CategoryAxis__",
    "__WEBPACK_IMPORTED_MODULE_7__series_XYSeries__",
    "__WEBPACK_IMPORTED_MODULE_8__cursors_XYCursor__",
    "__WEBPACK_IMPORTED_MODULE_9__core_elements_ZoomOutButton__",
    "__WEBPACK_IMPORTED_MODULE_10__core_utils_Percent__",
    "__WEBPACK_IMPORTED_MODULE_11__core_Registry__",
    "__WEBPACK_IMPORTED_MODULE_12__core_utils_Math__",
    "__WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__",
    "__WEBPACK_IMPORTED_MODULE_14__core_utils_Type__",
    "__WEBPACK_IMPORTED_MODULE_15__core_utils_Utils__",
    "_super",
    "_this",
    "call",
    "this",
    "className",
    "applyTheme",
    "_axisRendererX",
    "_axisRendererY",
    "maskBullets",
    "chartContainer",
    "layout",
    "padding",
    "topAxesCont",
    "createChild",
    "shouldClone",
    "width",
    "Object",
    "zIndex",
    "topAxesContainer",
    "yAxesAndPlotCont",
    "height",
    "yAxesAndPlotContainer",
    "bottomAxesCont",
    "bottomAxesContainer",
    "leftAxesCont",
    "contentAlign",
    "events",
    "on",
    "updateXAxesMargins",
    "leftAxesContainer",
    "plotCont",
    "background",
    "fillOpacity",
    "plotContainer",
    "mouseWheelBehavior",
    "_cursorContainer",
    "rightAxesCont",
    "rightAxesContainer",
    "seriesContainer",
    "parent",
    "bulletsContainer",
    "zoomOutButton",
    "align",
    "valign",
    "Number",
    "MAX_SAFE_INTEGER",
    "marginTop",
    "marginRight",
    "hide",
    "_bulletMask",
    "prototype",
    "applyInternalDefaults",
    "readerTitle",
    "language",
    "translate",
    "draw",
    "toFront",
    "mask",
    "updateSeriesLegend",
    "updatePlotElements",
    "series",
    "iterator",
    "invalidate",
    "validateData",
    "_parseDataFrom",
    "dataChangeUpdate",
    "leftAxesWidth",
    "measuredWidth",
    "rightAxesWidth",
    "paddingLeft",
    "paddingRight",
    "handleXAxisChange",
    "event",
    "updateXAxis",
    "target",
    "handleYAxisChange",
    "updateYAxis",
    "processXAxis",
    "axis",
    "newValue",
    "chart",
    "renderer",
    "axisLetter",
    "observe",
    "handleXAxisRangeChange",
    "dataProvider",
    "processAxis",
    "processXAxisRemoval",
    "oldValue",
    "off",
    "processYAxis",
    "handleYAxisRangeChange",
    "processYAxisRemoval",
    "range",
    "getCommonAxisRange",
    "xAxes",
    "scrollbarX",
    "zoomAxes",
    "toggleZoomOutButton",
    "updateScrollbar",
    "show_1",
    "start",
    "end",
    "yAxes",
    "seriesAppeared",
    "show",
    "appeared",
    "scrollbarY",
    "scrollbar",
    "skipRangeEvents",
    "axes",
    "axisStart",
    "axisEnd",
    "inversed",
    "opposite",
    "toBack",
    "processRenderer",
    "_dataUsers",
    "moveValue",
    "gridContainer",
    "breakContainer",
    "invalidateDataItems",
    "defineProperty",
    "_xAxes",
    "_yAxes",
    "handleSeriesAdded",
    "xAxis",
    "yAxis",
    "undefined",
    "fill",
    "colors",
    "next",
    "stroke",
    "e",
    "raiseCriticalError",
    "_cursor",
    "cursor",
    "removeDispose",
    "_disposers",
    "push",
    "handleCursorPositionChange",
    "handleCursorZoomStart",
    "handleCursorZoomEnd",
    "handleCursorPanStart",
    "handleCursorPanning",
    "handleCursorPanEnd",
    "handleCursorCanceled",
    "handleHideCursor",
    "createCursor",
    "visible",
    "isHiding",
    "xPosition",
    "yPosition",
    "showAxisTooltip",
    "showSeriesTooltip",
    "x",
    "y",
    "hideObjectTooltip",
    "updateLegendValue",
    "sprites",
    "sprite",
    "tooltip",
    "position",
    "topLeft",
    "bottomRight",
    "pixelWidth",
    "pixelHeight",
    "seriesPoints",
    "each",
    "tooltipText",
    "tooltipHTML",
    "setBounds",
    "point",
    "showTooltipAtPosition",
    "sort",
    "a",
    "b",
    "length",
    "top_1",
    "bottom",
    "topSeriesPoints",
    "botSeriesPoints",
    "i",
    "len",
    "nextY",
    "pointY",
    "invalid",
    "validate",
    "label",
    "pixelY",
    "measuredHeight",
    "pixelMarginBottom",
    "nextHeight",
    "pixelMarginTop",
    "dataItems",
    "getUpdatedRange",
    "difference",
    "behavior",
    "xRange",
    "getIndex",
    "priority",
    "yRange",
    "_panStartXRange",
    "_panStartYRange",
    "_panEndXRange",
    "delta",
    "panEndRange",
    "_panEndYRange",
    "maxPanOut",
    "panStartRange",
    "newStart",
    "Math",
    "max",
    "newEnd",
    "min",
    "newRange",
    "_scrollbarX",
    "orientation",
    "handleXScrollbarChange",
    "adapter",
    "add",
    "arg",
    "value",
    "getPositionLabel",
    "_scrollbarY",
    "handleYScrollbarChange",
    "fixRange",
    "instantly",
    "round",
    "realRange",
    "dataInvalid",
    "diff",
    "roundPosition",
    "axisRange",
    "zoom",
    "getPropertyValue",
    "setPropertyValue",
    "handleWheel",
    "svgPoint",
    "htmlContainer",
    "plotPoint",
    "shift",
    "rangeX",
    "rangeY",
    "differenceX",
    "newStartX",
    "newEndX",
    "differenceY",
    "newStartY",
    "newEndY",
    "locationX",
    "maxWidth",
    "locationY",
    "maxHeight",
    "_mouseWheelDisposer",
    "wheelable",
    "hoverable",
    "dispose",
    "dataSourceDateFields",
    "fields",
    "populateDataSourceFields",
    "dataFields",
    "dataSourceNumberFields",
    "processConfig",
    "config",
    "type",
    "Error",
    "axisRanges",
    "index",
    "configOrder",
    "createSeries",
    "_zoomOutButton",
    "button",
    "copyFrom",
    "source",
    "registeredClasses",
    "CategoryAxisDataItem",
    "CategoryAxis",
    "__WEBPACK_IMPORTED_MODULE_1__Axis__",
    "__WEBPACK_IMPORTED_MODULE_2__core_Registry__",
    "__WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__",
    "__WEBPACK_IMPORTED_MODULE_4__CategoryAxisBreak__",
    "__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__",
    "__WEBPACK_IMPORTED_MODULE_6__core_utils_Type__",
    "__WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__",
    "text",
    "locations",
    "category",
    "endCategory",
    "properties",
    "setProperty",
    "dataItemsByCategory",
    "axisFieldName",
    "_lastDataItem",
    "createDataItem",
    "component",
    "createAxisBreak",
    "validateDataRange",
    "dataCount",
    "startIndex",
    "floor",
    "endIndex",
    "ceil",
    "maxCount",
    "axisLength",
    "minGridDistance",
    "frequency",
    "_startIndex",
    "_endIndex",
    "fixAxisBreaks",
    "_frequency",
    "_series",
    "invalidateDataRange",
    "axisBreaks",
    "maxZoomFactor",
    "resetIterators",
    "itemIndex",
    "dataItem",
    "__disabled",
    "isInBreak",
    "appendDataItem",
    "validateDataElement",
    "axisBreak",
    "adjustedStartValue",
    "adjustedEndValue",
    "breakSize",
    "itemIndex_1",
    "categoryToIndex",
    "fillEndIndex",
    "fillPosition",
    "fillEndPosition",
    "indexToPosition",
    "endPosition",
    "isRange",
    "axisFill",
    "location",
    "positionToPoint",
    "tick",
    "updateTickElement",
    "grid",
    "updateGridElement",
    "updateLabelElement",
    "updateFillElement",
    "fillRule",
    "processDataItem",
    "dataContext",
    "existingDataItem",
    "getKey",
    "remove",
    "setKey",
    "adjustDifference",
    "startLocation",
    "endLocation",
    "breakStartIndex",
    "breakEndIndex",
    "categoryToPosition",
    "categoryToPoint",
    "angle",
    "positionToAngle",
    "anyToPoint",
    "anyToPosition",
    "zoomToCategories",
    "startCategory",
    "zoomToIndexes",
    "getAnyRangePath",
    "startPos",
    "endPos",
    "getPositionRangePath",
    "positionToIndex",
    "getSeriesDataItem",
    "getX",
    "key",
    "categories",
    "basePoint",
    "getY",
    "getAngle",
    "stackKey",
    "getCellStartPosition",
    "getCellEndPosition",
    "getTooltipText",
    "apply",
    "breakStartPosition",
    "startPosition",
    "breakEndPosition",
    "breakPosition",
    "initRenderer",
    "baseGrid",
    "disabled",
    "AxisLabelCircular",
    "__WEBPACK_IMPORTED_MODULE_1__AxisLabel__",
    "__WEBPACK_IMPORTED_MODULE_3__core_utils_Math__",
    "__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__",
    "radius",
    "isMeasured",
    "fixPoint",
    "axisRadius",
    "atan2",
    "sign",
    "inside",
    "relativeRotation",
    "dy",
    "_measuredHeight",
    "dx",
    "_measuredWidth",
    "labelRadius",
    "bbox",
    "rotation",
    "dH",
    "dW",
    "pixelPaddingBottom",
    "pixelPaddingTop",
    "pixelPaddingLeft",
    "pixelPaddingRight",
    "XYSeriesDataItem",
    "XYSeries",
    "__WEBPACK_IMPORTED_MODULE_1__Series__",
    "__WEBPACK_IMPORTED_MODULE_2__core_Sprite__",
    "__WEBPACK_IMPORTED_MODULE_3__axes_ValueAxis__",
    "__WEBPACK_IMPORTED_MODULE_4__core_utils_Dictionary__",
    "__WEBPACK_IMPORTED_MODULE_5__core_utils_Disposer__",
    "__WEBPACK_IMPORTED_MODULE_7__axes_DateAxis__",
    "__WEBPACK_IMPORTED_MODULE_8__core_Registry__",
    "__WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__",
    "__WEBPACK_IMPORTED_MODULE_10__core_utils_Math__",
    "__WEBPACK_IMPORTED_MODULE_11__core_utils_Utils__",
    "__WEBPACK_IMPORTED_MODULE_12__core_utils_Type__",
    "__WEBPACK_IMPORTED_MODULE_13__core_utils_Array__",
    "__WEBPACK_IMPORTED_MODULE_14__core_rendering_Path__",
    "values",
    "valueX",
    "stack",
    "valueY",
    "openValueX",
    "openValueY",
    "dateX",
    "dateY",
    "openDateX",
    "openDateY",
    "setLocation",
    "setValue",
    "getDate",
    "date",
    "setDate",
    "categoryX",
    "setCategory",
    "categoryY",
    "openCategoryX",
    "openCategoryY",
    "getMin",
    "working",
    "stackValue",
    "field",
    "getWorkingValue",
    "getValue",
    "getMax",
    "_xAxis",
    "_yAxis",
    "mainContainer",
    "setElement",
    "paper",
    "stacked",
    "pointerOrientation",
    "returnBulletDefaultState",
    "_tmin",
    "clear",
    "_tmax",
    "_smin",
    "_smax",
    "defineFields",
    "data",
    "_xField",
    "_yField",
    "name",
    "uid",
    "disable",
    "processSeriesDataItem",
    "enable",
    "setInitialWorkingValues",
    "_chart",
    "disposeData",
    "dataItemsX",
    "dataItemsByAxis",
    "dataItemsY",
    "xAxisFieldName",
    "xField",
    "xOpenField",
    "yAxisFieldName",
    "yField",
    "yOpenField",
    "_xOpenField",
    "_yOpenField",
    "baseAxis",
    "_xValueFields",
    "_yValueFields",
    "addValueField",
    "indexOf",
    "setCategoryAxisField",
    "setDateAxisField",
    "afterDraw",
    "createMask",
    "path_1",
    "getMaskPath",
    "fillPath",
    "path",
    "getAxisField",
    "validateDataItems",
    "updateAxisBySeries",
    "postProcessSeriesDataItems",
    "dataRangeInvalid",
    "_showBullets",
    "minBulletDistance",
    "get",
    "oldAxis",
    "removeKey",
    "removeValue",
    "set",
    "registerSeries",
    "invalidateData",
    "_baseAxis",
    "processValues",
    "minX",
    "Infinity",
    "maxX",
    "minY",
    "maxY",
    "getStackValue",
    "stackX",
    "stackY",
    "processSeriesDataItems",
    "xAxisId",
    "yAxisId",
    "dispatchImmediately",
    "toAxisPosition",
    "tooltipDataItem",
    "tooltipXField",
    "tooltipYField",
    "tooltipPoint",
    "getPoint",
    "tooltipX",
    "tooltipY",
    "_prevTooltipDataItem",
    "_a",
    "bullets",
    "_b",
    "done",
    "setState",
    "showTooltip",
    "hideTooltip",
    "positionBullet",
    "bullet",
    "hasValue",
    "bulletLocationX",
    "getBulletLocationX",
    "bulletLocationY",
    "moveTo",
    "bulletLocation",
    "workingLocations",
    "getBulletLocationY",
    "duration",
    "animation",
    "interpolationDuration",
    "delay",
    "sequencedInterpolation",
    "sequencedInterpolationDelay",
    "minZoomed",
    "maxZoomed",
    "isDisposed",
    "once",
    "handleDataItemWorkingValueChange",
    "axisSeries",
    "invalidateProcessedData",
    "field_1",
    "setCalculatedValue",
    "backwards",
    "prevSeries",
    "stackedSeries",
    "prevDataItem",
    "prevValue",
    "_tooltipXField",
    "_tooltipYField",
    "selectionMin",
    "selectionMax",
    "map",
    "hasKey",
    "xKey",
    "yKey",
    "stackKeyX",
    "stackKeyY",
    "DateAxisDataItem",
    "DateAxis",
    "__WEBPACK_IMPORTED_MODULE_1__ValueAxis__",
    "__WEBPACK_IMPORTED_MODULE_2__core_utils_List__",
    "__WEBPACK_IMPORTED_MODULE_4__DateAxisBreak__",
    "__WEBPACK_IMPORTED_MODULE_5__core_Registry__",
    "__WEBPACK_IMPORTED_MODULE_6__core_utils_Time__",
    "__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__",
    "__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__",
    "__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__",
    "__WEBPACK_IMPORTED_MODULE_10__core_utils_Object__",
    "endDate",
    "dates",
    "getTime",
    "endValue",
    "gridIntervals",
    "dateFormats",
    "periodChangeDateFormats",
    "_baseIntervalReal",
    "timeUnit",
    "count",
    "_minSeriesDifference",
    "MAX_VALUE",
    "gridInterval",
    "_gridInterval",
    "gridDuration",
    "pushAll",
    "periodCount",
    "baseDuration",
    "handleSelectionExtremesChange",
    "calculateZoom",
    "chooseInterval",
    "_minZoomed",
    "_maxZoomed",
    "_gridCount",
    "baseInterval",
    "_gridDate",
    "Date",
    "_nextGridUnit",
    "_intervalDuration",
    "_difference",
    "findClosestIndex",
    "hasMoreThanOne",
    "postProcessSeriesDataItem",
    "addEmptyUnitsBreaks",
    "startDate",
    "toString",
    "skipEmptyPeriods",
    "startTime",
    "startTimeStr",
    "this_1",
    "create",
    "_axisBreaks",
    "breakGridCount",
    "gridDate",
    "getGridDate",
    "intervalCount",
    "realIntervalCount",
    "prevTimestamp",
    "newDate",
    "timestamp",
    "getBreaklessDate",
    "durationBreaksRemoved",
    "validateAxisElements",
    "prevGridDate",
    "dataItemsIterator_1",
    "_dataItemsIterator",
    "this_2",
    "format",
    "markUnitChange",
    "dateFormatter",
    "find",
    "renderer_1",
    "timeUnit_1",
    "intervalCount_1",
    "startPoint",
    "endPoint",
    "prevGridDate_1",
    "timestamp_1",
    "text_1",
    "adjustedMax",
    "endTimestamp",
    "valueToPosition",
    "location_1",
    "adjustMinMax",
    "step",
    "fixMin",
    "fixMax",
    "gridCount",
    "intervalDuration",
    "lastIndex",
    "formatLabel",
    "dateToPosition",
    "dateToPoint",
    "valueToPoint",
    "positionToDate",
    "positionToValue",
    "getTimeByLocation",
    "baseValue",
    "endTime",
    "time",
    "openTime",
    "openDate",
    "prevSeriesTime",
    "_prevSeriesTime",
    "abs",
    "differece",
    "_baseInterval",
    "timeInterval",
    "breakTemplate",
    "template",
    "startLine",
    "endLine",
    "fillShape",
    "tooltipDateFormat",
    "dateFormat",
    "leftCount",
    "leftDataItem",
    "leftDate",
    "rightCount",
    "rightDataItem",
    "rightDate",
    "getCurrentLabelFormat",
    "ticks",
    "labels",
    "zoomToDates",
    "skipRangeEvent",
    "parse",
    "zoomToValues",
    "asIs",
    "XYCursor",
    "__WEBPACK_IMPORTED_MODULE_1__Cursor__",
    "__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__",
    "__WEBPACK_IMPORTED_MODULE_4__core_Registry__",
    "__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__",
    "__WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__",
    "__WEBPACK_IMPORTED_MODULE_7__core_utils_Math__",
    "__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__",
    "__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__",
    "__WEBPACK_IMPORTED_MODULE_10__core_rendering_Path__",
    "_lineX",
    "_lineY",
    "interfaceColors",
    "selection",
    "getFor",
    "lineX",
    "strokeDasharray",
    "strokeOpacity",
    "lineY",
    "updateSize",
    "innerHeight",
    "innerWidth",
    "updateSelection",
    "_usesSelection",
    "downPoint",
    "pixelX",
    "w",
    "_positionPrecision",
    "h",
    "validatePosition",
    "triggerMoveReal",
    "updateLinePositions",
    "_generalBehavior",
    "getPanningRanges",
    "dispatch",
    "triggerDownReal",
    "fitsToBounds",
    "updatePoint",
    "selectionX",
    "selectionY",
    "triggerUpReal",
    "upPoint",
    "getRanges",
    "startX",
    "startY",
    "deltaX",
    "deltaY",
    "endX",
    "endY",
    "handleXTooltipPosition",
    "handleYTooltipPosition",
    "fullWidthLineX",
    "currentItemStartPoint",
    "currentItemEndPoint",
    "fullWidthLineY",
    "interactionsEnabled",
    "reset",
    "_selection",
    "element",
    "LineSeriesDataItem",
    "LineSeries",
    "__WEBPACK_IMPORTED_MODULE_1__XYSeries__",
    "__WEBPACK_IMPORTED_MODULE_3__core_Container__",
    "__WEBPACK_IMPORTED_MODULE_4__core_utils_List__",
    "__WEBPACK_IMPORTED_MODULE_5__LineSeriesSegment__",
    "__WEBPACK_IMPORTED_MODULE_6__axes_ValueAxis__",
    "__WEBPACK_IMPORTED_MODULE_9__core_elements_Line__",
    "__WEBPACK_IMPORTED_MODULE_10__core_elements_Label__",
    "__WEBPACK_IMPORTED_MODULE_11__core_elements_Rectangle__",
    "__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__",
    "__WEBPACK_IMPORTED_MODULE_13__core_utils_Object__",
    "minDistance",
    "segments",
    "createSegment",
    "applyOnClones",
    "_segmentsIterator",
    "createNewItems",
    "connect",
    "tensionX",
    "tensionY",
    "segmentsContainer",
    "previousDataItem",
    "initialY",
    "workingValue",
    "setWorkingValue",
    "setWorkingLocation",
    "initialX",
    "openSegment",
    "_workingStartIndex",
    "segment",
    "sliceData",
    "_workingEndIndex",
    "openIndex",
    "closeIndex",
    "points",
    "propertiesChanged",
    "getFirst",
    "contents",
    "filters",
    "hasProperties",
    "updateSegmentProperties",
    "addPoints",
    "closeSegment",
    "closePoints",
    "drawSegment",
    "itemProperties",
    "checkOnly",
    "changed",
    "propertyName",
    "currentValue",
    "currentValueStr",
    "valueStr",
    "createLegendMarker",
    "marker",
    "disposeChildren",
    "line",
    "x2",
    "copyToLegendMarker",
    "hasLabels_1",
    "children",
    "child",
    "clone",
    "LineSeriesSegment",
    "__WEBPACK_IMPORTED_MODULE_1__core_Container__",
    "__WEBPACK_IMPORTED_MODULE_3__core_Registry__",
    "__WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__",
    "__WEBPACK_IMPORTED_MODULE_5__core_utils_Object__",
    "__WEBPACK_IMPORTED_MODULE_6__core_rendering_Smoothing__",
    "fillSprite",
    "strokeSprite",
    "smoothnessX",
    "smoothnessY",
    "smooth",
    "lineElement",
    "fillElement",
    "PieSeriesDataItem",
    "PieSeries",
    "__WEBPACK_IMPORTED_MODULE_1__PercentSeries__",
    "__WEBPACK_IMPORTED_MODULE_2__core_elements_Slice__",
    "__WEBPACK_IMPORTED_MODULE_3__axes_AxisLabelCircular__",
    "__WEBPACK_IMPORTED_MODULE_4__elements_PieTick__",
    "__WEBPACK_IMPORTED_MODULE_6__core_utils_Math__",
    "__WEBPACK_IMPORTED_MODULE_8__core_utils_Percent__",
    "radiusValue",
    "toValue",
    "alignLabels",
    "startAngle",
    "endAngle",
    "createSlice",
    "createTick",
    "createLabel",
    "initSlice",
    "slice",
    "defaultState",
    "scale",
    "handleSliceScale",
    "handleSliceMove",
    "states",
    "shiftRadius",
    "togglable",
    "hiddenState",
    "opacity",
    "_leftItems",
    "_rightItems",
    "_currentStartAngle",
    "_arcRect",
    "_maxRadiusPercent",
    "radiusValuePercent",
    "percent",
    "reverse",
    "arrangeLabels",
    "pixelRadius",
    "innerRadius",
    "pixelInnerRadius",
    "arc",
    "normalizedMiddleAngle",
    "middleAngle",
    "verticalCenter",
    "arcRect",
    "horizontalCenter",
    "distance",
    "iy",
    "ix",
    "radiusY",
    "_pixelRadius",
    "_pixelInnerRadius",
    "getContainerBBox",
    "Candlestick",
    "__WEBPACK_IMPORTED_MODULE_1__Column__",
    "__WEBPACK_IMPORTED_MODULE_2__core_elements_Line__",
    "createAssets",
    "lowLine",
    "highLine",
    "AxisRendererCircular",
    "__WEBPACK_IMPORTED_MODULE_1__AxisRenderer__",
    "__WEBPACK_IMPORTED_MODULE_2__AxisFillCircular__",
    "__WEBPACK_IMPORTED_MODULE_3__GridCircular__",
    "__WEBPACK_IMPORTED_MODULE_4__AxisLabelCircular__",
    "__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__",
    "__WEBPACK_IMPORTED_MODULE_8__core_rendering_Path__",
    "__WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__",
    "__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__",
    "pixelRadiusReal",
    "useChartAngles",
    "pixelPerfect",
    "tooltipLocation",
    "setAxis",
    "cos",
    "sin",
    "PI",
    "coordinate",
    "positionToCoordinate",
    "updateAxisLine",
    "gridInnerRadius",
    "toggleVisibility",
    "tickLength",
    "positionItem",
    "minLabelPosition",
    "maxLabelPosition",
    "cornerRadius",
    "createGrid",
    "createFill",
    "AxisFillCircular",
    "__WEBPACK_IMPORTED_MODULE_2__core_utils_Percent__",
    "__WEBPACK_IMPORTED_MODULE_1__AxisFill__",
    "GridCircular",
    "__WEBPACK_IMPORTED_MODULE_1__Grid__",
    "RadarChartDataItem",
    "RadarChart",
    "__WEBPACK_IMPORTED_MODULE_1__XYChart__",
    "__WEBPACK_IMPORTED_MODULE_3__series_RadarSeries__",
    "__WEBPACK_IMPORTED_MODULE_4__core_Container__",
    "__WEBPACK_IMPORTED_MODULE_5__core_elements_Circle__",
    "__WEBPACK_IMPORTED_MODULE_6__core_Registry__",
    "__WEBPACK_IMPORTED_MODULE_7__cursors_RadarCursor__",
    "__WEBPACK_IMPORTED_MODULE_8__axes_AxisRendererCircular__",
    "__WEBPACK_IMPORTED_MODULE_9__axes_AxisRendererRadial__",
    "__WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__",
    "__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__",
    "__WEBPACK_IMPORTED_MODULE_13__core_utils_Math__",
    "innerRadiusModifyer",
    "radarContainer",
    "beforeDraw",
    "rect",
    "innerRect",
    "wr",
    "hr",
    "mr",
    "maxRadius",
    "diameter",
    "definedBBox",
    "CategoryAxisBreak",
    "__WEBPACK_IMPORTED_MODULE_1__AxisBreak__",
    "DateAxisBreak",
    "__WEBPACK_IMPORTED_MODULE_1__ValueAxisBreak__",
    "startValue",
    "Cursor",
    "__WEBPACK_IMPORTED_MODULE_2__core_interaction_Interaction__",
    "__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__",
    "__WEBPACK_IMPORTED_MODULE_5__core_interaction_Mouse__",
    "__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__",
    "__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__",
    "_stick",
    "trackable",
    "clickable",
    "interaction",
    "body",
    "handleCursorDown",
    "handleCursorUp",
    "handleCursorMove",
    "isLocalElement",
    "pointer",
    "svg",
    "local",
    "_stickPoint",
    "triggerMove",
    "isHidden",
    "hideReal",
    "stick",
    "getPositions",
    "triggerDown",
    "setGlobalStyle",
    "grabbing",
    "triggerUp",
    "getHitOption",
    "interactions",
    "default",
    "cancelable",
    "preventDefault",
    "lockElement",
    "RadarSeriesDataItem",
    "RadarSeries",
    "__WEBPACK_IMPORTED_MODULE_1__LineSeries__",
    "connectEnds",
    "unshift",
    "RadarCursor",
    "truePixelRadius",
    "cursorTooltipEnabled",
    "updateLineX",
    "updateLineY",
    "fillStartAngle",
    "downAngle",
    "downRadius",
    "currentRadius",
    "_prevAngle",
    "downSin",
    "downCos",
    "__WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__",
    "upAngle",
    "upRadius",
    "__WEBPACK_IMPORTED_MODULE_1__XYCursor__",
    "AxisRendererRadial",
    "__WEBPACK_IMPORTED_MODULE_1__AxisRendererY__",
    "__WEBPACK_IMPORTED_MODULE_2__CategoryAxis__",
    "__WEBPACK_IMPORTED_MODULE_3__core_elements_WavedCircle__",
    "__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__",
    "__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__",
    "gridType",
    "axisAngle",
    "title",
    "gridLocation",
    "count_1",
    "cellEndLocation",
    "updateBaseGridElement",
    "invalidateAxisItems",
    "count_2",
    "updateBreakElement",
    "createBreakSprites",
    "updateTooltip",
    "tooltipOrientation",
    "bigNum",
    "axisFullLength",
    "ClockHand",
    "__WEBPACK_IMPORTED_MODULE_2__core_elements_Circle__",
    "__WEBPACK_IMPORTED_MODULE_3__core_elements_Trapezoid__",
    "__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__",
    "_axis",
    "pin",
    "startWidth",
    "endWidth",
    "hand",
    "leftSide",
    "rightSide",
    "x0",
    "x1",
    "_pin",
    "_hand",
    "showValue",
    "easing",
    "_value",
    "newAngle",
    "currentAngle",
    "rotationDirection",
    "animate",
    "property",
    "to",
    "updateValue",
    "PieChartDataItem",
    "PieChart",
    "__WEBPACK_IMPORTED_MODULE_1__PercentChart__",
    "__WEBPACK_IMPORTED_MODULE_3__series_PieSeries__",
    "__WEBPACK_IMPORTED_MODULE_5__core_utils_Iterator__",
    "minHeight",
    "minWidth",
    "updateRadius",
    "chartCont",
    "chartRadius",
    "chartPixelInnerRadius",
    "seriesRadius",
    "PercentChartDataItem",
    "PercentChart",
    "__WEBPACK_IMPORTED_MODULE_2__series_PercentSeries__",
    "__WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__",
    "feedLegend",
    "legend",
    "legendData_1",
    "legendSettings",
    "labelText",
    "itemLabelText",
    "valueText",
    "valueLabels",
    "itemValueText",
    "itemContainers",
    "propertyFields",
    "setLegend",
    "PercentSeriesDataItem",
    "isHover",
    "PieTick",
    "__WEBPACK_IMPORTED_MODULE_1__elements_Tick__",
    "__WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__",
    "_label",
    "_slice",
    "y0",
    "y1",
    "y2",
    "attr",
    "PieSeries3DDataItem",
    "PieSeries3D",
    "__WEBPACK_IMPORTED_MODULE_1__series_PieSeries__",
    "__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Slice3D__",
    "depthValue",
    "depth",
    "depthPercent",
    "ChordNode",
    "__WEBPACK_IMPORTED_MODULE_1__FlowDiagramNode__",
    "__WEBPACK_IMPORTED_MODULE_2__axes_AxisLabelCircular__",
    "__WEBPACK_IMPORTED_MODULE_4__core_elements_Slice__",
    "__WEBPACK_IMPORTED_MODULE_5__core_utils_InterfaceColorSet__",
    "__WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__",
    "__WEBPACK_IMPORTED_MODULE_9__elements_Bullet__",
    "updateRotation",
    "invalidateLinks",
    "sum",
    "total",
    "arc_1",
    "sliceStartAngle_1",
    "childAngle",
    "childRadius",
    "labelAngle",
    "adjustedTotal",
    "nextAngle",
    "_outgoingSorted",
    "link",
    "linksContainer",
    "nonRibbon",
    "percentWidth",
    "valueAngle",
    "toNode",
    "_incomingSorted",
    "fromNode",
    "mAngle",
    "trueStartAngle",
    "tx",
    "ty",
    "ChordLink",
    "__WEBPACK_IMPORTED_MODULE_1__FlowDiagramLink__",
    "__WEBPACK_IMPORTED_MODULE_3__core_elements_QuadraticCurve__",
    "__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__",
    "__WEBPACK_IMPORTED_MODULE_5__core_rendering_Path__",
    "middleLine",
    "isTemplate",
    "fromX",
    "fromY",
    "toX",
    "toY",
    "cp",
    "bulletsMask",
    "positionBullets",
    "mAngle1",
    "mAngle2",
    "cpx",
    "cpy",
    "TreeMapSeriesDataItem",
    "TreeMapSeries",
    "__WEBPACK_IMPORTED_MODULE_1__ColumnSeries__",
    "__WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__",
    "__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__",
    "__WEBPACK_IMPORTED_MODULE_6__core_elements_RoundedRectangle__",
    "__WEBPACK_IMPORTED_MODULE_7__core_utils_Object__",
    "treeMapDataItem",
    "_dataContext",
    "columns",
    "configField",
    "seriesDataItem",
    "showReal",
    "invalidateLayout",
    "appear",
    "removeChildren",
    "column",
    "AxisRendererX3D",
    "__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererX__",
    "dx3D",
    "dy3D",
    "getHeight",
    "handle3DChanged",
    "AxisRendererY3D",
    "__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererY__",
    "__WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__",
    "getWidth",
    "ColumnSeries3DDataItem",
    "ColumnSeries3D",
    "__WEBPACK_IMPORTED_MODULE_1__series_ColumnSeries__",
    "__WEBPACK_IMPORTED_MODULE_2__elements_Column3D__",
    "columnsContainer",
    "_columnsContainer",
    "createColumnTemplate",
    "column3D",
    "Column3D",
    "__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Rectangle3D__",
    "CandlestickSeriesDataItem",
    "CandlestickSeries",
    "__WEBPACK_IMPORTED_MODULE_3__elements_Candlestick__",
    "lowValueX",
    "lowValueY",
    "highValueX",
    "highValueY",
    "positiveColor",
    "negativeColor",
    "dropFromOpenState",
    "riseFromOpenState",
    "validateDataElementReal",
    "validateCandlestick",
    "lowLine_1",
    "highLine_1",
    "open_1",
    "close_1",
    "yOpen",
    "yClose",
    "yLow",
    "yLowField",
    "yHigh",
    "yHighField",
    "open_2",
    "close_2",
    "xOpen",
    "xClose",
    "xLow",
    "xLowField",
    "xHigh",
    "xHighField",
    "rangeColumn",
    "rangesColumns",
    "rangeLowLine",
    "rangehighLine",
    "_xLowField",
    "_yLowField",
    "_xHighField",
    "_yHighField",
    "cw",
    "ch",
    "OHLC",
    "__WEBPACK_IMPORTED_MODULE_1__Candlestick__",
    "openLine",
    "highLowLine",
    "closeLine",
    "RadarColumn",
    "radarColumn",
    "getTooltipX",
    "getTooltipY",
    "PyramidSeriesDataItem",
    "PyramidSeries",
    "__WEBPACK_IMPORTED_MODULE_1__FunnelSeries__",
    "__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__",
    "__WEBPACK_IMPORTED_MODULE_4__core_utils_Utils__",
    "topWidth",
    "bottomWidth",
    "pyramidHeight",
    "valueIs",
    "sliceLinks",
    "_nextWidth",
    "getNextValue",
    "nextValue",
    "validateDataElements",
    "slicesContainer",
    "relValue",
    "sliceLink",
    "_pyramidHeight",
    "_pyramidWidth",
    "labelsContainer",
    "ticksContainer",
    "decorateSlice",
    "pyramidWidth",
    "linkWidth",
    "linkHeight",
    "sliceTopWidth",
    "c",
    "tan",
    "sliceHeight",
    "sliceBottomWidth",
    "square",
    "sqrt",
    "_nextY",
    "sliceWidth",
    "ConeColumn",
    "__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Cone__",
    "coneColumn",
    "CurvedColumn",
    "__WEBPACK_IMPORTED_MODULE_5__core_rendering_Smoothing__",
    "curvedColumn",
    "realWidth",
    "realHeight",
    "realX",
    "realY",
    "tension",
    "__WEBPACK_IMPORTED_MODULE_0__es2015_charts__",
    "window",
    "am4charts",
    "__WEBPACK_IMPORTED_MODULE_0__internal_charts_types_GaugeChart__",
    "__WEBPACK_IMPORTED_MODULE_1__internal_charts_types_RadarChart__",
    "__WEBPACK_IMPORTED_MODULE_2__internal_charts_types_XYChart__",
    "__WEBPACK_IMPORTED_MODULE_3__internal_charts_types_SerialChart__",
    "__WEBPACK_IMPORTED_MODULE_4__internal_charts_types_PieChart3D__",
    "__WEBPACK_IMPORTED_MODULE_5__internal_charts_types_PieChart__",
    "__WEBPACK_IMPORTED_MODULE_6__internal_charts_types_SlicedChart__",
    "__WEBPACK_IMPORTED_MODULE_7__internal_charts_types_FlowDiagram__",
    "__WEBPACK_IMPORTED_MODULE_8__internal_charts_types_SankeyDiagram__",
    "__WEBPACK_IMPORTED_MODULE_9__internal_charts_types_ChordDiagram__",
    "__WEBPACK_IMPORTED_MODULE_10__internal_charts_types_TreeMap__",
    "__WEBPACK_IMPORTED_MODULE_11__internal_charts_types_XYChart3D__",
    "__WEBPACK_IMPORTED_MODULE_12__internal_charts_Chart__",
    "__WEBPACK_IMPORTED_MODULE_13__internal_charts_Legend__",
    "__WEBPACK_IMPORTED_MODULE_14__internal_charts_elements_HeatLegend__",
    "__WEBPACK_IMPORTED_MODULE_15__internal_charts_series_Series__",
    "__WEBPACK_IMPORTED_MODULE_16__internal_charts_series_XYSeries__",
    "__WEBPACK_IMPORTED_MODULE_17__internal_charts_series_LineSeries__",
    "__WEBPACK_IMPORTED_MODULE_18__internal_charts_series_LineSeriesSegment__",
    "__WEBPACK_IMPORTED_MODULE_19__internal_charts_series_CandlestickSeries__",
    "__WEBPACK_IMPORTED_MODULE_20__internal_charts_series_OHLCSeries__",
    "__WEBPACK_IMPORTED_MODULE_21__internal_charts_series_ColumnSeries__",
    "__WEBPACK_IMPORTED_MODULE_22__internal_charts_series_StepLineSeries__",
    "__WEBPACK_IMPORTED_MODULE_23__internal_charts_series_RadarSeries__",
    "__WEBPACK_IMPORTED_MODULE_24__internal_charts_series_RadarColumnSeries__",
    "__WEBPACK_IMPORTED_MODULE_25__internal_charts_series_PieSeries__",
    "__WEBPACK_IMPORTED_MODULE_26__internal_charts_series_FunnelSeries__",
    "__WEBPACK_IMPORTED_MODULE_27__internal_charts_series_PyramidSeries__",
    "__WEBPACK_IMPORTED_MODULE_28__internal_charts_series_PictorialStackedSeries__",
    "__WEBPACK_IMPORTED_MODULE_29__internal_charts_elements_PieTick__",
    "__WEBPACK_IMPORTED_MODULE_30__internal_charts_elements_FunnelSlice__",
    "__WEBPACK_IMPORTED_MODULE_31__internal_charts_series_PieSeries3D__",
    "__WEBPACK_IMPORTED_MODULE_32__internal_charts_series_TreeMapSeries__",
    "__WEBPACK_IMPORTED_MODULE_33__internal_charts_series_ColumnSeries3D__",
    "__WEBPACK_IMPORTED_MODULE_34__internal_charts_series_ConeSeries__",
    "__WEBPACK_IMPORTED_MODULE_35__internal_charts_series_CurvedColumnSeries__",
    "__WEBPACK_IMPORTED_MODULE_36__internal_charts_axes_Axis__",
    "__WEBPACK_IMPORTED_MODULE_37__internal_charts_axes_Grid__",
    "__WEBPACK_IMPORTED_MODULE_38__internal_charts_axes_AxisTick__",
    "__WEBPACK_IMPORTED_MODULE_39__internal_charts_axes_AxisLabel__",
    "__WEBPACK_IMPORTED_MODULE_40__internal_charts_axes_AxisLine__",
    "__WEBPACK_IMPORTED_MODULE_41__internal_charts_axes_AxisFill__",
    "__WEBPACK_IMPORTED_MODULE_42__internal_charts_axes_AxisRenderer__",
    "__WEBPACK_IMPORTED_MODULE_43__internal_charts_axes_AxisBreak__",
    "__WEBPACK_IMPORTED_MODULE_44__internal_charts_axes_ValueAxis__",
    "__WEBPACK_IMPORTED_MODULE_45__internal_charts_axes_CategoryAxis__",
    "__WEBPACK_IMPORTED_MODULE_46__internal_charts_axes_CategoryAxisBreak__",
    "__WEBPACK_IMPORTED_MODULE_47__internal_charts_axes_DateAxis__",
    "__WEBPACK_IMPORTED_MODULE_48__internal_charts_axes_DurationAxis__",
    "__WEBPACK_IMPORTED_MODULE_49__internal_charts_axes_DateAxisBreak__",
    "__WEBPACK_IMPORTED_MODULE_50__internal_charts_axes_ValueAxisBreak__",
    "__WEBPACK_IMPORTED_MODULE_51__internal_charts_axes_AxisRendererX__",
    "__WEBPACK_IMPORTED_MODULE_52__internal_charts_axes_AxisRendererY__",
    "__WEBPACK_IMPORTED_MODULE_53__internal_charts_axes_AxisRendererRadial__",
    "__WEBPACK_IMPORTED_MODULE_54__internal_charts_axes_AxisLabelCircular__",
    "__WEBPACK_IMPORTED_MODULE_55__internal_charts_axes_AxisRendererCircular__",
    "__WEBPACK_IMPORTED_MODULE_56__internal_charts_axes_AxisFillCircular__",
    "__WEBPACK_IMPORTED_MODULE_57__internal_charts_axes_GridCircular__",
    "__WEBPACK_IMPORTED_MODULE_58__internal_charts_axes_AxisRendererX3D__",
    "__WEBPACK_IMPORTED_MODULE_59__internal_charts_axes_AxisRendererY3D__",
    "__WEBPACK_IMPORTED_MODULE_60__internal_charts_elements_Tick__",
    "__WEBPACK_IMPORTED_MODULE_61__internal_charts_elements_Bullet__",
    "__WEBPACK_IMPORTED_MODULE_62__internal_charts_elements_LabelBullet__",
    "__WEBPACK_IMPORTED_MODULE_63__internal_charts_elements_CircleBullet__",
    "__WEBPACK_IMPORTED_MODULE_64__internal_charts_elements_XYChartScrollbar__",
    "__WEBPACK_IMPORTED_MODULE_65__internal_charts_elements_ClockHand__",
    "__WEBPACK_IMPORTED_MODULE_66__internal_charts_elements_FlowDiagramNode__",
    "__WEBPACK_IMPORTED_MODULE_67__internal_charts_elements_FlowDiagramLink__",
    "__WEBPACK_IMPORTED_MODULE_68__internal_charts_elements_SankeyNode__",
    "__WEBPACK_IMPORTED_MODULE_69__internal_charts_elements_SankeyLink__",
    "__WEBPACK_IMPORTED_MODULE_70__internal_charts_elements_ChordNode__",
    "__WEBPACK_IMPORTED_MODULE_71__internal_charts_elements_ChordLink__",
    "__WEBPACK_IMPORTED_MODULE_72__internal_charts_elements_NavigationBar__",
    "__WEBPACK_IMPORTED_MODULE_73__internal_charts_elements_Column__",
    "__WEBPACK_IMPORTED_MODULE_74__internal_charts_elements_Candlestick__",
    "__WEBPACK_IMPORTED_MODULE_75__internal_charts_elements_OHLC__",
    "__WEBPACK_IMPORTED_MODULE_76__internal_charts_elements_RadarColumn__",
    "__WEBPACK_IMPORTED_MODULE_77__internal_charts_elements_Column3D__",
    "__WEBPACK_IMPORTED_MODULE_78__internal_charts_elements_ConeColumn__",
    "__WEBPACK_IMPORTED_MODULE_79__internal_charts_elements_CurvedColumn__",
    "__WEBPACK_IMPORTED_MODULE_80__internal_charts_cursors_XYCursor__",
    "__WEBPACK_IMPORTED_MODULE_81__internal_charts_cursors_Cursor__",
    "__WEBPACK_IMPORTED_MODULE_82__internal_charts_cursors_RadarCursor__",
    "GaugeChartDataItem",
    "GaugeChart",
    "__WEBPACK_IMPORTED_MODULE_1__RadarChart__",
    "__WEBPACK_IMPORTED_MODULE_3__elements_ClockHand__",
    "hands",
    "processHand",
    "PieChart3DDataItem",
    "PieChart3D",
    "__WEBPACK_IMPORTED_MODULE_1__PieChart__",
    "__WEBPACK_IMPORTED_MODULE_2__series_PieSeries3D__",
    "invalidateDataUsers",
    "SlicedChartDataItem",
    "SlicedChart",
    "ChordDiagramDataItem",
    "ChordDiagram",
    "__WEBPACK_IMPORTED_MODULE_1__FlowDiagram__",
    "__WEBPACK_IMPORTED_MODULE_5__elements_ChordNode__",
    "__WEBPACK_IMPORTED_MODULE_6__elements_ChordLink__",
    "__WEBPACK_IMPORTED_MODULE_8__core_utils_Math__",
    "nodePadding",
    "chordContainer",
    "nodesContainer",
    "newTotal",
    "_sorted",
    "strNode",
    "node",
    "getNodeValue",
    "minNodeSize",
    "links",
    "createNode",
    "createLink",
    "QuadraticCurve",
    "__WEBPACK_IMPORTED_MODULE_1__Line__",
    "__WEBPACK_IMPORTED_MODULE_2__utils_Color__",
    "__WEBPACK_IMPORTED_MODULE_3__rendering_Path__",
    "__WEBPACK_IMPORTED_MODULE_4__utils_Math__",
    "__WEBPACK_IMPORTED_MODULE_5__utils_Type__",
    "p1",
    "p2",
    "point1",
    "point2",
    "TreeMapDataItem",
    "TreeMap",
    "__WEBPACK_IMPORTED_MODULE_4__axes_ValueAxis__",
    "__WEBPACK_IMPORTED_MODULE_5__series_TreeMapSeries__",
    "__WEBPACK_IMPORTED_MODULE_6__core_utils_ColorSet__",
    "__WEBPACK_IMPORTED_MODULE_7__core_interaction_Mouse__",
    "__WEBPACK_IMPORTED_MODULE_10__core_utils_Array__",
    "rows",
    "hasChildren",
    "level",
    "color",
    "layoutAlgorithm",
    "squarify",
    "zoomable",
    "maxLevels",
    "currentLevel",
    "sorting",
    "strictMinMax",
    "xRenderer",
    "axisFills",
    "yRenderer",
    "seriesTemplates",
    "zoomToChartDataItem",
    "_homeDataItem",
    "_navigationBar",
    "navigationBar",
    "createTreeSeries",
    "homeDataItem",
    "_homeText",
    "layoutItems",
    "toggleBullets",
    "_tempSeries",
    "navigationData",
    "parentDataItem",
    "initSeries",
    "createTreeSeriesReal",
    "dataUsers",
    "cursorOverStyle",
    "zoomToSeriesDataItem",
    "currentlyZoomed",
    "rangeChangeAnimation",
    "binaryTree",
    "dice",
    "sliceDice",
    "validateLayout",
    "validateRawData",
    "nodes",
    "n",
    "sums",
    "Array",
    "partition",
    "j",
    "valueOffset",
    "valueTarget",
    "k",
    "hi",
    "mid",
    "valueLeft",
    "valueRight",
    "xk",
    "yk",
    "nodeValue",
    "sumValue",
    "minValue",
    "maxValue",
    "newRatio",
    "minRatio",
    "alpha",
    "beta",
    "ratio",
    "i0",
    "i1",
    "row",
    "handleDataItemValueChange",
    "XYChart3DDataItem",
    "XYChart3D",
    "__WEBPACK_IMPORTED_MODULE_3__axes_AxisRendererX3D__",
    "__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererY3D__",
    "__WEBPACK_IMPORTED_MODULE_5__series_ColumnSeries3D__",
    "fixLayout",
    "fixColumns",
    "clustered",
    "depthIndex",
    "s",
    "i_1",
    "OHLCSeriesDataItem",
    "OHLCSeries",
    "__WEBPACK_IMPORTED_MODULE_1__CandlestickSeries__",
    "__WEBPACK_IMPORTED_MODULE_3__elements_OHLC__",
    "openLine_1",
    "highLowLine_1",
    "closeLine_1",
    "rangeOpenLine",
    "rangeCloseLine",
    "rangeHighLowLine",
    "StepLineSeriesDataItem",
    "StepLineSeries",
    "__WEBPACK_IMPORTED_MODULE_2__StepLineSeriesSegment__",
    "prevPoint",
    "point0",
    "vertical",
    "noRisers",
    "StepLineSeriesSegment",
    "__WEBPACK_IMPORTED_MODULE_1__LineSeriesSegment__",
    "previouosPoint",
    "RadarColumnSeriesDataItem",
    "RadarColumnSeries",
    "__WEBPACK_IMPORTED_MODULE_3__elements_RadarColumn__",
    "lAngle",
    "rAngle",
    "tRadius",
    "bRadius",
    "getStartLocation",
    "getEndLocation",
    "cellAngle",
    "offset",
    "temp",
    "addSprite",
    "setColumnStates",
    "disableUnusedColumns",
    "PictorialStackedSeriesDataItem",
    "PictorialStackedSeries",
    "__WEBPACK_IMPORTED_MODULE_1__PyramidSeries__",
    "resizeMask",
    "_maskSprite",
    "maskSprite",
    "pictureWidth",
    "pictureHeight",
    "newWidth",
    "newHeight",
    "hs",
    "expandDistance",
    "ConeSeriesDataItem",
    "ConeSeries",
    "__WEBPACK_IMPORTED_MODULE_2__elements_ConeColumn__",
    "CurvedColumnSeriesDataItem",
    "CurvedColumnSeries",
    "__WEBPACK_IMPORTED_MODULE_2__elements_CurvedColumn__",
    "DurationAxisDataItem",
    "DurationAxis",
    "_baseUnit",
    "durationFormatter",
    "axisDurationFormat",
    "strictMode",
    "minMaxStep",
    "baseUnit",
    "initialMin",
    "initialMax",
    "divisors",
    "realDivisor",
    "divisors_1",
    "divisors_1_1",
    "divisor",
    "exponent",
    "log",
    "LOG10E",
    "power",
    "pow",
    "reducedCount",
    "getValueUnit",
    "getFormat",
    "_tooltipDurationFormat",
    "_stepDecimalPlaces",
    "tooltipDurationFormat",
    "CircleBullet",
    "__WEBPACK_IMPORTED_MODULE_1__Bullet__",
    "circle",
    "XYChartScrollbar",
    "__WEBPACK_IMPORTED_MODULE_1__core_elements_Scrollbar__",
    "__WEBPACK_IMPORTED_MODULE_5__types_XYChart__",
    "__WEBPACK_IMPORTED_MODULE_8__core_rendering_filters_DesaturateFilter__",
    "__WEBPACK_IMPORTED_MODULE_11__core_rendering_Path__",
    "scrollbarChart",
    "margin",
    "_scrollbarChart",
    "unselectedOverlay",
    "_unselectedOverlay",
    "thumbBackground",
    "thumb",
    "hoverState",
    "downState",
    "handleSeriesRemoved",
    "sourceSeries",
    "addXAxis",
    "addYAxis",
    "rangeChangeDuration",
    "id",
    "transitionDuration",
    "zoomOutAxes",
    "updateByOrientation",
    "handleDataChanged",
    "updateThumb",
    "NavigationBarDataItem",
    "NavigationBar",
    "__WEBPACK_IMPORTED_MODULE_1__core_Component__",
    "__WEBPACK_IMPORTED_MODULE_2__core_DataItem__",
    "__WEBPACK_IMPORTED_MODULE_4__core_elements_TextLink__",
    "__WEBPACK_IMPORTED_MODULE_5__core_elements_Triangle__",
    "textLink",
    "paddingTop",
    "paddingBottom",
    "_linksIterator",
    "triangle",
    "direction",
    "marginLeft",
    "separators",
    "activeLink",
    "fontWeight",
    "getLast",
    "separator",
    "ColumnSeriesDataItem",
    "ColumnSeries",
    "__WEBPACK_IMPORTED_MODULE_5__core_utils_Dictionary__",
    "__WEBPACK_IMPORTED_MODULE_7__axes_CategoryAxis__",
    "__WEBPACK_IMPORTED_MODULE_9__elements_Column__",
    "__WEBPACK_IMPORTED_MODULE_10__core_elements_RoundedRectangle__",
    "__WEBPACK_IMPORTED_MODULE_11__core_utils_Percent__",
    "__WEBPACK_IMPORTED_MODULE_14__core_utils_Iterator__",
    "__WEBPACK_IMPORTED_MODULE_15__core_utils_Array__",
    "__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__",
    "__WEBPACK_IMPORTED_MODULE_17__core_utils_Disposer__",
    "_column",
    "setColumn",
    "_rangesColumns",
    "_startLocation",
    "_endLocation",
    "simplifiedProcessing",
    "tooltipColorSource",
    "baseAxisSeries",
    "clusterCount",
    "cellStartLocation",
    "l",
    "r",
    "t",
    "percentHeight",
    "fixHorizontalCoordinate",
    "fixVerticalCoordinate",
    "bottomLocation",
    "topLocation",
    "rightLocation",
    "leftLocation",
    "virtualParent",
    "itemWidth",
    "itemHeight",
    "change",
    "droppedFromOpen",
    "_dropFromOpenState",
    "_riseFromOpenState",
    "droppedFromPrevious",
    "isInTransition",
    "itemsFocusable",
    "role",
    "focusable",
    "itemReaderText",
    "ev",
    "populateString",
    "_columns",
    "_dropFromPreviousState",
    "_riseFromPreviousState",
    "legendDataItem",
    "fromOpenState_1",
    "fromPreviousState_1",
    "Column",
    "__WEBPACK_IMPORTED_MODULE_2__core_elements_RoundedRectangle__"
  ],
  "mappings": "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",
  "file": "charts.js",
  "sourcesContent": [
    "/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, MultiDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\tmouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IXYChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChartProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartEvents}\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t *\r\n\t * @type {XYCursor}\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererX}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererY}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t *\r\n\t * @type {AxisRendererX}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t *\r\n\t * @type {AxisRendererY}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\t// Create transparend background for plot container so that hover works\r\n\t\t// on all of it\r\n\t\tplotCont.background.fillOpacity = 0;\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\t// must go below plot container\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t// commented, because series does this.\r\n\t\t\t//$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\t//axis.dataChangeUpdate();\r\n\t\t\t//});\r\n\r\n\t\t\t//$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\t//axis.dataChangeUpdate();\r\n\t\t\t//});\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]}  event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererX();\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleXAxisRangeChange, this);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes events from the Axis when it is removed from the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"removed\"]}  event  Event\r\n\t */\r\n\tpublic processXAxisRemoval(event: IListEvents<Axis>[\"removed\"]): void {\r\n\t\tlet axis: Axis = event.oldValue;\r\n\t\taxis.events.off(\"datarangechanged\", this.handleXAxisRangeChange, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]} event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererY();\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleYAxisRangeChange, this);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes events from the Axis when it is removed from the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"removed\"]}  event  Event\r\n\t */\r\n\tpublic processYAxisRemoval(event: IListEvents<Axis>[\"removed\"]): void {\r\n\t\tlet axis: Axis = event.oldValue;\r\n\t\taxis.events.off(\"datarangechanged\", this.handleYAxisRangeChange, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tprotected toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param {Scrollbar}  scrollbar  Scrollbar instance\r\n\t * @param {IRange}     range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {List<Axis>}  axes  A list of axes\r\n\t * @return {IRange}            Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tlet axisStart = axis.start;\r\n\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\tstart = axisStart;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\tend = axisEnd;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", (event) => {\r\n\t\t\taxis.invalidateDataItems();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.processXAxisRemoval, this);\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.processYAxisRemoval, this);\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]}  event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\t\t\tseries.xAxis; // this is enough to get axis, handled in getter\r\n\t\t\tseries.yAxis; // this is enough to get axis, handled in getter\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (series.stroke == undefined) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param {XYCursor}  cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYCursor} Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n\t *\r\n\t * @return {this} New cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new XYCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tif (this.cursor.visible && !this.cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showAxisTooltip(this.xAxes, xPosition);\r\n\t\t\tthis.showAxisTooltip(this.yAxes, yPosition);\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Sprite>}  sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Sprite>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tsprite.tooltip.hide(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint}  position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position: IPoint): void {\r\n\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (series.tooltipText || series.tooltipHTML) {\r\n\t\t\t\tseries.tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight });\r\n\t\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\t\tseriesPoints.push({ point: point, series: series });\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.tooltip.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tseriesPoints.sort((a, b) => {\r\n\t\t\tif (a.point.y > b.point.y) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (seriesPoints.length > 0) {\r\n\r\n\t\t\tlet top = topLeft.y;\r\n\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\tlet topSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\tlet botSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\t\tfor (let i = 0, len = seriesPoints.length; i < len; i++) {\r\n\t\t\t\tif (seriesPoints[i].point.y < top + (bottom - top) / 2) {\r\n\t\t\t\t\ttopSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbotSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet nextY = top;\r\n\r\n\t\t\t//@todo: solve overlapping when tooltips are close to center\r\n\t\t\tfor (let i = 0, len = topSeriesPoints.length; i < len; i++) {\r\n\t\t\t\tlet series = topSeriesPoints[i].series;\r\n\t\t\t\tlet pointY = topSeriesPoints[i].point.y;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t}\r\n\r\n\t\t\tlet nextHeight = bottom;\r\n\t\t\tfor (let i = botSeriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet series = botSeriesPoints[i].series;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\tlet pointY = botSeriesPoints[i].point.y;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: nextHeight });\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Axis>}  axes      List of axes to show tooltip on\r\n\t * @param {number}      position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param  {Axis}    axis   Axis\r\n\t * @param  {IRange}  range  Range\r\n\t * @return {IRange}         Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis, range: IRange): IRange {\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\trange = $math.invertRange(range);\r\n\t\t}\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.xAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.yAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param  {List<Axis>}  axes       List of axes to zoom\r\n\t * @param  {IRange}      range      Range of values to zoom to (0-1)\r\n\t * @param  {boolean}     instantly  If set to `true` will skip zooming animation\r\n\t * @return {IRange}                 Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis>, range: IRange, instantly?: boolean, round?: boolean): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\trange = $math.invertRange(range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (round) {\r\n\t\t\t\t\tlet diff = range.end - range.start;\r\n\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\t\t\t\t\trange.end = range.start + diff;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly);\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trealRange = axisRange;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param {boolean} value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"wheel\"]}  event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\t\tlet shift = event.shift.y;\r\n\r\n\t\tlet rangeX: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tlet rangeY: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tlet shiftStep = 0.05;\r\n\r\n\t\tlet maxPanOut = 0;\r\n\r\n\t\tlet mouseWheelBehavior = this.mouseWheelBehavior;\r\n\r\n\t\tif (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n\r\n\t\t\tlet differenceX = rangeX.end - rangeX.start;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartX <= 0) {\r\n\t\t\t\tnewEndX = newStartX + differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndX >= 1) {\r\n\t\t\t\tnewStartX = newEndX - differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n\t\t\tshift *= -1;\r\n\t\t\tlet differenceY = rangeY.end - rangeY.start;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartY <= 0) {\r\n\t\t\t\tnewEndY = newStartY + differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndY >= 1) {\r\n\t\t\t\tnewStartY = newEndY - differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationX = plotPoint.x / plotContainer.maxWidth;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * shift / 100 * locationX);\r\n\t\t\tnewStartX = Math.min(newStartX, locationX);\r\n\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n\t\t\tnewEndX = Math.max(newEndX, locationX);\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationY = plotPoint.y / plotContainer.maxHeight;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * shift / 100 * (1 - locationY));\r\n\t\t\tnewStartY = Math.min(newStartY, locationY);\r\n\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY, 1 + maxPanOut);\r\n\t\t\tnewEndY = Math.max(newEndY, locationY);\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * @default \"none\"\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\"  | \"panXY\" | \"none\"} mouse wheel behavior\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\"  | \"panXY\" | \"none\"}  Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-speicifc data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  fields  Array of date fields\r\n\t * @return {string[]}          Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  value  Array of number fields\r\n\t * @return {string[]}         Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = yAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = xAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}  a  Element 1\r\n\t * @param  {string}  b  Element 2\r\n\t * @return {Ordering}   Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return {this} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param {Button}  button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Button} Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param {XYChart} source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.xAxes.copyFrom(source.xAxes);\r\n\t\tthis.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tthis.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\t\t//@todo copy all container properties\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart.ts",
    "/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {CategoryAxis}\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties[\"endCategory\"];\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {CategoryAxisDataFIelds}\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICategoryAxisProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICategoryAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisEvents}\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {CategoryAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @type {CategoryAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t *\r\n\t * @type {SerialChart}\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t *\r\n\t * @type {Dictionary}\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * last data item is used for the closing grid\r\n\t */\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\t\tthis._disposers.push(this._lastDataItem);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CategoryAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {CategoryAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / this.renderer.minGridDistance;\r\n\t\tlet frequency: number = Math.min(this.dataItems.length, Math.ceil((endIndex - startIndex) / maxCount));\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.start = this.start;\r\n\t\t\t\tseries.end = this.end;\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this.axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif(this.axisLength <= 0){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif (this.dataItems.length <= 0) {\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tlet startIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tlet endIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\r\n\t\tfor (let i = 0; i < startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tif (i < this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (i / this._frequency == Math.round(i / this._frequency)) {\r\n\t\t\t\t\tlet axisBreak: CategoryAxisBreak = <CategoryAxisBreak>this.isInBreak(i);\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//previously we disabled all before, but this is better for cpu\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex); // helps to solve shrinking\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t// TODO use iterator instead\r\n\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {CategoryAxisDataItem}  dataItem   [description]\r\n\t * @param {number}                itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.axisFill.location);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.axisFill.location);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label) {\r\n\t\t\t// theorethically this might result problems if category text changes, the range text won't change. But otherwise range.label.text = \"custom text\" wont' work, which is not intuitive.\r\n\t\t\tif(!dataItem.isRange || label.text == undefined){\r\n\t\t\t\tdataItem.text = dataItem.text;\r\n\t\t\t}\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill) {\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CategoryAxisDataItem}  dataItem     Data item\r\n\t * @param {Object}                dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\t// creat a collection for fast access\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t// check if such category already exists\r\n\t\tlet existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\tif (existingDataItem != dataItem) {\r\n\t\t\tthis.dataItems.remove(existingDataItem);\r\n\t\t}\r\n\r\n\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {number}                     index     Index\r\n\t * @param  {AxisItemLocation | number}  location  Location (0-1)\r\n\t * @return {number}                               Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tdifference -= startLocation;\r\n\t\tdifference -= (1 - endLocation);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif (index < startIndex) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t// value to the right of break end\r\n\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// value to the left of break start\r\n\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn $math.round((index + location - startLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param  {string}  category  Category\r\n\t * @return {number}            Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.index;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param {string}  startCategory  Start category\r\n\t * @param {string}  endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {string}           start         [description]\r\n\t * @param  {string}           end           [description]\r\n\t * @param  {AxisItemLocation} startLocation [description]\r\n\t * @param  {AxisItemLocation} endLocation   [description]\r\n\t * @return {string}                         [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param  {number}            position  Source position (px)\r\n\t * @param  {AxisItemLocation}  location  Location within category (0-1)\r\n\t * @return {number}                      Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Target series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Series data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\treturn <XYSeriesDataItem>series.dataItems.getIndex(this.positionToIndex(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Category\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack key (?)\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex;\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\tlet index: number = null;\r\n\r\n\t\t// in case we have some axis breaks\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t// position to the right of break end\r\n\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t}\r\n\t\t\t// position to the left of break start\r\n\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t}\r\n\t\t\t// value within break\r\n\t\t\telse {\r\n\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= endIndex) {\r\n\t\t\tindex--;\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) { // @martynas todo: added this check, but this means that some aria label might not be received?\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxis.ts",
    "/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisLabelCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisLabelCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisLabelCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisLabelCircularEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positione along the circle.\r\n\t *\r\n\t * @param {number} value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels.\r\n\t *\r\n\t * @param {number} value Distance (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\t// No percent here, as it would be quite complicated to calculate radius\r\n\t\t// of a chart together with axis label radius\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Distance (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {IPoint}  point       Label affixation point\r\n\t * @param  {number}  axisRadius  Distance from point (px)\r\n\t * @return {IPoint}              [description]\r\n\t */\r\n\tpublic fixPoint(point: IPoint, axisRadius: number): IPoint {\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t// @todo with this math doesn't work well with inside = true\r\n\t\tthis.dy = -this._measuredHeight * (1 - (point.y + axisRadius) / (2 * axisRadius));\r\n\t\t// simmilar with dx\r\n\t\tthis.dx = -this._measuredWidth * (1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\tlet labelRadius: number = this.radius * sign;\r\n\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tlet pixelWidth = this.bbox.width;\r\n\t\t\tlet pixelHeight = this.bbox.height;\r\n\r\n\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\trelativeRotation = 90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t\tif (relativeRotation == 90) {\r\n\t\t\t\t\trelativeRotation = -90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\tpoint.y += $math.sin(angle) * labelRadius;\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisLabelCircular.ts",
    "/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setProperty(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setProperty(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n *\r\n * @type {Object}\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tstacked?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IXYSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYSeriesEvents}\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _xValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _yValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\r\n\t/**\r\n\t * dataitem of previously shown tooltip, used to avoid multiple tooltipshownat dispatches\r\n\t * @ignore\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.setElement(this.paper.add(\"path\"));\r\n\r\n\t\tthis.stacked = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t})\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate(){\r\n\t\tthis._tmin.clear();\r\n\t\tthis._tmax.clear();\r\n\r\n\t\tthis._smin.clear();\r\n\t\tthis._smax.clear();\t\t\r\n\r\n\t\tthis.appeared = false;\r\n\r\n\t\tif(this.xAxis){\r\n\t\t\tthis.xAxis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tif(this.yAxis){\r\n\t\t\tthis.yAxis.dataChangeUpdate();\t\t\t\r\n\t\t}\t\t\r\n\t}\t\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.defineFields();\r\n\r\n\t\tif(this.data.length > 0){\r\n\t\t\tthis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {XYSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}            dataContext  Raw data\r\n\t * @param {number}            index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\r\n\t\t\tdataItem.events.disable();\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\r\n\t\t\tdataItem.events.enable();\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tif(this.xAxis){\r\n\t\t\tlet dataItemsX = this.dataItemsByAxis.getKey(this.xAxis.uid);\r\n\t\t\tif(dataItemsX){\r\n\t\t\t\tdataItemsX.clear();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(this.yAxis){\r\n\t\t\tlet dataItemsY = this.dataItemsByAxis.getKey(this.yAxis.uid);\r\n\t\t\tif(dataItemsY){\r\n\t\t\t\tdataItemsY.clear();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\tlet xField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(xAxisFieldName + \"X\");\r\n\t\tlet xOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\tlet yField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(yAxisFieldName + \"Y\");\r\n\t\tlet yOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\tthis._xField = xField;\r\n\t\tthis._yField = yField;\r\n\r\n\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\tthis._xOpenField = xOpenField;\r\n\t\t}\r\n\r\n\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\tthis._yOpenField = yOpenField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[xOpenField] && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tif (!this._yOpenField) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._xValueFields = [];\r\n\t\tthis._yValueFields = [];\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {Axis}        axis    Axis\r\n\t * @param {Array<Key>}  fields  Fields (?)\r\n\t * @param {Key}         field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}           field  Field\r\n\t * @param {CategoryAxis}  axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}       field  Field\r\n\t * @param {DateAxis}  axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\theight: this.yAxis.axisLength\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param  {Axis}    axis  Axis\r\n\t * @return {string}        Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tthis.xAxis.updateAxisBySeries();\r\n\t\tthis.yAxis.updateAxisBySeries();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.xAxis.postProcessSeriesDataItems();\r\n\t\tthis.yAxis.postProcessSeriesDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tif (this.xAxis.dataRangeInvalid) {\r\n\t\t\tthis.xAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.dataRangeInvalid) {\r\n\t\t\tthis.yAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.xAxis.invalid) {\r\n\t\t\tthis.xAxis.validate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.invalid) {\r\n\t\t\tthis.yAxis.validate();\r\n\t\t}\r\n\r\n\t\tthis._showBullets = true;\r\n\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\tthis._showBullets = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (!this._xAxis.get()) {\r\n\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\tif (!axis) {\r\n\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.xAxis = axis;\r\n\t\t}\r\n\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (!this._yAxis.get()) {\r\n\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\tif (!axis) {\r\n\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.yAxis = axis;\r\n\t\t}\r\n\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param {Axis}  value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tthis._baseAxis = value;\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tif (!this._baseAxis) {\r\n\t\t\tif (this.yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {OrderedListTemplate<this[\"_dataItem\"]>}  dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\r\n\t\t// todo: if this is stacked, ensure that series to which this one can be stacked are processed before.\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\t\t}\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\tthis.xAxis.processSeriesDataItems();\r\n\t\tthis.yAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = this.xAxis.uid;\r\n\t\tlet yAxisId: string = this.yAxis.uid;\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\t\t\tif (this.appeared) {\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  xPosition  X\r\n\t * @param {number}  yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition));\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition));\r\n\t\t\t}\r\n\r\n\t\t\tthis.returnBulletDefaultState(dataItem);\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tif($type.hasValue((<any>dataItem)[tooltipXField]) && $type.hasValue((<any>dataItem)[tooltipYField])){\r\n\r\n\t\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);\r\n\r\n\t\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tfor (let a of dataItem.bullets) {\r\n\t\t\t\t\t\t\t\tlet bullet = a[1]\r\n\t\t\t\t\t\t\t\tbullet.setState(\"hover\");\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\t/**\r\n\t * returns default state to bullets when tooltip is shown at some other data item or hidden\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let a of this._prevTooltipDataItem.bullets) {\r\n\t\t\t\tlet bullet = a[1];\r\n\t\t\t\tbullet.setState(\"default\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationX(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet x: number = point.x;\r\n\t\t\t\tlet y: number = point.y;\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n\t\t\t\t\tlet openX: number = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\t\tx = x - (x - openX) * bullet.locationX;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n\t\t\t\t\tlet openY: number = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\t\ty = y - (y - openY) * bullet.locationY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.moveTo({ x: x, y: y });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tthis.setPropertyValue(\"stacked\", stacked, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of reveal animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tanimation = dataItem.show(interpolationDuration, delay, fields);\r\n\t\t});\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of hiding animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\t\t\tif (animation && !animation.isDisposed() && interpolationDuration == 0 && animation.duration > 0) {\r\n\t\t\t\tanimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\t\t//}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?:this[\"_dataItem\"]): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(dataItem);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?: boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\r\n\t\tif (!this.stacked) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\t//this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == this.xAxis && prevSeries.yAxis == this.yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue: number;\r\n\t\t\t\t\t\tif (working) {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevValue >= 0) || (value < 0 && prevValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.min(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.max(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthrow Error(\"`dataFields` is not set for series [\" + this.name + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem   [description]\r\n\t * @param {string}          xKey       [description]\r\n\t * @param {string}          yKey       [description]\r\n\t * @param {number}          locationX  [description]\r\n\t * @param {number}          locationY  [description]\r\n\t * @param {string}          stackKeyX  [description]\r\n\t * @param {string}          stackKeyY  [description]\r\n\t */\r\n\tprotected getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\tx = $math.fitToRange(x, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty = $math.fitToRange(y, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\treturn { x: x, y: y };\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/XYSeries.ts",
    "/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {DateAxis}\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param {Date} date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\tskipEmptyPeriods?: boolean;\r\n\tmarkUnitChange?: boolean;\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttooltipDateFormat?: string;\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {IDateAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDateAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDateAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisEvents}\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {DateAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @type {DateAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\t/**\r\n\t * A list of date/time intervals for Date axis.\r\n\t *\r\n\t * This define various granularities available for the axis. For example\r\n\t * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n\t * the axis will choose the granularity of 10 minutes, displaying a label\r\n\t * every 10 minutes.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *  { timeUnit: \"millisecond\", count: 1 },\r\n\t *  { timeUnit: \"millisecond\", count: 5 },\r\n\t *  { timeUnit: \"millisecond\", count: 10 },\r\n\t *  { timeUnit: \"millisecond\", count: 50 },\r\n\t *  { timeUnit: \"millisecond\", count: 100 },\r\n\t *  { timeUnit: \"millisecond\", count: 500 },\r\n\t *  { timeUnit: \"second\", count: 1 },\r\n\t *  { timeUnit: \"second\", count: 5 },\r\n\t *  { timeUnit: \"second\", count: 10 },\r\n\t *  { timeUnit: \"second\", count: 30 },\r\n\t *  { timeUnit: \"minute\", count: 1 },\r\n\t *  { timeUnit: \"minute\", count: 5 },\r\n\t *  { timeUnit: \"minute\", count: 10 },\r\n\t *  { timeUnit: \"minute\", count: 30 },\r\n\t *  { timeUnit: \"hour\", count: 1 },\r\n\t *  { timeUnit: \"hour\", count: 3 },\r\n\t *  { timeUnit: \"hour\", count: 6 },\r\n\t *  { timeUnit: \"hour\", count: 12 },\r\n\t *  { timeUnit: \"day\", count: 1 },\r\n\t *  { timeUnit: \"day\", count: 2 },\r\n\t *  { timeUnit: \"day\", count: 3 },\r\n\t *  { timeUnit: \"day\", count: 4 },\r\n\t *  { timeUnit: \"day\", count: 5 },\r\n\t *  { timeUnit: \"week\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 2 },\r\n\t *  { timeUnit: \"month\", count: 3 },\r\n\t *  { timeUnit: \"month\", count: 6 },\r\n\t *  { timeUnit: \"year\", count: 1 },\r\n\t *  { timeUnit: \"year\", count: 2 },\r\n\t *  { timeUnit: \"year\", count: 5 },\r\n\t *  { timeUnit: \"year\", count: 10 },\r\n\t *  { timeUnit: \"year\", count: 50 },\r\n\t *  { timeUnit: \"year\", count: 100 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @type {List<ITimeInterval>}\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the approperiate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t *\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Date}\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TimeUnit}\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t * @type {number}\r\n\t */\r\n\tprotected _prevSeriesTime: number;\r\n\r\n\t/**\r\n\t * [_minSeriesDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minSeriesDifference: number = Number.MAX_VALUE;\r\n\r\n\t/**\r\n\t * A function which applies fills to axis cells.\r\n\t *\r\n\t * Default function fills every second fill. You can set this to a function\r\n\t * that follows some other logic.\r\n\t *\r\n\t * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n\t * property accordingly.\r\n\t *\r\n\t * @type {function}\r\n\t */\r\n\tpublic fillRule: (dataItem: DateAxisDataItem) => any = function(dataItem: DateAxisDataItem) {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"markUnitChange\", true);\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {DateAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {DateAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet periodCount: number = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / this.baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\r\n\t\tthis._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit);\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tlet count: number = Math.ceil(this._difference / this._intervalDuration);\r\n\t\tcount = Math.floor(this.start * count) - 3; // some extra is needed\r\n\r\n\t\t$time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\t// TODO use $type.castNumber ?\r\n\t\t\t\tlet startIndex: number = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet endIndex: number = series.dataItems.findClosestIndex(this._maxZoomed - 1, (x) => <number>x[field], \"left\") + 1;\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\t\tsuper.dataChangeUpdate();\r\n\t\tthis._minSeriesDifference = Number.MAX_VALUE;\r\n\r\n\t\t// use day duration if only one item. as this method is called before data is processed, we check data.length and not dataItems.length\r\n\t\tlet hasMoreThanOne = false;\r\n\r\n\t\tif (this.chart.data.length > 1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.data.length > 1) {\r\n\t\t\t\t\thasMoreThanOne = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (!hasMoreThanOne) {\r\n\t\t\tthis._minSeriesDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem} dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet baseInterval: ITimeInterval = this.baseInterval;\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet startDate: Date = $time.round($time.copy(date), baseInterval.timeUnit, baseInterval.count);\r\n\t\t\tlet endDate: Date = $time.add($time.copy(startDate), baseInterval.timeUnit, baseInterval.count);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startDate.getTime(), \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tlet series: XYSeries = dataItem.component;\r\n\t\t\tseries.dataItemsByAxis.getKey(this.uid).setKey(startDate.getTime().toString(), dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tthis.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakGridCount: number = this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start);\r\n\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\taxisBreak.gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {Date}    date           [description]\r\n\t * @param  {number}  intervalCount  [description]\r\n\t * @return {Date}                   [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\tnewDate = this.getBreaklessDate(axisBreak, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + 1);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {DateAxisBreak}  axisBreak  [description]\r\n\t * @param  {TimeUnit}       timeUnit   [description]\r\n\t * @param  {number}         count      [description]\r\n\t * @return {Date}                      [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count);\r\n\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate(new Date(prevGridDate), intervalCount);\r\n\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance) {\r\n\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count).getTime();\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\t\t\t\t\tlet format: string = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet text: string = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {DateAxisDataItem} dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//super.validateDataElement(dataItem);\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, endPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label) {\r\n\t\t\t\tlet location = label.location;\r\n\r\n\t\t\t\tif (location == 0) {\r\n\t\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\t\tlocation = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlocation = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition, location);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return {number} Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param  {number}       min  Min timestamp\r\n\t * @param  {number}       max  Max timestamp\r\n\t * @return {IMinMaxStep}       Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\treturn value + this.baseDuration * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\treturn value + this.baseDuration * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param  {number}         index      [description]\r\n\t * @param  {number}         duration   [description]\r\n\t * @param  {number}         gridCount  [description]\r\n\t * @return {ITimeInterval}             [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number): ITimeInterval {\r\n\t\tlet gridIntervals: List<ITimeInterval> = this.gridIntervals;\r\n\r\n\t\tlet gridInterval: ITimeInterval = gridIntervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = gridIntervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...gridIntervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index - 1) };\r\n\t\t}\r\n\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < gridIntervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.dateFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param  {Date}    date  Date\r\n\t * @return {number}        Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param  {Date | number}  date  Date or a timestamp\r\n\t * @return {number}               Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param  {Date}  date Date\r\n\t * @return {IOrientationPoint} IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {Date}              Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack ID\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(this.valueToPosition(value + stack));\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {XYSeriesDataItem}  dataItem  [description]\r\n\t * @param  {string}            key       [description]\r\n\t * @param  {number}            location  [description]\r\n\t * @return {number}                      [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\t\tif (!$type.hasValue(key)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\r\n\t\tlet series = dataItem.component;\r\n\t\tlet time: number;\r\n\r\n\t\tlet date: Date = (<any>dataItem)[\"date\" + axisLetter];\r\n\t\tif (date) {\r\n\t\t\ttime = date.getTime();\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet openDate: Date = (<any>dataItem)[\"openDate\" + axisLetter];\r\n\t\tlet prevSeriesTime: number = this._prevSeriesTime;\r\n\r\n\r\n\t\tlet openTime: number;\r\n\t\tif (openDate) {\r\n\t\t\topenTime = openDate.getTime();\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(openTime)) {\r\n\t\t\tlet difference = Math.abs(time - openTime);\r\n\t\t\tif (this._minSeriesDifference > difference) {\r\n\t\t\t\tthis._minSeriesDifference = difference;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet differece: number = time - prevSeriesTime;\r\n\t\tif (differece > 0) {\r\n\t\t\tif (this._minSeriesDifference > differece) {\r\n\t\t\t\tthis._minSeriesDifference = differece;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._prevSeriesTime = time;\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this._minSeriesDifference, 1);\r\n\t\t// handle short months\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t}\r\n\t\t// handle daylight saving\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t}\r\n\r\n\t\tbaseInterval.count = 1; // good\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * @param {ITimeInterval} timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tthis._baseInterval = timeInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ITimeInterval} Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t *\r\n\t * @param {boolean}  value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param {string}  value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string) {\r\n\t\tthis.setPropertyValue(\"tooltipDateFormat\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string {\r\n\t\treturn this.getPropertyValue(\"tooltipDateFormat\");\r\n\t}\r\n\r\n\t/**\r\n\t * Use `changeDateFormats` to apply different formats to the first label in\r\n\t * bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"markUnitChange\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this.getPropertyValue(\"markUnitChange\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position\r\n\t * @return {string}            Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this.dateFormatter.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif (dateFormat) {\r\n\t\t\t\ttext = this.dateFormatter.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"getTooltipText\", text);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}            position Source position\r\n\t * @param  {AxisItemLocation}  location  Location in the cell\r\n\t * @return {number}            Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\t\t$time.round(date, timeUnit, count);\r\n\r\n\t\tif (location > 0) {\r\n\t\t\t$time.add(date, timeUnit, location);\r\n\t\t}\r\n\r\n\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\twhile (date.getTime() < this.max) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\t\t\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tlet dataItem = series.dataItemsByAxis.getKey(this.uid).getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\tif (!dataItem) {\r\n\t\t\t// to the left\r\n\t\t\tlet leftCount = 0;\r\n\t\t\tlet leftDataItem: XYSeriesDataItem;\r\n\t\t\tlet leftDate = new Date(date.getTime());\r\n\r\n\t\t\twhile (leftDate.getTime() > this.minZoomed) {\r\n\t\t\t\tleftDate = $time.add(leftDate, this.baseInterval.timeUnit, -this.baseInterval.count);\r\n\t\t\t\tleftDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(leftDate.getTime().toString());\r\n\t\t\t\tif (leftDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tleftCount++;\r\n\t\t\t\tif (leftCount > 5000) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet rightCount = 0;\r\n\t\t\tlet rightDataItem: XYSeriesDataItem;\r\n\t\t\tlet rightDate = new Date(date.getTime());\r\n\t\t\twhile (rightDate.getTime() < this.maxZoomed) {\r\n\t\t\t\trightDate = $time.add(rightDate, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\t\trightDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(rightDate.getTime().toString());\r\n\t\t\t\tif (rightDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\trightCount++;\r\n\t\t\t\tif (rightCount > 5000) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (leftDataItem && !rightDataItem) {\r\n\t\t\t\treturn leftDataItem;\r\n\t\t\t}\r\n\t\t\telse if (!leftDataItem && rightDataItem) {\r\n\t\t\t\treturn rightDataItem;\r\n\t\t\t}\r\n\t\t\telse if (leftDataItem && rightDataItem) {\r\n\t\t\t\tif (leftCount < rightCount) {\r\n\t\t\t\t\treturn leftDataItem;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn rightDataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t * @todo Better format recognition\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return {string}  Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = 0;\r\n\t\t\trenderer.grid.template.location = 0;\r\n\t\t\trenderer.labels.template.location = 0;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param {Date}     startDate       Start date\r\n\t * @param {Date}     endValue        End date\r\n\t * @param {boolean}  skipRangeEvent  Do not invoke events\r\n\t * @param {boolean}  instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tstartDate = this.dateFormatter.parse(startDate);\r\n\t\tendDate = this.dateFormatter.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `baseInterval` to \"as is\" fields.\r\n\t *\r\n\t * @param  {string}   field  Field name\r\n\t * @return {boolean}         Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"baseInterval\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param {this} source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.dateFormats = source.dateFormats;\r\n\t\tthis.periodChangeDateFormats = source.periodChangeDateFormats;\r\n\t\tif(source[\"_baseInterval\"]){\r\n\t\t\tthis.baseInterval = source.baseInterval;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxis.ts",
    "/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYCursorProperties}\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t *\r\n\t * @type {IXYCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYCursorEvents}\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (this.behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.path = $path.rectangle(w, h);\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param {IPoint}   point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tsuper.triggerMoveReal(point);\r\n\r\n\t\tthis.updateLinePositions(point);\r\n\r\n\t\tif (this.downPoint) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.path = \"\";\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\t\tif (this.downPoint) {\r\n\t\t\tthis.upPoint = point;\r\n\r\n\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\tthis.getRanges();\r\n\r\n\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\r\n\t\t\tsuper.triggerUpReal(point);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = -startY + currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.selection;\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} Bheavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param {number} value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param {Sprite} lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param {Sprite} lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param {Sprite} selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/XYCursor.ts",
    "/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment, ILineSeriesSegmentProperties } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {LineSeries}\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ILineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ILineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ILineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesEvents}\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {LineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t *\r\n\t * @type {ListTemplate<this[\"_segment\"]>}\r\n\t */\r\n\tpublic segments: ListTemplate<this[\"_segment\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t * @type {number}\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t *\r\n\t * @type {ListIterator<LineSeriesSegment>}\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<this[\"_segment\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(this.createSegment());\r\n\t\tthis.segments.template.applyOnClones = true;\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.segments));\r\n\t\tthis._disposers.push(this.segments.template);\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new LineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {LineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\t// this makes data items animate when added\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._segmentsIterator.reset();\r\n\r\n\t\tthis.openSegment(this._workingStartIndex);\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\tthis.openSegment(this._workingStartIndex, range);\r\n\t\t});\r\n\r\n\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\tsegment.__disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number}        openIndex  [description]\r\n\t * @param {AxisDataItem}  axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet endIndex: number = this._workingEndIndex;\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this._segmentsIterator.getFirst();\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties, segment, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet connect: boolean = this.connect;\r\n\t\t\t\t\t// todo: other connect conditions\r\n\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.closeSegment(segment, points, openIndex, closeIndex, axisRange);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment} segment    [description]\r\n\t * @param {IPoint[]}          points     [description]\r\n\t * @param {number}            openIndex  [description]\r\n\t * @param {number}            closeIndex [description]\r\n\t * @param {AxisDataItem}      axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem) {\r\n\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\tthis.openSegment(closeIndex, axisRange);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param  {object}             itemProperties  Item properties\r\n\t * @param  {LineSeriesSegment}  segment         Segment\r\n\t * @return {boolean}                            Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment: LineSeriesSegment, checkOnly?: boolean): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t// some value must be defined\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tlet currentValue = (<any>segment)[propertyName];\r\n\t\t\t\tlet currentValueStr: string;\r\n\t\t\t\t// current value can be Color, number, anything. So we check if it has toString, otherwise just do String().\r\n\t\t\t\t// toString() will return hex if it's color. The only problem is that it will return lowercased hex and if we have uppercase in data, it will think that it changed\r\n\t\t\t\tif (currentValue) {\r\n\t\t\t\t\tif (currentValue.toString) {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue; // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tlet valueStr: string;\r\n\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tif (value.toString) {\r\n\t\t\t\t\t\tvalueStr = value.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalueStr = value;  // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (currentValue == value || (currentValueStr != undefined && valueStr != undefined && currentValueStr == valueStr)) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!checkOnly) {\r\n\t\t\t\t\t\t(<any>segment)[propertyName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * If set to `true` the line will connect two adjacent data points by a\r\n\t * straight line. Even if there are data points with missing values\r\n\t * in-between.\r\n\t *\r\n\t * If you set this to `false`, the line will break when there are missing\r\n\t * values.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#Line_series_with_gaps} for more information about this feature\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connect\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\t//line.copyFrom(<any>this); coppies events which is not good\r\n\t\t$object.copyProperties(this, line, visualProperties);\r\n\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\t//fill.copyFrom(<any>this); coppies events which is not good\r\n\t\t\t$object.copyProperties(this, fill, visualProperties);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\t\t\tif (bullet.copyToLegendMarker) {\r\n\r\n\t\t\t\t// do not copy bullets with labels\r\n\t\t\t\tlet hasLabels: boolean = false;\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!hasLabels) {\r\n\t\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\t\tclone.parent = marker;\r\n\t\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\t\tclone.x = w / 2;\r\n\t\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeries.ts",
    "/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ILineSeriesSegmentPropertiess}\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ILineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesSegmentEvents}\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.setElement(this.paper.add(\"path\"));\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.setElement(this.paper.add(\"path\"));\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (!this.disabled) {\r\n\t\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\t\t// first moveTo helps to avoid Chrome straight line in the mask bug.\r\n\t\t\t\tlet path: string = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t\tif (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n\t\t\t\t\t// like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.strokeSprite.path = path;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fillSprite.path = \"\";\r\n\t\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param {Sprite} source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeriesSegment.ts",
    "/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"../elements/PieTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { PieChart } from \"../types/PieChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t *\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieTick}\r\n\t */\r\n\tpublic _tick: PieTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _component!: PieSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t *\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {number}    toValue   Target value for animation\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): Animation {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding cisual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): Animation {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends IPercentSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends IPercentSeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends PercentSeries {\r\n\r\n\tpublic _slice: Slice;\r\n\r\n\tpublic _tick: PieTick;\r\n\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\tpublic _chart: PieChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPieSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPieSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PieSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IRectangle}\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * [_pixelRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t * @type {number}\r\n\t */\r\n\tprotected _pixelRadius: number;\r\n\r\n\t/**\r\n\t * [_pixelInnerRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t * @type {number}\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/** \r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice();\r\n\t}\r\n\r\n\t/** \r\n\t * creates tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new PieTick();\r\n\t}\r\n\r\n\t/** \r\n\t * creates label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits slice.\r\n\t *\r\n\t * @param  {Slice} slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\r\n\t\tlet hiddenState = slice.hiddenState;\r\n\t\thiddenState.properties.visible = true;\r\n\t\thiddenState.properties.opacity = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif (Math.abs(this.startAngle - this.endAngle) < 0.01) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.pixelRadius > 0) {\r\n\r\n\t\t\tlet percent = dataItem.values.value.percent;\r\n\r\n\t\t\t// SLICE\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\tslice.radius = this.pixelRadius;\r\n\r\n\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\tslice.radius *= dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t}\r\n\t\t\tif (!(slice.innerRadius instanceof Percent)) {\r\n\t\t\t\tslice.innerRadius = this.pixelInnerRadius;\r\n\t\t\t}\r\n\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\tslice.arc = dataItem.values.value.percent * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t// LABEL\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\tlet tick = dataItem.tick;\r\n\t\t\ttick.slice = slice;\r\n\t\t\ttick.label = label;\r\n\r\n\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\tlet point: IPoint;\r\n\r\n\t\t\tif (this.alignLabels) {\r\n\t\t\t\tlet x: number = tick.length + label.radius;\r\n\r\n\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t// right half\r\n\t\t\t\tif (normalizedMiddleAngle >= 270 || normalizedMiddleAngle <= 91) { // 91 makes less chances for flickering\r\n\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.pixelRadius;\r\n\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t}\r\n\t\t\t\t// left half\r\n\t\t\t\telse {\r\n\t\t\t\t\tx -= arcRect.x * this.pixelRadius;\r\n\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\tx *= -1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet distance = slice.radius + tick.length + label.radius;\r\n\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet x: number = slice.ix * slice.radius;\r\n\t\t\t\tlet y: number = slice.iy * slice.radiusY;\r\n\t\t\t\tpoint = label.fixPoint({ x: x, y: y }, slice.radius);\r\n\t\t\t}\r\n\r\n\t\t\tlabel.moveTo(point);\r\n\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels or [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn this._pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelRadius(value: number) {\r\n\t\tthis._pixelRadius = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Pixel inner radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelInnerRadius(value: number) {\r\n\t\tthis._pixelInnerRadius = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number | Percent} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tlet angle = slice.startAngle + slice.arc * locationX;\r\n\t\tlet radius = locationY * slice.radius;\r\n\r\n\t\tbullet.x = radius * $math.cos(angle);\r\n\t\tbullet.y = radius * $math.sin(angle);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\t/*\tif (!this.alignLabels) {\r\n\t\t\t\t\r\n\t\t\tlet slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tif(dataItem){\r\n\t\t\t\tlet label = dataItem.label;\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\tlabel.dx = slice.dx + slice.pixelX;\r\n\t\t\t\t\tlabel.dy = slice.dy + slice.pixelY;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}*/\r\n\t}\r\n\r\n\tprotected getContainerBBox(): IRectangle {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\treturn $math.getArcRect(chart.startAngle, chart.endAngle, this.pixelRadius);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn $math.getArcRect(this.startAngle, this.endAngle, this.pixelRadius);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries.ts",
    "/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICandlestickProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICandlestickAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickEvents}\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts",
    "/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t *\r\n\t * @type {GridCircular}\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t *\r\n\t * @type {AxisFillCircular}\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPropertyValue(\"radius\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPropertyValue(\"innerRadius\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick         Tick element\r\n\t * @param {number}    position     Starting position\r\n\t * @param {number}    endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?:number) {\r\n\r\n\t\tif(!$type.hasValue(location)){\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.fixPoint(point, this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {GridCircular} Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisFillCircular} Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts",
    "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisFillCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisFillCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisFillCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @type {string}\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param {number}  value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts",
    "/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { Axis, AxisItemLocation } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IGridCircularProperties}\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IGridCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGridCircularEvents}\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts",
    "/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IRadarChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarChartProperties}\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarChartEvents}\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {RadarCursor}\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleXAxisRangeChange(event);\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleYAxisRangeChange(event);\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Cursor, of type suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarCursor} Cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new RadarCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet radarCont = this.radarContainer;\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif(axis.renderer.useChartAngles){\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarSeries} New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts",
    "/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tendCategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICategoryAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICategoryAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisBreakEvents}\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param {string}  value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts",
    "/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDateAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDateAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisBreakEvents}\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Date}\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param {Date} value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param {Date} value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxisBreak.ts",
    "/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IInteractionObjectEvents } from \"../../core/interaction/InteractionObjectEvents\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICursorProperties}\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICursorAdapters}\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICursorEvents}\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @type {IPoint}\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t *\r\n\t * @type {\"zoom\" | \"select\"}\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Specifies the rules when cursor needs to be moved or hidden.\r\n\t */\r\n\tprotected _stick: \"hard\" | \"soft\" | \"none\" = \"none\";\r\n\r\n\t/**\r\n\t * A screen point that cursor is \"stuck\" to.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tprotected _stickPoint: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.background.fillOpacity = 0.5;\r\n\t\t//this.background.fill = color(\"#dadada\");\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionObjectEvents[\"track\"]} event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionObjectEvents[\"track\"]): IPoint {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\t// We want to let zoom/pan continue even if cursor is outside chart area\r\n\t\t\tif (!this.isHidden || !this.isHiding) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"soft\" && this._stickPoint) {\r\n\t\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\t\tlocal = this._stickPoint;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\treturn local;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides actual SVG elements and handles hiding animations.\r\n\t *\r\n\t * @param  {number}  duration  Fade out duration (ms)\r\n\t * @return {Animation}            Fade out duration (ms)\r\n\t * @ignore\r\n\t */\r\n\tprotected hideReal(duration?: number): $type.Optional<Animation> {\r\n\t\tif ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn super.hideReal(duration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * The second parameter has following options:\r\n\t *\r\n\t * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n\t * it either moves to a new place (if pointer over plot area) or is hidden.\r\n\t *\r\n\t * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n\t * outside chart, but will move to a new place whe plot area is hovered or\r\n\t * touched.\r\n\t *\r\n\t * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n\t * another `triggerMove()` call.\r\n\t *\r\n\t * @param {IPoint}                    point  Point to place cursor at\r\n\t * @param {\"hard\" | \"soft\" | \"none\"}  stick  Level of cursor stickiness to the place\r\n\t */\r\n\tpublic triggerMove(point: IPoint, stick?: \"hard\" | \"soft\" | \"none\"): void {\r\n\r\n\t\tif (stick) {\r\n\t\t\tthis._stick = stick;\r\n\t\t}\r\n\r\n\t\tif (stick == \"hard\" || stick == \"soft\") {\r\n\t\t\tthis._stickPoint = point;\r\n\t\t}\r\n\r\n\t\tthis.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param {IPoint}  point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y) {\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.point = point;\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tpublic triggerDown(point: IPoint) {\r\n\t\tthis.triggerDownReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tpublic triggerUp(point: IPoint) {\r\n\t\tthis.triggerUpReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\t\tif ($math.getDistance(this.upPoint, this.downPoint) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"down\"]} event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\t\tif (!this.interactionsEnabled || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerDown(local);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"up\"]} event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerUp(local);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param {Chart}  value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Chart} Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/Cursor.ts",
    "/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarSeries}\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IRadarSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarSeriesEvents}\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {RadarSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {RadarSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarSeriesDataItem} dataItem  [description]\r\n\t * @param {string}              xKey      [description]\r\n\t * @param {string}              yKey      [description]\r\n\t * @param {number}              locationX [description]\r\n\t * @param {number}              locationY [description]\r\n\t * @param {string}              stackKeyX [description]\r\n\t * @param {string}              stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment}  segment      [description]\r\n\t * @param {IPoint[]}           points       [description]\r\n\t * @param {IPoint[]}           closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts",
    "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IRadarCursorProperties}\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {IRadarCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarCursorEvents}\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point  Point to check\r\n\t * @return {boolean}         Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\t\tlet angle = $math.getAngle(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle)) {\r\n\r\n\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.path = path;\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts",
    "/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @type {\"circles\" | \"polygons\"}\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {AxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererRadialEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value)\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarChart} value Chart\r\n\t */\r\n\tpublic set chart(chart: RadarChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {RadarChart} Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element) {\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = chart.dataItems.length;\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.path = path;\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?:number) {\r\n\r\n\t\tif(!$type.hasValue(location)){\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"startAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"endAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param {\"circles\" | \"polygons\"}  value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"circles\" | \"polygons\"} Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet count = chart.dataItems.length;\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick      Tick element\r\n\t * @param {number}    position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts",
    "/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t * @type {number}\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @type {\"any\" | \"clockWise\" | \"CounterClockWise\"}\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IClockHandProperties}\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IClockHandAdapters}\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IClockHandEvents}\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * @type {Trapezoid}\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param {Circle}  pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Circle} Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param {Trapezoid}  hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Trapezoid} Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param {\"any\" | \"clockWise\" | \"counterClockWise\"}  value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"any\" | \"clockWise\" | \"counterClockWise\"} rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param {any}     value     New value\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t * @param {(value:number)=>number}  easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param {any}  value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {any} Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"valueschanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"propertychanged\", () => this.invalidate())\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {object}  config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts",
    "/**\r\n * Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries, PieSeriesDataItem } from \"../series/PieSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart}\r\n\t */\r\n\tpublic _component!: PieChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart]].\r\n */\r\nexport interface IPieChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart]]\r\n */\r\nexport interface IPieChartProperties extends IPercentChartProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the pie.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Relative inner radius (0-1).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * An angle pie starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle pie ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart]].\r\n */\r\nexport interface IPieChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChartAdapters extends IPercentChartAdapters, IPieChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IPieChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieChartProperties}\r\n\t */\r\n\tpublic _properties!: IPieChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChartEvents}\r\n\t */\r\n\tpublic _events!: IPieChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.innerRadius = 0;\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.isMeasured = true;\r\n\t\tseriesContainer.valign = \"middle\";\r\n\t\tseriesContainer.align = \"center\";\r\n\t\tseriesContainer.layout = \"absolute\";\r\n\t\tseriesContainer.width = undefined;\r\n\t\tseriesContainer.height = undefined;\r\n\r\n\t\t// so that the pie is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tthis.invalidate();\r\n\t\t})\r\n\t\t\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis.updateRadius();\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates pie's radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tlet chartCont = this.chartContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for radar also)\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n\r\n\t\tlet chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet chartPixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n\r\n\t\tlet seriesRadius = (chartRadius - chartPixelInnerRadius) / this.series.length;\r\n\t\t//@todo: make it possible to set series radius in percent\r\n\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet series = a[1];\r\n\r\n\t\t\tlet radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\r\n\t\t\tlet innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\r\n\r\n\t\t\tif(!$type.isNumber(radius)){\r\n\t\t\t\tradius = chartPixelInnerRadius + seriesRadius * (i + 1);\r\n\t\t\t}\r\n\t\t\tif(!$type.isNumber(innerRadius)){\r\n\t\t\t\tinnerRadius = chartPixelInnerRadius + seriesRadius * i;\r\n\t\t\t}\r\n\r\n\t\t\tseries.pixelRadius = radius;\r\n\t\t\tseries.pixelInnerRadius = innerRadius;\r\n\r\n\t\t\tseries.startAngle = this.startAngle;\r\n\t\t\tseries.endAngle = this.endAngle;\r\n\t\t});\r\n\r\n\t\tthis.seriesContainer.definedBBox = { x: chartRadius * rect.x, y: chartRadius * rect.y, width: chartRadius * rect.width, height: chartRadius * rect.height };\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius of the pie chart.\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"radius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {number | Percent}  value  Radius (px or relative)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius (px or relative)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative inner radius (to create a donut chart).\r\n\t *\r\n\t * The inner radius is relative to pie's radius:\r\n\t * * 0 - solid pie (no hole inside);\r\n\t * * 0.5 - hole is half the radius of the pie;\r\n\t * * 1 - does not make sense, because the hole will take up the whole radius.\r\n\t *\r\n\t * @param {number | Percent}  value  Relative inner radius (0-1)\r\n\t * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Relative inner radius (0-1)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PieSeries]].\r\n\t *\r\n\t * @return {PieSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n\t * at the top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n\t * at the top center. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to change this setting.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t * \r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default 270\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart.ts",
    "/**\r\n * Percent chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PercentSeries, PercentSeriesDataItem } from \"../series/PercentSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PercentChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PercentChart}\r\n\t */\r\n\tpublic _component!: PercentChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PercentChart]].\r\n */\r\nexport interface IPercentChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PercentChart]]\r\n */\r\nexport interface IPercentChartProperties extends ISerialChartProperties { }\r\n\r\n/**\r\n * Defines events for [[PercentChart]].\r\n */\r\nexport interface IPercentChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PercentChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPercentChartAdapters extends ISerialChartAdapters, IPercentChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\r\nexport class PercentChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IPercentChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPercentChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPercentChartProperties}\r\n\t */\r\n\tpublic _properties!: IPercentChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPercentChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPercentChartEvents}\r\n\t */\r\n\tpublic _events!: IPercentChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PercentSeries}\r\n\t */\r\n\tpublic _seriesType: PercentSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChart\";\r\n\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\t// so that the chart is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tthis.invalidate();\r\n\t\t})\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlegendData.push(<PercentSeriesDataItem>dataItem);\r\n\r\n\t\t\t\t\tlet legendSettings = series.legendSettings;\r\n\t\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.labelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.valueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.itemValueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t\tlegend.itemContainers.template.propertyFields.disabled = \"hiddenInLegend\";\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a new [[PercentSeries]].\r\n\t *\r\n\t * @return {PercentSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PercentSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet PercentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (PercentSeriesDataItem.visible && !PercentSeriesDataItem.isHiding) {\r\n\t\t\t\t\tPercentSeriesDataItem.slice.isHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet PercentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tPercentSeriesDataItem.slice.isHover = false;\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\r\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\r\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PercentChart.ts",
    "/**\r\n * Pie tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { PieSeries } from \"../series/PieSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PieTick]].\r\n */\r\nexport interface IPieTickProperties extends ITickProperties { }\r\n\r\n/**\r\n * Defines events for [[PieTick]].\r\n */\r\nexport interface IPieTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieTickAdapters extends ITickAdapters, IPieTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a pie slice connecting it to a related label.\r\n *\r\n * @see {@link IPieTickEvents} for a list of available events\r\n * @see {@link IPieTickAdapters} for a list of available Adapters\r\n */\r\nexport class PieTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieTickProperties}\r\n\t */\r\n\tpublic _properties!: IPieTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieTickAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieTickEvents}\r\n\t */\r\n\tpublic _events!: IPieTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<AxisLabelCircular>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<Slice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieTick\";\r\n\t\tthis.element = this.paper.add(\"polyline\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: Slice = this.slice;\r\n\t\tlet label = this.label;\r\n\r\n\t\tlet series = <PieSeries>slice.dataItem.component;\r\n\r\n\t\tif (slice && slice.radius > 0 && label && label.text) {\r\n\t\t\tlet x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;\r\n\t\t\tlet y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radius * slice.scale;\r\n\r\n\t\t\tlet x1: number;\r\n\t\t\tlet y1: number;\r\n\r\n\t\t\tlet x2: number;\r\n\t\t\tlet y2: number;\r\n\r\n\t\t\tif (series.alignLabels) {\r\n\t\t\t\tx1 = label.pixelX - this.length;\r\n\t\t\t\ty1 = label.pixelY;\r\n\r\n\t\t\t\tx2 = label.pixelX;\r\n\t\t\t\ty2 = y1;\r\n\r\n\t\t\t\tif (label.horizontalCenter == \"right\") {\r\n\t\t\t\t\tx1 += 2 * this.length;\r\n\t\t\t\t\tx2 = x1 - this.length;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tx1 = x0 + label.radius * slice.ix;\r\n\t\t\t\ty1 = y0 + label.radius * slice.iy;\r\n\r\n\t\t\t\tx2 = x1;\r\n\t\t\t\ty2 = y1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.attr({ \"points\": [x0, y0, x1, y1, x2, y2] });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Slice element tick is attached to.\r\n\t *\r\n\t * @param {Slice}  slice  Slice\r\n\t */\r\n\tpublic set slice(slice: Slice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Slice} Slice\r\n\t */\r\n\tpublic get slice(): Slice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Label element tick is attached to.\r\n\t *\r\n\t * @param {AxisLabelCircular}  label  Label\r\n\t */\r\n\tpublic set label(label: AxisLabelCircular) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {AxisLabelCircular} Label\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieTick\"] = PieTick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/PieTick.ts",
    "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { OrderedList, OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t *\r\n\t * @type {Slice3D}\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param {number}  value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPieSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeries3DEvents}\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PieSeries3DDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\tpublic _slice: Slice3D;\t\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeries3DDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/** \r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice3D();\r\n\t}\t\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeries3DDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor(let i = this._workingStartIndex; i < this._workingEndIndex; i++){\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tvar startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts",
    "/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordNodeProperties}\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IChordNodeAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordNodeEvents}\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t *\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t *\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tthis.label = this.createChild(AxisLabelCircular);\r\n\t\tthis.label.location = 0.5;\r\n\t\tthis.label.radius = 5;\r\n\t\tthis.label.text = \"{name}\";\r\n\t\tthis.label.zIndex = 1;\r\n\t\tthis.label.shouldClone = false;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.adapter.add(\"tooltipX\", (tooltipX, target)=>{\r\n\t\t    return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (tooltipY, target)=>{\r\n\t\t    return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = this.total;\r\n\t\t\tlet arc = slice.arc;\r\n\t\t\tlet sliceStartAngle = slice.startAngle;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = sliceStartAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = sliceStartAngle + arc * label.location;\r\n\t\t\tlet startAngle = sliceStartAngle + (1 - sum / this.adjustedTotal) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tif ($type.isNaN(startAngle)) {\r\n\t\t\t\tstartAngle = sliceStartAngle;\r\n\t\t\t}\r\n\r\n\t\t\tlet x = slice.radius * $math.cos(labelAngle);\r\n\t\t\tlet y = slice.radius * $math.sin(labelAngle);\r\n\r\n\t\t\tlet point = { x: x, y: y };\r\n\t\t\tlabel.fixPoint(point, slice.radius);\r\n\t\t\tlabel.moveTo(point);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\t\tlink.startAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\t\tlet slice = this.slice;\r\n\t\tlet mAngle = this.trueStartAngle + slice.arc / 2;\r\n\t\tlet radius = slice.radius;\r\n\r\n\t\tlet tx = radius * $math.cos(mAngle);\r\n\t\tlet ty = radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tslice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param {ChordNode}  source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordNode.ts",
    "/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordLinkProperties}\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IChordLinkAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordLinkEvents}\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n\t * @type Polyspline\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\t\t\t\tlet x3 = radius * $math.cos(endAngle + arc) + toX;\r\n\t\t\t\tlet y3 = radius * $math.sin(endAngle + arc) + toY;\r\n\t\t\t\tlet x4 = radius * $math.cos(startAngle + arc) + fromX;\r\n\t\t\t\tlet y4 = radius * $math.sin(startAngle + arc) + fromY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.path = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\t\t\t\tthis.positionBullets();\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\t\t\t\tlet mAngleM = mAngle1 + (mAngle2 - mAngle1) / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordLink.ts",
    "/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param {Object}  value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return {Object} Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return {string} Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.treeMapDataItem.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {TreeMapDataItem} Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ITreeMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ITreeMapSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ITreeMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapSeriesEvents}\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}                 dataContext  Raw data\r\n\t * @param {number}                 index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {TreeMapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade in (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\treturn dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.getValue(\"value\"), interpolationDuration);\r\n\t\t});\r\n\r\n\t\tlet animation = super.showReal(duration);\r\n\r\n\t\tif (animation && !animation.isDisposed()) {\r\n\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\tthis.chart.invalidateLayout();\r\n\t\t\t})\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.chart.invalidateLayout();\r\n\t\t}\r\n\t\tthis.chart.invalidateLayout();\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade out (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\tdataItem.treeMapDataItem.setWorkingValue(\"value\", 0, interpolationDuration);\r\n\t\t});\r\n\r\n\t\tlet animation = super.hideReal(duration);\r\n\r\n\t\tif (animation && !animation.isDisposed()) {\r\n\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\tthis.chart.invalidateLayout();\r\n\t\t\t})\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.chart.invalidateLayout();\r\n\t\t}\r\n\t\tthis.chart.invalidateLayout();\r\n\t\treturn animation;\r\n\t}\r\n\r\n\r\n\tpublic appear(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate(){\r\n\r\n\t}\t\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts",
    "/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IAxisRendererX3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererX3DEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D;\r\n\t\tlet dy = this.chart.dy3D;\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D} value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts",
    "/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisRendererY3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisRendererY3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererY3DEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w + this.chart.dx3D, y: this.chart.dy3D });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D}  value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts",
    "/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Column3D}\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t *\r\n\t * @type {IColumnSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IColumnSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IColumnSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeries3DEvents}\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {XYChart3D}\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart && this.chart.columnsContainer) {\r\n\t\t\t// @martynas: need to check aria-things here.\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns SVG path to use as a mask for the series.\r\n\t *\r\n\t * @return {string} Mask path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet w: number = this.xAxis.axisLength;\r\n\t\tlet h: number = this.yAxis.axisLength;\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\treturn $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts",
    "/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column3D]].\r\n */\r\nexport interface IColumn3DProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Column3D]].\r\n */\r\nexport interface IColumn3DEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumn3DAdapters extends IColumnAdapters, IColumn3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column3D extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IColumn3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumn3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IColumn3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumn3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumn3DEvents}\r\n\t */\r\n\tpublic _events!: IColumn3DEvents;\r\n\r\n\r\n\t/**\r\n\t * column3D element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic column3D: Rectangle3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column3D\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.column3D = this.createChild(Rectangle3D);\r\n\t\tthis.column3D.shouldClone = false;\r\n\t\tthis.column3D.strokeOpacity = 0;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.column3D;\r\n\t}\r\n\r\n\tvalidate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.width = this.pixelWidth;\r\n\t\t\tthis.column3D.height = this.pixelHeight;\r\n\t\t}\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.copyFrom(source.column3D);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column3D.ts",
    "/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Candlestick}\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {CandlestickSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateY?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {CandlestickSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ICandlestickSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICandlestickSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICandlestickSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickSeriesEvents}\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CandlestickSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CandlestickSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tthis.validateCandlestick(dataItem);\r\n\t}\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"dataItem\"]){\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet yAxisFieldName: string = $utils.capitalize(this.yAxis.axisFieldName);\r\n\t\t\tthis._yLowField = <keyof this[\"_dataFields\"]>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\tthis._yHighField = <keyof this[\"_dataFields\"]>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t}\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet xAxisFieldName: string = $utils.capitalize(this.xAxis.axisFieldName);\r\n\t\t\tthis._xLowField = <keyof this[\"_dataFields\"]>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\tthis._xHighField = <keyof this[\"_dataFields\"]>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t}\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t\tcolumn.fill = column.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts",
    "/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick, ICandlestickProperties, ICandlestickAdapters, ICandlestickEvents } from \"./Candlestick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[OHLC]].\r\n */\r\nexport interface IOHLCProperties extends ICandlestickProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLC]].\r\n */\r\nexport interface IOHLCEvents extends ICandlestickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLC]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCAdapters extends ICandlestickAdapters, IOHLCProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class OHLC extends Candlestick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IOHLCProperties}\r\n\t */\r\n\tpublic _properties!: IOHLCProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IOHLCAdapters}\r\n\t */\r\n\tpublic _adapter!: IOHLCAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IOHLCEvents}\r\n\t */\r\n\tpublic _events!: IOHLCEvents;\r\n\r\n\r\n\t/**\r\n\t * Open line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic openLine: Line;\r\n\r\n\t/**\r\n\t * Close line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic closeLine: Line;\r\n\r\n\t/**\r\n\t * High-low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLowLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLC\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\t//super.createAssets();\r\n\r\n\t\tthis.openLine = this.createChild(Line);\r\n\t\tthis.openLine.shouldClone = false;\r\n\r\n\t\tthis.highLowLine = this.createChild(Line);\r\n\t\tthis.highLowLine.shouldClone = false;\r\n\r\n\t\tthis.closeLine = this.createChild(Line);\r\n\t\tthis.closeLine.shouldClone = false;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.openLine) {\r\n\t\t\tthis.openLine.copyFrom(source.openLine);\r\n\t\t}\r\n\t\tif (this.highLowLine) {\r\n\t\t\tthis.highLowLine.copyFrom(source.highLowLine);\r\n\t\t}\r\n\t\tif (this.closeLine) {\r\n\t\t\tthis.closeLine.copyFrom(source.closeLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/OHLC.ts",
    "/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarColumnProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnEvents}\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipX;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipY;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts",
    "/**\r\n * Defines Pyramid Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties, FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { Color, color } from \"../../core/utils/Color\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PyramidSeriesDataItem extends FunnelSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PyramidSeries}\r\n\t */\r\n\tpublic _component!: PyramidSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PyramidSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesDataFields extends IFunnelSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesProperties extends IFunnelSeriesProperties {\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Top width in pixels or percent\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tpyramidHeight?: number | Percent;\r\n\r\n\t/**\r\n\t * Indicates whether slice value should sould influence its height or area\r\n\t * size.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @type {\"height\" | \"area\"}\r\n\t */\r\n\tvalueIs?: \"height\" | \"area\";\r\n}\r\n\r\n/**\r\n * Defines events for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesEvents extends IFunnelSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PyramidSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPyramidSeriesAdapters extends IFunnelSeriesAdapters, IPyramidSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPyramidSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPyramidSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPyramidSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPyramidSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPyramidSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPyramidSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPyramidSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPyramidSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PyramidSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PyramidSeriesDataItem;\r\n\r\n\t/**\r\n\t * [_nextWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _nextWidth: number;\r\n\r\n\tprotected _pyramidHeight: number;\r\n\r\n\tprotected _pyramidWidth: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PyramidSeries\";\r\n\t\tthis.topWidth = percent(0);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.pyramidHeight = percent(100);\r\n\t\tthis.valueIs = \"area\";\r\n\r\n\t\tthis.sliceLinks.template.width = 0;\r\n\t\tthis.sliceLinks.template.height = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PyramidSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PyramidSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param  {FunnelSeriesDataItem} dataItem [description]\r\n\t * @return {number}                        [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\t\t}\r\n\t\tif (nextValue == 0) {\r\n\t\t\tnextValue = 0.000001;\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t * \r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tmaxHeight -= (sliceLink.pixelHeight * relValue);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaxWidth -= (sliceLink.pixelWidth * relValue);\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tthis._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n\t\tthis._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - this._pyramidHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - this._pyramidWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]} dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\tlet nextValue = this.getNextValue(dataItem);\r\n\t\tlet workingValue = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\tif (workingValue == 0) {\r\n\t\t\tworkingValue = 0.000001;\r\n\t\t}\r\n\r\n\t\tlet pyramidWidth = this._pyramidWidth;\r\n\t\tlet pyramidHeight = this._pyramidHeight;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet linkWidth = sliceLink.pixelWidth;\r\n\t\tlet linkHeight = sliceLink.pixelHeight;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceHeight: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n\t\t\t\tlet square = totalSquare * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceHeight = pyramidHeight * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tslice.height = sliceHeight;\r\n\t\t\tslice.width = maxWidth;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\r\n\t\t\tlabel.x = maxWidth / 2;\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight * workingValue / dataItem.value;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = slice.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceWidth: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n\t\t\t\tlet square = totalSquare * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceWidth = pyramidWidth * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.width = sliceWidth;\r\n\t\t\tslice.height = maxHeight;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\t\t\tlabel.y = maxHeight / 2;\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth * workingValue / dataItem.value;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\t\t\tsliceLink.y = slice.y;\r\n\t\t}\r\n\r\n\t\tthis._nextWidth = slice.bottomWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` (default) means the pyramid will be perfectly pointy.\r\n\t * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n\t * `100%` will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @default 0%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tif (this.setPropertyValue(\"topWidth\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t *\r\n\t * @default 100%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set pyramidHeight(value: number | Percent) {\r\n\t\tif (this.setPropertyValue(\"pyramidHeight\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get pyramidHeight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"pyramidHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` means the pyramid's botto will be pointy.\r\n\t * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n\t * `100%` (default) will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t * \r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tif (this.setPropertyValue(\"bottomWidth\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's value will influence its size.\r\n\t *\r\n\t * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n\t * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n\t * slices based on their value.\r\n\t *\r\n\t * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n\t * will represent their value relatively to values of the other slices.\r\n\t *\r\n\t * This is a correct way to depict \"weight\" of each slice based on their\r\n\t * values.\r\n\t *\r\n\t * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n\t * divvied up between slices. Actual slice width or area is not counted in.\r\n\t *\r\n\t * From the data-viz standpoint this does not make a lot of sense, since\r\n\t * slices with lesser values might appear more prominent if they are placed\r\n\t * towards thick end of the pyramid since their areas will be bigger.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @param {\"area\" | \"height\"}\r\n\t */\r\n\tpublic set valueIs(value: \"area\" | \"height\") {\r\n\t\tif (this.setPropertyValue(\"valueIs\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"area\" | \"height\"}\r\n\t */\r\n\tpublic get valueIs(): \"area\" | \"height\" {\r\n\t\treturn this.getPropertyValue(\"valueIs\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PyramidSeries.ts",
    "/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IConeColumnProperties}\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IConeColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeColumnEvents}\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Cone column element\r\n\t * @type {Cone}\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts",
    "/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnProperties extends IColumnProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Tension\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Orientation of the column\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @type {Orientation}\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnAdapters extends IColumnAdapters, ICurvedColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICurvedColumnProperties}\r\n\t */\r\n\tpublic _properties!: ICurvedColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICurvedColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICurvedColumnEvents}\r\n\t */\r\n\tpublic _events!: ICurvedColumnEvents;\r\n\r\n\t/**\r\n\t * The element that holds curved column shape.\r\n\t * \r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic curvedColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * [createAssets description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createAssets(): void {\r\n\t\tthis.curvedColumn = this.createChild(Sprite);\r\n\t\tthis.curvedColumn.shouldClone = false;\r\n\r\n\t\tthis.setPropertyValue(\"tension\", 0.7);\r\n\r\n\t\tthis.width = percent(120);\r\n\t\tthis.height = percent(120);\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curvedColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w = this.realWidth;\r\n\t\tlet h = this.realHeight;\r\n\t\tlet x = this.realX - this.pixelX;\r\n\t\tlet y = this.realY - this.pixelY;\r\n\r\n\t\tlet points: IPoint[];\r\n\r\n\t\tlet ww = this.width;\r\n\t\tlet pw = 0.8;\r\n\r\n\t\tlet tensionX = 1;\r\n\t\tlet tensionY = 1;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\ttensionX = this.tension;\r\n\t\t\tpoints = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttensionY = this.tension;\r\n\t\t\tpoints = [{ x: x, y: 0 }, { x: x + w, y: h / 2 }, { x: x, y: h }];\r\n\t\t}\r\n\r\n\t\tlet path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n\t\tthis.column.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from other element of the same type.\r\n\t * \r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curvedColumn) {\r\n\t\t\tthis.curvedColumn.copyFrom(source.curvedColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension of the curve.\r\n\t *\r\n\t * Tension defines how \"lose\" the line will be.\r\n\t *\r\n\t * 1 is the maximum tension which would result in pointy columns with\r\n\t * straight edges.\r\n\t *\r\n\t * The smaller the tension th wider the column will be.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param {number}  value tension (0-1)\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Tension (0-1)\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the column.\r\n\t *\r\n\t * Available options: \"vertical\" (default) and \"horizontal\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param {Orientation}  value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {Orientation} Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CurvedColumn.ts",
    "import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = 317\n// module chunks = 4",
    "/**\n * Module: gauge\n */\n\n/**\n * Elements: types\n */\nexport { GaugeChartDataItem, IGaugeChartDataFields, IGaugeChartProperties, IGaugeChartEvents, IGaugeChartAdapters, GaugeChart } from \"./.internal/charts/types/GaugeChart\";\nexport { RadarChartDataItem, IRadarChartDataFields, IRadarChartProperties, IRadarChartEvents, IRadarChartAdapters, RadarChart } from \"./.internal/charts/types/RadarChart\";\nexport { XYChartDataItem, IXYChartDataFields, IXYChartProperties, IXYChartEvents, IXYChartAdapters, XYChart } from \"./.internal/charts/types/XYChart\";\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\nexport { PieChart3DDataItem, IPieChart3DDataFields, IPieChart3DProperties, IPieChart3DEvents, IPieChart3DAdapters, PieChart3D } from \"./.internal/charts/types/PieChart3D\";\nexport { PieChartDataItem, IPieChartDataFields, IPieChartProperties, IPieChartEvents, IPieChartAdapters, PieChart } from \"./.internal/charts/types/PieChart\";\nexport { SlicedChart, SlicedChartDataItem, ISlicedChartAdapters, ISlicedChartDataFields, ISlicedChartEvents, ISlicedChartProperties } from \"./.internal/charts/types/SlicedChart\";\nexport { FlowDiagramDataItem, IFlowDiagramDataFields, IFlowDiagramProperties, IFlowDiagramEvents, IFlowDiagramAdapters, FlowDiagram } from \"./.internal/charts/types/FlowDiagram\";\nexport { SankeyDiagramDataItem, ISankeyDiagramDataFields, ISankeyDiagramProperties, ISankeyDiagramEvents, ISankeyDiagramAdapters, SankeyDiagram } from \"./.internal/charts/types/SankeyDiagram\";\nexport { ChordDiagramDataItem, IChordDiagramDataFields, IChordDiagramProperties, IChordDiagramEvents, IChordDiagramAdapters, ChordDiagram } from \"./.internal/charts/types/ChordDiagram\";\nexport { TreeMapDataItem, ITreeMapDataFields, ITreeMapProperties, ITreeMapEvents, ITreeMapAdapters, TreeMap } from \"./.internal/charts/types/TreeMap\";\nexport { XYChart3DDataItem, IXYChart3DDataFields, IXYChart3DProperties, IXYChart3DEvents, IXYChart3DAdapters, XYChart3D } from \"./.internal/charts/types/XYChart3D\";\n\n/**\n * Elements: charts\n */\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Elements: series\n */\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\nexport { XYSeriesDataItem, IXYSeriesDataFields, IXYSeriesProperties, IXYSeriesEvents, IXYSeriesAdapters, XYSeries } from \"./.internal/charts/series/XYSeries\";\nexport { LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesEvents, ILineSeriesAdapters, LineSeries } from \"./.internal/charts/series/LineSeries\";\nexport { ILineSeriesSegmentProperties, ILineSeriesSegmentEvents, ILineSeriesSegmentAdapters, LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\nexport { CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesEvents, ICandlestickSeriesAdapters, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\nexport { OHLCSeriesDataItem, IOHLCSeriesDataFields, IOHLCSeriesProperties, IOHLCSeriesEvents, IOHLCSeriesAdapters, OHLCSeries } from \"./.internal/charts/series/OHLCSeries\";\nexport { ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesEvents, IColumnSeriesAdapters, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\nexport { StepLineSeriesDataItem, IStepLineSeriesDataFields, IStepLineSeriesProperties, IStepLineSeriesEvents, IStepLineSeriesAdapters, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\nexport { RadarSeriesDataItem, IRadarSeriesDataFields, IRadarSeriesProperties, IRadarSeriesEvents, IRadarSeriesAdapters, RadarSeries } from \"./.internal/charts/series/RadarSeries\";\nexport { RadarColumnSeriesDataItem, IRadarColumnSeriesDataFields, IRadarColumnSeriesProperties, IRadarColumnSeriesEvents, IRadarColumnSeriesAdapters, RadarColumnSeries } from \"./.internal/charts/series/RadarColumnSeries\";\nexport { PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesEvents, IPieSeriesAdapters, PieSeries } from \"./.internal/charts/series/PieSeries\";\nexport { FunnelSeries, FunnelSeriesDataItem, IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties } from \"./.internal/charts/series/FunnelSeries\";\nexport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./.internal/charts/series/PyramidSeries\";\nexport { IPictorialStackedSeriesAdapters, IPictorialStackedSeriesDataFields, IPictorialStackedSeriesEvents, IPictorialStackedSeriesProperties, PictorialStackedSeries, PictorialStackedSeriesDataItem } from \"./.internal/charts/series/PictorialStackedSeries\";\nexport { IPieTickProperties, IPieTickEvents, IPieTickAdapters, PieTick } from \"./.internal/charts/elements/PieTick\";\nexport { FunnelSlice, IFunnelSliceAdapters, IFunnelSliceEvents, IFunnelSliceProperties } from \"./.internal/charts/elements/FunnelSlice\";\nexport { IPieSeries3DProperties, IPieSeries3DDataFields, PieSeries3DDataItem, IPieSeries3DEvents, IPieSeries3DAdapters, PieSeries3D } from \"./.internal/charts/series/PieSeries3D\";\nexport { TreeMapSeriesDataItem, ITreeMapSeriesDataFields, ITreeMapSeriesProperties, ITreeMapSeriesEvents, ITreeMapSeriesAdapters, TreeMapSeries } from \"./.internal/charts/series/TreeMapSeries\";\nexport { ColumnSeries3DDataItem, IColumnSeries3DDataFields, IColumnSeries3DProperties, IColumnSeries3DEvents, IColumnSeries3DAdapters, ColumnSeries3D } from \"./.internal/charts/series/ColumnSeries3D\";\nexport { ConeSeriesDataItem, IConeSeriesDataFields, IConeSeriesProperties, IConeSeriesEvents, IConeSeriesAdapters, ConeSeries } from \"./.internal/charts/series/ConeSeries\";\nexport { CurvedColumnSeries, CurvedColumnSeriesDataItem, ICurvedColumnSeriesAdapters, ICurvedColumnSeriesDataFields, ICurvedColumnSeriesProperties, ICurvedColumnSeriesEvents } from \"./.internal/charts/series/CurvedColumnSeries\";\n\n/**\n * Elements: axes\n */\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\nexport { ValueAxisDataItem, IMinMaxStep, IValueAxisDataFields, IValueAxisProperties, IValueAxisEvents, IValueAxisAdapters, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\nexport { CategoryAxisDataItem, ICategoryAxisDataFields, ICategoryAxisProperties, ICategoryAxisEvents, ICategoryAxisAdapters, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\nexport { ICategoryAxisBreakProperties, ICategoryAxisBreakEvents, ICategoryAxisBreakAdapters, CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\nexport { DateAxisDataItem, IDateAxisDataFields, IDateAxisProperties, IDateAxisEvents, IDateAxisAdapters, DateAxis } from \"./.internal/charts/axes/DateAxis\";\nexport { DurationAxisDataItem, DurationAxis, IDurationAxisAdapters, IDurationAxisDataFields, IDurationAxisEvents, IDurationAxisProperties } from \"./.internal/charts/axes/DurationAxis\";\nexport { IDateAxisBreakProperties, IDateAxisBreakEvents, IDateAxisBreakAdapters, DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\nexport { IValueAxisBreakProperties, IValueAxisBreakEvents, IValueAxisBreakAdapters, ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\nexport { IAxisRendererXProperties, IAxisRendererXEvents, IAxisRendererXAdapters, AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\nexport { IAxisRendererYProperties, IAxisRendererYEvents, IAxisRendererYAdapters, AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\nexport { IAxisRendererRadialProperties, IAxisRendererRadialEvents, IAxisRendererRadialAdapters, AxisRendererRadial } from \"./.internal/charts/axes/AxisRendererRadial\";\nexport { IAxisLabelCircularProperties, IAxisLabelCircularEvents, IAxisLabelCircularAdapters, AxisLabelCircular } from \"./.internal/charts/axes/AxisLabelCircular\";\nexport { IAxisRendererCircularProperties, IAxisRendererCircularEvents, IAxisRendererCircularAdapters, AxisRendererCircular } from \"./.internal/charts/axes/AxisRendererCircular\";\nexport { IAxisFillCircularProperties, IAxisFillCircularEvents, IAxisFillCircularAdapters, AxisFillCircular } from \"./.internal/charts/axes/AxisFillCircular\";\nexport { IGridCircularProperties, IGridCircularEvents, IGridCircularAdapters, GridCircular } from \"./.internal/charts/axes/GridCircular\";\nexport { IAxisRendererX3DProperties, IAxisRendererX3DEvents, IAxisRendererX3DAdapters, AxisRendererX3D } from \"./.internal/charts/axes/AxisRendererX3D\";\nexport { IAxisRendererY3DProperties, IAxisRendererY3DEvents, IAxisRendererY3DAdapters, AxisRendererY3D } from \"./.internal/charts/axes/AxisRendererY3D\";\n\n/**\n * Elements: elements\n */\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\nexport { ILabelBulletProperties, ILabelBulletEvents, ILabelBulletAdapters, LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\nexport { ICircleBulletProperties, ICircleBulletEvents, ICircleBulletAdapters, CircleBullet } from \"./.internal/charts/elements/CircleBullet\";\nexport { IXYChartScrollbarProperties, IXYChartScrollbarEvents, IXYChartScrollbarAdapters, XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\nexport { IClockHandProperties, IClockHandEvents, IClockHandAdapters, ClockHand } from \"./.internal/charts/elements/ClockHand\";\n\nexport { IFlowDiagramNodeProperties, IFlowDiagramNodeEvents, IFlowDiagramNodeAdapters, FlowDiagramNode } from \"./.internal/charts/elements/FlowDiagramNode\";\nexport { IFlowDiagramLinkProperties, IFlowDiagramLinkEvents, IFlowDiagramLinkAdapters, FlowDiagramLink } from \"./.internal/charts/elements/FlowDiagramLink\";\n\nexport { ISankeyNodeProperties, ISankeyNodeEvents, ISankeyNodeAdapters, SankeyNode } from \"./.internal/charts/elements/SankeyNode\";\nexport { ISankeyLinkProperties, ISankeyLinkEvents, ISankeyLinkAdapters, SankeyLink } from \"./.internal/charts/elements/SankeyLink\";\n\nexport { IChordNodeProperties, IChordNodeEvents, IChordNodeAdapters, ChordNode } from \"./.internal/charts/elements/ChordNode\";\nexport { IChordLinkProperties, IChordLinkEvents, IChordLinkAdapters, ChordLink } from \"./.internal/charts/elements/ChordLink\";\n\nexport { NavigationBarDataItem, INavigationBarDataFields, INavigationBarProperties, INavigationBarEvents, INavigationBarAdapters, NavigationBar } from \"./.internal/charts/elements/NavigationBar\";\n\nexport { Column, IColumnAdapters, IColumnEvents, IColumnProperties } from \"./.internal/charts/elements/Column\";\nexport { Candlestick, ICandlestickAdapters, ICandlestickEvents, ICandlestickProperties } from \"./.internal/charts/elements/Candlestick\";\nexport { OHLC, IOHLCAdapters, IOHLCEvents, IOHLCProperties } from \"./.internal/charts/elements/OHLC\";\nexport { RadarColumn, IRadarColumnAdapters, IRadarColumnEvents, IRadarColumnProperties } from \"./.internal/charts/elements/RadarColumn\";\nexport { Column3D, IColumn3DAdapters, IColumn3DEvents, IColumn3DProperties } from \"./.internal/charts/elements/Column3D\";\nexport { ConeColumn, IConeColumnAdapters, IConeColumnEvents, IConeColumnProperties } from \"./.internal/charts/elements/ConeColumn\";\nexport { CurvedColumn, ICurvedColumnAdapters, ICurvedColumnEvents, ICurvedColumnProperties } from \"./.internal/charts/elements/CurvedColumn\";\n\n\n/**\n * Elements: cursors\n */\nexport { IXYCursorProperties, IXYCursorEvents, IXYCursorAdapters, XYCursor } from \"./.internal/charts/cursors/XYCursor\";\nexport { ICursorProperties, ICursorEvents, ICursorAdapters, Cursor } from \"./.internal/charts/cursors/Cursor\";\nexport { IRadarCursorProperties, IRadarCursorEvents, IRadarCursorAdapters, RadarCursor } from \"./.internal/charts/cursors/RadarCursor\";\n\n\n\n// WEBPACK FOOTER //\n// ../../src/charts.ts",
    "/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {GaugeChart}\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IGaugeChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IGaugeChartProperties}\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IGaugeChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGaugeChartEvents}\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t *\r\n\t * @type {ListTemplate<ClockHand>}\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param {IListEvents<ClockHand>[\"inserted\"]}  event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts",
    "/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @type {IPieChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChart3DEvents}\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees.\r\n\t *\r\n\t * @default 10\r\n\t * @param {number}  value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return {PieSeries3D} New series\r\n\t */\r\n\tprotected createSeries():this[\"_seriesType\"]{\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts",
    "/**\r\n * Sliced chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { FunnelSeries, FunnelSeriesDataItem } from \"../series/FunnelSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SlicedChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {SlicedChart}\r\n\t */\r\n\tpublic _component!: SlicedChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SlicedChart]]\r\n */\r\nexport interface ISlicedChartProperties extends IPercentChartProperties { }\r\n\r\n/**\r\n * Defines events for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SlicedChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlicedChartAdapters extends IPercentChartAdapters, ISlicedChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class SlicedChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ISlicedChartDataFields}\r\n\t */\r\n\tpublic _dataFields: ISlicedChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ISlicedChartProperties}\r\n\t */\r\n\tpublic _properties!: ISlicedChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ISlicedChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ISlicedChartEvents}\r\n\t */\r\n\tpublic _events!: ISlicedChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {FunnelSeries}\r\n\t */\r\n\tpublic _seriesType: FunnelSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChart\";\r\n\r\n\t\tthis.seriesContainer.layout = \"horizontal\";\r\n\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\tthis.seriesContainer.events.on(\"maxsizechanged\", () => {\r\n\r\n\t\t})\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sliced chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\r\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/SlicedChart.ts",
    "/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t * @type {ChordLink}\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IChordDiagramDataFields}\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordDiagramProperties}\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordDiagramEvents}\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * A list of Chord links connecting nodes.\r\n\t *\r\n\t * @param {ListTemplate<ChordLink>}\r\n\t */\r\n\tpublic links: ListTemplate<ChordLink>;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t * @type {Iterator}\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"none\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tlet nodesContainer = this.nodesContainer;\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, $math.min(chartContainer.innerWidth, chartContainer.innerHeight)) / 2;\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.invalidate();\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return {this} Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param {boolean}  value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/ChordDiagram.ts",
    "/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { IWavedShape } from \"../defs/IWavedShape\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IQuadraticCurveProperties}\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IQuadraticCurveAdapters}\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IQuadraticCurveEvents}\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.path = d;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param {number} value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param {number} value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param  {number}             position  Position (0-1)\r\n\t * @return {IOrientationPoint}            Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/elements/QuadraticCurve.ts",
    "/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Related series.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapDataItem[]}\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet value = this.values[\"value\"].value;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param {string}  name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param {OrderedListTemplate<TreeMapDataItem>}  children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {OrderedListTemplate<TreeMapDataItem>} Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param {Color}  value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * series of data item\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (this._series) {\r\n\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\tthis._series.dispose();\r\n\t\t}\r\n\t\tthis._series = series;\r\n\t\tthis._disposers.push(series);\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum levels the chart will allow drilling down to.\r\n\t *\r\n\t * @default 2\r\n\t * @type {number}\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @type {\"none\" | \"ascending\" | \"descending\"}\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t *\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ITreeMapDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ITreeMapProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapEvents}\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t * @type {function}\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapSeries[]}\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied autoamtically to each new chart item, if\r\n\t * not explicitly set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {DictionaryTemplate<string, TreeMapSeries>} Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @type {TreeMapDataItem}\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed:TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\tthis.events.on(\"maxsizechanged\", ()=>{\r\n\t\t\tthis.invalidateLayout();\r\n\t\t})\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t})\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t})\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t});\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = (maxX * this.pixelHeight / this.pixelWidth) || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\r\n\t\tregistry.events.once(\"exitframe\", () => {\r\n\t\t\tthis.toggleBullets(0);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem} dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columns.template.hide(duration);\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columns.template.show(duration);\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tif (dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\t\t\tif (rangeChangeAnimation) {\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum drill-down levels the chart will allow going to.\r\n\t *\r\n\t * If set, the chart will not drill-down further, even if there are sub-items\r\n\t * available.\r\n\t *\r\n\t * Set to 0 to disable drill down functionality.\r\n\t *\r\n\t * @param {number}  value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param {number}  value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param {\"none\" | \"ascending\" | \"descending\"} value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return {this} new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param {string}  value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(){\r\n\t\tsuper.validateLayout();\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\t\t\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\t\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0, node.y0 = y0;\r\n\t\t\t\tnode.x1 = x1, node.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) k = mid + 1;\r\n\t\t\t\telse hi = mid;\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k)--k;\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.x0 = x0, node.x1 = x1;\r\n\t\t\tnode.y0 = y0, node.y1 = y0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.y0 = y0, node.y1 = y1;\r\n\t\t\tnode.x0 = x0, node.x1 = x0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tparent.level & 1 ? this.slice(parent) : this.dice(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0, dy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo sumValue = nodes.getIndex(i1++).value; while (!sumValue && i1 < n);\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? y0 += dy * sumValue / value : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? x0 += dx * sumValue / value : x1, y1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue, i0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?:this[\"_dataItem\"]): void {\r\n\t\tthis.invalidateDataItems();\r\n\t}\t\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: Array<this[\"_seriesType\"]> = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif(series.level == 1){\r\n\t\t\t\t\tlegendData.push(series);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t\tlegend.itemContainers.template.propertyFields.disabled = \"hiddenInLegend\";\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts",
    "/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @type {IXYChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChart3DEvents}\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / count;\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / count * $math.cos(this.angle) * series.depthIndex;\r\n\t\t\t\tseries.dy = -this.depth / count * $math.sin(this.angle) * series.depthIndex;\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\r\n\t\t\t\t$iter.each(series.columns.iterator(), (column) => {\r\n\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\r\n\t\t\t\ts++;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts",
    "/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CandlestickSeries, CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesAdapters, ICandlestickSeriesEvents } from \"./CandlestickSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { OHLC } from \"../elements/OHLC\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[OHLCSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class OHLCSeriesDataItem extends CandlestickSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the OHLC elements.\r\n\t * @type {OHLC}\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {OHLCSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: OHLCSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"OHLCSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesDataFields extends ICandlestickSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesProperties extends ICandlestickSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesEvents extends ICandlestickSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLCSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCSeriesAdapters extends ICandlestickSeriesAdapters, IOHLCSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link IOHLCSeriesEvents} for a list of available Events\r\n * @see {@link IOHLCSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class OHLCSeries extends CandlestickSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {OHLCSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: OHLCSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IOHLCSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IOHLCSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IOHLCSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IOHLCSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IOHLCSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IOHLCSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IOHLCSeriesEvents}\r\n\t */\r\n\tpublic _events!: IOHLCSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLCSeries\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"OHLC Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {OHLCSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new OHLCSeriesDataItem();\r\n\t}\r\n\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet column: OHLC = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet openLine = column.openLine;\r\n\t\t\tlet highLowLine = column.highLowLine;\r\n\t\t\tlet closeLine = column.closeLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\thighLowLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\topenLine.y1 = yOpen - pixelY;\r\n\t\t\t\topenLine.y2 = yOpen - pixelY;\r\n\t\t\t\topenLine.x1 = 0;\r\n\t\t\t\topenLine.x2 = x;\r\n\r\n\t\t\t\tcloseLine.y1 = yClose - pixelY;\r\n\t\t\t\tcloseLine.y2 = yClose - pixelY;\r\n\t\t\t\tcloseLine.x1 = x;\r\n\t\t\t\tcloseLine.x2 = 2 * x;\r\n\r\n\t\t\t\thighLowLine.y1 = yHigh - pixelY;\r\n\t\t\t\thighLowLine.y2 = yLow - pixelY;\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\thighLowLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\topenLine.x1 = xOpen - pixelX;\r\n\t\t\t\topenLine.x2 = xOpen - pixelX;\r\n\t\t\t\topenLine.y1 = y;\r\n\t\t\t\topenLine.y2 = 2 * y;\r\n\r\n\t\t\t\tcloseLine.x1 = xClose - pixelX;\r\n\t\t\t\tcloseLine.x2 = xClose - pixelX;\r\n\t\t\t\tcloseLine.y1 = 0;\r\n\t\t\t\tcloseLine.y2 = y;\r\n\r\n\t\t\t\thighLowLine.x1 = xHigh - pixelX;\r\n\t\t\t\thighLowLine.x2 = xLow - pixelX;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeOpenLine = rangeColumn.openLine;\r\n\t\t\t\t\trangeOpenLine.x = openLine.x;\r\n\t\t\t\t\trangeOpenLine.y = openLine.y;\r\n\t\t\t\t\trangeOpenLine.x1 = openLine.x1;\r\n\t\t\t\t\trangeOpenLine.x2 = openLine.x2;\r\n\t\t\t\t\trangeOpenLine.y1 = openLine.y1;\r\n\t\t\t\t\trangeOpenLine.y2 = openLine.y2;\r\n\r\n\t\t\t\t\tlet rangeCloseLine = rangeColumn.closeLine;\r\n\t\t\t\t\trangeCloseLine.x = closeLine.x;\r\n\t\t\t\t\trangeCloseLine.y = closeLine.y;\r\n\t\t\t\t\trangeCloseLine.x1 = closeLine.x1;\r\n\t\t\t\t\trangeCloseLine.x2 = closeLine.x2;\r\n\t\t\t\t\trangeCloseLine.y1 = closeLine.y1;\r\n\t\t\t\t\trangeCloseLine.y2 = closeLine.y2;\r\n\r\n\t\t\t\t\tlet rangeHighLowLine = rangeColumn.highLowLine;\r\n\t\t\t\t\trangeHighLowLine.x = highLowLine.x;\r\n\t\t\t\t\trangeHighLowLine.y = highLowLine.y;\r\n\t\t\t\t\trangeHighLowLine.x1 = highLowLine.x1;\r\n\t\t\t\t\trangeHighLowLine.x2 = highLowLine.x2;\r\n\t\t\t\t\trangeHighLowLine.y1 = highLowLine.y1;\r\n\t\t\t\t\trangeHighLowLine.y2 = highLowLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: OHLC = marker.createChild(OHLC);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet openLine: Line = column.openLine;\r\n\t\tlet closeLine: Line = column.closeLine;\r\n\t\tlet highLowLine: Line = column.highLowLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLowLine.y = h / 2;\r\n\t\t\thighLowLine.x2 = w;\r\n\r\n\t\t\topenLine.x = w / 3 * 2;\r\n\t\t\topenLine.y2 = h / 2;\r\n\r\n\t\t\tcloseLine.x = w / 3;\r\n\t\t\tcloseLine.y2 = h;\r\n\t\t\tcloseLine.y1 = h / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\r\n\t\t\thighLowLine.x = w / 2;\r\n\t\t\thighLowLine.y2 = h;\r\n\r\n\t\t\topenLine.y = h / 3 * 2;\r\n\t\t\topenLine.x2 = w / 2;\r\n\r\n\t\t\tcloseLine.y = h / 3;\r\n\t\t\tcloseLine.x2 = w;\r\n\t\t\tcloseLine.x1 = w / 2;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new OHLC();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLCSeries\"] = OHLCSeries;\r\nregistry.registeredClasses[\"OHLCSeriesDataItem\"] = OHLCSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/OHLCSeries.ts",
    "/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {StepLineSeries}\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties {\r\n\tnoRisers?: boolean;\r\n\r\n\tstartLocation?: number;\r\n\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IStepLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IStepLineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IStepLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesEvents}\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {StepLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {StepLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}           points     [description]\r\n\t * @param {this[\"_dataItem\"]}  dataItem   [description]\r\n\t * @param {string}             xField     [description]\r\n\t * @param {string}             yField     [description]\r\n\t * @param {boolean}            backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, startLocation);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, startLocation);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, endLocation);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (this.connect) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: StepLineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet vertical = false;\r\n\t\tif (this.yAxis == this.baseAxis) {\r\n\t\t\tvertical = true;\r\n\t\t}\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new StepLineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if step line series should draw only horizontal (or only\r\n\t * vertical, depending on base axis) lines, instead of connecting them with\r\n\t * vertical (or horizontal) lines.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  No risers\r\n\t */\r\n\tpublic set noRisers(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"noRisers\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} No risers\r\n\t */\r\n\tpublic get noRisers(): boolean {\r\n\t\treturn this.getPropertyValue(\"noRisers\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * start location of the step\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t * @default 0\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"startLocation\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step end location.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t * #default 1\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"endLocation\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts",
    "/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ILineSeriesSegmentAdapters, ILineSeriesSegmentEvents, ILineSeriesSegmentProperties, LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentProperties extends ILineSeriesSegmentProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentEvents extends ILineSeriesSegmentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesSegmentAdapters extends ILineSeriesSegmentAdapters, IStepLineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class StepLineSeriesSegment extends LineSeriesSegment {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentEvents}\r\n\t */\r\n\tpublic _events!: IStepLineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesSegment\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number, noRisers?:boolean, vertical?:boolean): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\r\n\t\t\tif(noRisers){\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]);\r\n\t\t\t\tif(points.length > 0){\r\n\t\t\t\t\tfor(let i = 1; i < points.length; i++){\r\n\t\t\t\t\t\tlet point = points[i];\r\n\t\t\t\t\t\tlet previouosPoint = points[i - 1];\r\n\r\n\t\t\t\t\t\tif(vertical){\r\n\t\t\t\t\t\t\tif(point.y == previouosPoint.y){\r\n\t\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tif(point.x == previouosPoint.x){\r\n\t\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath = $path.moveTo(points[0]) + $path.polyline(points);\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]) + $path.polyline(points);\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts",
    "/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarColumnSeries}\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem:RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column:RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IRadarColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return {this[\"_column\"]} RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\t// @todo use getPoint() instead of these\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\t\tif(arc > 0){\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = radarColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = this.columnsContainer;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarColumnSeriesDataItem} dataItem  [description]\r\n\t * @param {string}                    xKey      [description]\r\n\t * @param {string}                    yKey      [description]\r\n\t * @param {number}                    locationX [description]\r\n\t * @param {number}                    locationY [description]\r\n\t * @param {string}                    stackKeyX [description]\r\n\t * @param {string}                    stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts",
    "/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { Color, color } from \"../../core/utils/Color\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PictorialStackedSeriesDataItem extends PyramidSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PictorialStackedSeries}\r\n\t */\r\n\tpublic _component!: PictorialStackedSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PictorialStackedSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesDataFields extends IPyramidSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesProperties extends IPyramidSeriesProperties {\r\n\tpicture?: Sprite;\r\n}\r\n\r\n/**\r\n * Defines events for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesEvents extends IPyramidSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPictorialStackedSeriesAdapters extends IPyramidSeriesAdapters, IPictorialStackedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PictorialStackedSeries extends PyramidSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPictorialStackedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPictorialStackedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPictorialStackedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPictorialStackedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PictorialStackedSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PictorialStackedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t * \r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PictorialStackedSeries\";\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.valueIs = \"height\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"maxsizechanged\", () => {\r\n\t\t\tthis.resizeMask();\r\n\t\t})\r\n\r\n\t\tthis._maskSprite = this.slicesContainer.createChild(Sprite);\r\n\t\tthis._maskSprite.zIndex = 100;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tthis.resizeMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Sizes the mask to fit the series.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic resizeMask(): void {\r\n\r\n\t\tlet maxWidth = this.slicesContainer.maxWidth;\r\n\t\tlet maxHeight = this.slicesContainer.maxHeight;\r\n\r\n\t\tlet maskSprite = this._maskSprite;\r\n\t\tmaskSprite.validate();\r\n\r\n\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\tlet newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n\t\tlet newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n\r\n\t\tmaskSprite.scale = scale;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\r\n\t\t\tthis.topWidth = newWidth + 4;\r\n\t\t\tthis.bottomWidth = newWidth + 4;\r\n\t\t\tthis.pyramidHeight = newHeight;\r\n\t\t\tmaskSprite.x = maxWidth / 2;\r\n\t\t\tmaskSprite.y = newHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.topWidth = newHeight + 4;\r\n\t\t\tthis.bottomWidth = newHeight + 4;\r\n\t\t\tthis.pyramidHeight = newWidth;\r\n\t\t\tmaskSprite.valign = \"middle\";\r\n\t\t\tmaskSprite.x = newWidth / 2;\r\n\t\t\tmaskSprite.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\r\n\t\tthis.slicesContainer.mask = maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PictorialStackedSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PictorialStackedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] element that is used as a series mask.\r\n\t *\r\n\t * If set, this element's shape will be used to apply shape to the whole\r\n\t * stacked pictorial series.\r\n\t *\r\n\t * You can use this element's `path` property to set an SVG path for the\r\n\t * shape:\r\n\t *\r\n\t * ```TypeScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JSON\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"PictorialStackedSeries\",\r\n\t *     // ...\r\n\t *     \"maskSprite\": {\r\n\t *       \"path\": iconPath\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return {Sprite} Mask sprite\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param  {FunnelSlice} slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tsuper.initSlice(slice);\r\n\r\n\t\tlet hs = slice.states.getKey(\"hover\");\r\n\t\tif (hs) {\r\n\t\t\ths.properties.expandDistance = 0;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PictorialStackedSeries.ts",
    "/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {ConeSeries}\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IConeSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IConeSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IConeSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeSeriesEvents}\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts",
    "/**\r\n * CurvedColumnSeries module.\r\n * \r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { CurvedColumn } from \"../elements/CurvedColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurvedColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {CurvedColumnSeries}\r\n\t */\r\n\tpublic _component!: CurvedColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnSeriesAdapters extends IColumnSeriesAdapters, ICurvedColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a curved columns graph.\r\n *\r\n * @see {@link ICurvedColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurvedColumnSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Dfines type of the column.\r\n\t * \r\n\t * @type {CurvedColumn}\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines type of the data item.\r\n\t *\r\n\t * @type {CurvedColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CurvedColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICurvedColumnSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICurvedColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: ICurvedColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CurvedColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for the curved column.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new CurvedColumn();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tlet column = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet curvedColumn = dataItem.column.curvedColumn;\r\n\r\n\t\t\tcurvedColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tcolumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumnSeries\"] = CurvedColumnSeries;\r\nregistry.registeredClasses[\"CurvedColumnSeriesDataItem\"] = CurvedColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CurvedColumnSeries.ts",
    "/**\r\n * DurationAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DurationAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {DurationAxis}\r\n\t */\r\n\tpublic _component!: DurationAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisDataFields extends IValueAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisProperties extends IValueAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DurationAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDurationAxisAdapters extends IValueAxisAdapters, IDurationAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DurationAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {IDurationAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDurationAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDurationAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDurationAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDurationAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDurationAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDurationAxisEvents}\r\n\t */\r\n\tpublic _events!: IDurationAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {DurationAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DurationAxisDataItem;\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t */\r\n\tprotected _baseUnit: TimeUnit = \"second\";\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipDurationFormat: string;\r\n\r\n\t/**\r\n\t * Axis date format chosen dynamically based on min/max and baseUnit.\r\n\t * \r\n\t * @readonly\r\n\t */\r\n\tpublic axisDurationFormat: string;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DurationFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number, format?: string): string {\r\n\t\treturn this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}      min        [description]\r\n\t * @param  {number}      max        [description]\r\n\t * @param  {number}      difference [description]\r\n\t * @param  {number}      gridCount  [description]\r\n\t * @param  {boolean}     strictMode [description]\r\n\t * @return {IMinMaxStep}            [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\tlet minMaxStep: IMinMaxStep;\r\n\r\n\t\tlet timeUnit = this.baseUnit;\r\n\t\t// we don't allow to go to smaller units, setting so to avoid invalidation\r\n\t\tthis.setPropertyValue(\"maxPrecision\", 0);\r\n\r\n\t\tif (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n\t\t\t// will fail if 0\r\n\t\t\tif (gridCount <= 1) {\r\n\t\t\t\tgridCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\t\tlet initialMin: number = min;\r\n\t\t\tlet initialMax: number = max;\r\n\r\n\t\t\t// in case min and max is the same, use max\r\n\t\t\tif (difference === 0) {\r\n\t\t\t\tdifference = Math.abs(max);\r\n\t\t\t}\r\n\r\n\t\t\tlet step = difference / gridCount;\r\n\r\n\t\t\tlet divisors = [60, 30, 20, 15, 10, 2, 1];\r\n\t\t\tlet realDivisor = 1;\r\n\r\n\t\t\tif (timeUnit == \"hour\") {\r\n\t\t\t\tdivisors = [24, 12, 6, 4, 2, 1];\r\n\t\t\t}\r\n\r\n\t\t\tfor (let divisor of divisors) {\r\n\t\t\t\tif (difference / divisor > gridCount) {\r\n\t\t\t\t\trealDivisor = divisor;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n\r\n\t\t\tlet exponent: number = Math.log(Math.abs(count)) * Math.LOG10E;\r\n\t\t\tlet power = Math.pow(10, Math.floor(exponent)) / 10;\r\n\t\t\tlet reducedCount = count / power;\r\n\r\n\t\t\t// find closest to divisor\r\n\t\t\tlet closest = $math.closest(divisors, reducedCount);\r\n\t\t\tcount = closest * power;\r\n\r\n\t\t\tstep = realDivisor * count;\r\n\r\n\t\t\tlet unit = this.durationFormatter.getValueUnit(step, this.baseUnit);\r\n\r\n\t\t\tmin = Math.floor(min / step) * step;\r\n\t\t\tmax = Math.ceil(max / step) * step;\r\n\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin -= step;\r\n\t\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\t\tmin = 0;\r\n\t\t\t\t}\r\n\t\t\t\tmax += step;\r\n\r\n\t\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\tminMaxStep = { min: min, max: max, step: step };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tminMaxStep = super.adjustMinMax(min, max, difference, gridCount, strictMode);\r\n\t\t}\r\n\r\n\t\t// choose duration formatter based on step\r\n\t\tthis.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n\r\n\t\treturn minMaxStep;\r\n\t}\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n\t * @param {string}  value  Duration format for axis labels\r\n\t */\r\n\tpublic set tooltipDurationFormat(value: string) {\r\n\t\tthis._tooltipDurationFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Duration format for axis labels\r\n\t */\r\n\tpublic get tooltipDurationFormat(): string {\r\n\t\treturn this._tooltipDurationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n\t\treturn this.adapter.apply(\"getTooltipText\", this.formatLabel(value, this.tooltipDurationFormat));\r\n\t}\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n\t * \"day\", \"week\", \"month\", \"year\".\r\n\t *\r\n\t * @default \"second\"\r\n\t * @param {TimeUnit} timeUnit\r\n\t */\r\n\tpublic set baseUnit(timeUnit: TimeUnit) {\r\n\t\tif (this._baseUnit != timeUnit) {\r\n\t\t\tthis._baseUnit = timeUnit;\r\n\t\t\tthis.durationFormatter.baseUnit = timeUnit;\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {TimeUnit} Base unit\r\n\t */\r\n\tpublic get baseUnit(): TimeUnit {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param {this} source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.baseUnit = source.baseUnit;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DurationAxis.ts",
    "/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICircleBulletProperties}\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICircleBulletAdapters}\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICircleBulletEvents}\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tlet circle = this.createChild(Circle);\r\n\t\tcircle.shouldClone = false;\r\n\t\tcircle.radius = 5;\r\n\t\tcircle.isMeasured = false;\r\n\t\tthis.circle = circle;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts",
    "/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChartScrollbarProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChartScrollbarAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartScrollbarEvents}\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t *\r\n\t * @type {List<XYSeries>}\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.setElement(this.paper.add(\"path\"));\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<XYSeries>} Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this));\r\n\t\t\tthis._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this));\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\txAxis.title.disabled = true;\r\n\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tthis._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this));\r\n\t\tthis._disposers.push(sourceSeries.events.on(\"datavalidated\", ()=>{\r\n\t\t\tseries.data = sourceSeries.data;\r\n\t\t}));\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\t\tscrollbarChart.series.push(series);\r\n\r\n\t\tthis.updateByOrientation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return {XYChart} Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param {XYChart} chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYChart} Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\t//@todo: what if raw data changed?\r\n\t\tif(this.chart.data != this.scrollbarChart.data){\r\n\t\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX || 0;\r\n\t\t\tlet y: number = thumb.pixelY || 0;\r\n\t\t\tlet w: number = thumb.pixelWidth || 0;\r\n\t\t\tlet h: number = thumb.pixelHeight || 0;\r\n\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: (this.pixelWidth || 0) - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: (this.pixelHeight || 0) - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/XYChartScrollbar.ts",
    "/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param {string}  value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {NavigationBarDataFIelds}\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {INavigationBarProperties}\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {INavigationBarAdapters}\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {INavigationBarEvents}\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t *\r\n\t * @type {ListTemplate<TextLink>}\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<TextLink>}\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<Sprite>}\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t *\r\n\t * @type {TextLink}\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t *\r\n\t * @type {ListTemplate<Triangle>}\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(textLink);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {NavigationBarDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: NavigationBarDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t\ttextLink.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts",
    "/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { Axis, AxisItemLocation } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { IDataItemEvents } from \"../../core/DataItem\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t * @type {Column}\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {ColumnSeries}\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, Sprite>}\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param {Column}  column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Column} Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <ColumnSeriesDataItem>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.columns.removeValue(column);\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, this[\"_column\"]>}\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\t/**\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {ColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t *\r\n\t * @type {ListTemplate<Sprite>}\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * When working value of dataItem changes, we must process all the values to calculate sum, min, max etc. Also update stack values. This is quite expensive operation.\r\n\t * Unfortunately we do not know if user needs this processed values or not. By setting simplifiedProcessing = true you disable this processing and in case working\r\n\t * value changes, we only redraw the particular column. Do not do this if you have staked chart or use calculated values in bullets or in tooltips.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns;\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {ColumnSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\t\tlet baseAxisSeries = this.chart.series;\r\n\t\tlet clusterCount: number = 0;\r\n\t\tlet index: number = 0;\r\n\r\n\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || clusterCount === 0) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.index < this.startIndex || dataItem.index >= this.endIndex) {\r\n\t\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tthis.validateDataElementReal(dataItem);\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?:this[\"_dataItem\"]): void {\r\n\t\tif (this.simplifiedProcessing) {\r\n\t\t\tthis.validateDataElement(dataItem);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper.handleDataItemWorkingValueChange(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tbottomLocation = 0;\r\n\t\t\t\ttopLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\trightLocation = 0;\r\n\t\t\t\tleftLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t}\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (w - paddingLeft - paddingRight > 0 && h - paddingTop - paddingBottom > 0) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.realX = l;\r\n\t\t\tcolumn.realY = t;\r\n\r\n\t\t\tcolumn.realWidth = r - l;\r\n\t\t\tcolumn.realHeight = b - t;\r\n\r\n\t\t\tcolumn.parent = this.columnsContainer;\r\n\t\t\tcolumn.virtualParent = this;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\tdisableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem.column) {\r\n\t\t\t// otherwise might flicker when enabling\r\n\t\t\tdataItem.column.width = 0;\r\n\t\t\tdataItem.column.height = 0;\r\n\t\t\tdataItem.column.__disabled = true;\r\n\t\t}\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\tif (rangeColumn) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param {Sprite}  sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\tlet open: number;\r\n\t\t\tlet value: number;\r\n\t\t\tlet change: number;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tif (this.xOpenField && this.xField) {\r\n\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.yOpenField && this.yField) {\r\n\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (value < open) {\r\n\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (change < 0) {\r\n\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set accessibility\r\n\t\tif (!this.isInTransition()) {\r\n\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tsprite.role = \"menuitem\";\r\n\t\t\t\tsprite.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.role = \"listitem\";\r\n\t\t\t\tsprite.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Set readerTitle on demand only (focus or hover)\r\n\t\t\tif ($type.hasValue(this.itemReaderText) && this.itemReaderText != \"\") {\r\n\t\t\t\tif (sprite.focusable) {\r\n\t\t\t\t\tsprite.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsprite.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (sprite.hoverable) {\r\n\t\t\t\t\tsprite.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsprite.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return {ListTemplate<this[\"_column\"]>} Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return {this[\"_column\"]} Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries.ts",
    "/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column]].\r\n */\r\nexport interface IColumnProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Column]].\r\n */\r\nexport interface IColumnEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnAdapters extends IContainerAdapters, IColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IColumnProperties}\r\n\t */\r\n\tpublic _properties!: IColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnEvents}\r\n\t */\r\n\tpublic _events!: IColumnEvents;\r\n\r\n\t/**\r\n\t * column element\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic column: RoundedRectangle;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realWidth:number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realHeight:number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realX:number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realY:number;\t\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column\";\r\n\r\n\t\tthis.width = percent(80);\r\n\t\tthis.height = percent(80);\r\n\r\n\t\tthis.isMeasured = true; // for correct position of the tooltip\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.createAssets();\r\n\r\n\t\t// otherwise users will have to set layout themselves if they'll want to align, scale etc children\r\n\t\tthis.events.on(\"childadded\", () => {\r\n\t\t\tif (this.layout == \"none\") {\r\n\t\t\t\tthis.layout = \"absolute\";\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tprotected createAssets() {\r\n\t\tthis.column = this.createChild(RoundedRectangle);\r\n\t\tthis.column.shouldClone = false;\r\n\t\tthis.column.cornerRadius(0, 0, 0, 0);\r\n\t\tthis._disposers.push(this.column);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates element:\r\n\t * * Triggers events\r\n\t * * Redraws the element\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.width = $math.min(this.pixelWidth, this.maxWidth);\r\n\t\t\tthis.column.height = $math.min(this.pixelHeight, this.maxHeight);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param {Sprite} source Source Sprite\r\n\t */\r\n\tpublic copyFrom(source :this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.copyFrom(source.column);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getContainerBBox(x: number, y: number, width: number, height: number): IRectangle {\r\n\t\tif(this.column){\r\n\t\t\treturn { x: 0, y: 0, width: this.column.measuredWidth, height: this.column.measuredHeight };\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn { x: 0, y: 0, width: $math.min(this.pixelWidth, this.maxWidth), height: $math.min(this.pixelHeight, this.maxHeight) };\t\r\n\t\t}\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column\"] = Column;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column.ts"
  ],
  "sourceRoot": ""
}